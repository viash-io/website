[
  [
    {
      "name" : "__this__",
      "type" : "Config",
      "niceType" : "Config",
      "hierarchy" : [
        "io.viash.config.Config"
      ],
      "description" : "A Viash configuration is a YAML file which contains metadata to describe the behaviour and build target(s) of a component.  \nWe commonly name this file `config.vsh.yaml` in our examples, but you can name it however you choose.  \n",
      "example" : [
        {
          "example" : "name: hello_world\narguments:\n  - type: string\n    name: --input\n    default: \"world\"\nresources:\n  - type: bash_script\n    path: script.sh\n    text: echo Hello $par_input\nrunners:\n  - type: executable\nengines:\n  - type: docker\n    image: \"bash:4.0\"\n",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "license",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The license of the package.",
      "example" : [
        {
          "example" : "license: MIT",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "authors",
      "type" : "List[Author]",
      "niceType" : "List of Author",
      "description" : "A list of @[authors](author). An author must at least have a name, but can also have a list of roles, an e-mail address, and a map of custom properties.\n\nSuggested values for roles are:\n \n| Role | Abbrev. | Description |\n|------|---------|-------------|\n| maintainer | mnt | for the maintainer of the code. Ideally, exactly one maintainer is specified. |\n| author | aut | for persons who have made substantial contributions to the software. |\n| contributor | ctb| for persons who have made smaller contributions (such as code patches).\n| datacontributor | dtc | for persons or organisations that contributed data sets for the software\n| copyrightholder | cph | for all copyright holders. This is a legal concept so should use the legal name of an institution or corporate body.\n| funder | fnd | for persons or organizations that furnished financial support for the development of the software\n\nThe [full list of roles](https://www.loc.gov/marc/relators/relaterm.html) is extremely comprehensive.\n",
      "example" : [
        {
          "example" : "authors:\n  - name: Jane Doe\n    role: [author, maintainer]\n    email: jane@doe.com\n    info:\n      github: janedoe\n      twitter: janedoe\n      orcid: XXAABBCCXX\n      groups: [ one, two, three ]\n  - name: Tim Farbe\n    roles: [author]\n    email: tim@far.be\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.3.1",
      "default" : "Empty"
    },
    {
      "name" : "status",
      "type" : "Status",
      "niceType" : "Status",
      "description" : "Allows setting a component to active, deprecated or disabled.",
      "since" : "Viash 0.6.0",
      "default" : "Enabled"
    },
    {
      "name" : "requirements",
      "type" : "ComputationalRequirements",
      "niceType" : "ComputationalRequirements",
      "description" : "@[Computational requirements](computational_requirements) related to running the component. \n`cpus` specifies the maximum number of (logical) cpus a component is allowed to use., whereas\n`memory` specifies the maximum amount of memory a component is allowed to allicate. Memory units must be\nin B, KB, MB, GB, TB or PB for SI units (1000-base), or KiB, MiB, GiB, TiB or PiB for binary IEC units (1024-base).",
      "example" : [
        {
          "example" : "requirements:\n  cpus: 5\n  memory: 10GB\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.0",
      "default" : "Empty"
    },
    {
      "name" : "repositories",
      "type" : "List[RepositoryWithName]",
      "niceType" : "List of RepositoryWithName",
      "description" : "(Pre-)defines repositories that can be used as repository in dependencies.\nAllows reusing repository definitions in case it is used in multiple dependencies.",
      "example" : [
        {
          "example" : "repositories:\n  - name: openpipelines-bio\n    type: github\n    uri: openpipelines-bio/modules\n    tag: 0.3.0\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "dependencies",
      "type" : "List[Dependency]",
      "niceType" : "List of Dependency",
      "description" : "Allows listing Viash components required by this Viash component",
      "example" : [
        {
          "example" : "dependencies:\n  - name: qc/multiqc\n    repository: \n      type: github\n      uri: openpipelines-bio/modules\n      tag: 0.3.0\n",
          "format" : "yaml",
          "description" : "Full specification of a repository"
        },
        {
          "example" : "dependencies:\n  - name: qc/multiqc\n    repository: \"github://openpipelines-bio/modules:0.3.0\"\n",
          "format" : "yaml",
          "description" : "Full specification of a repository using sugar syntax"
        },
        {
          "example" : "dependencies:\n  - name: qc/multiqc\n    repository: \"openpipelines-bio\"\n",
          "format" : "yaml",
          "description" : "Reference to a repository fully specified under 'repositories'"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "namespace",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Namespace this component is a part of. See the @[Namespaces guide](namespace) for more information on namespaces.",
      "example" : [
        {
          "example" : "namespace: fancy_components",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "functionality",
      "type" : "Functionality",
      "niceType" : "Functionality",
      "description" : "The @[functionality](functionality) describes the behaviour of the script in terms of arguments and resources.\nBy specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you.\n",
      "deprecated" : {
        "message" : "Functionality level is deprecated, all functionality fields are now located on the top level of the config file.",
        "deprecation" : "0.9.0",
        "removal" : "0.10.0"
      },
      "default" : ""
    },
    {
      "name" : "runners",
      "type" : "List[Runner]",
      "niceType" : "List of Runner",
      "description" : "A list of runners to execute target artifacts.\n\n - @[ExecutableRunner](executable_runner)\n - @[NextflowRunner](nextflow_runner)\n",
      "since" : "Viash 0.8.0",
      "default" : "Empty"
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "Name of the component and the filename of the executable when built with `viash build`.",
      "example" : [
        {
          "example" : "name: this_is_my_component",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "argument_groups",
      "type" : "List[ArgumentGroup]",
      "niceType" : "List of ArgumentGroup",
      "description" : "A grouping of the @[arguments](argument), used to display the help message.\n\n - `name: foo`, the name of the argument group. \n - `description: Description of foo`, a description of the argument group. Multiline descriptions are supported.\n - `arguments: [arg1, arg2, ...]`, list of the arguments.\n\n",
      "example" : [
        {
          "example" : "argument_groups:\n  - name: \"Input\"\n    arguments:\n      - name: \"--id\"\n        type: string\n        required: true\n      - name: \"--input\"\n        type: file\n        required: true\n  - name: \"Output\"\n    arguments:\n      - name: \"--output\"\n        type: file\n        direction: output\n        required: true\n      - name: \"--output_optional\"\n        type: file\n        direction: output\n",
          "format" : "yaml"
        },
        {
          "example" : "component_name\n\n  Input:\n      --id\n          type: string\n\n      --input\n          type: file\n\n  Output:\n      --output\n          type: file\n\n      --optional_output\n          type: file\n",
          "format" : "bash",
          "description" : "This results in the following output when calling the component with the `--help` argument:"
        }
      ],
      "since" : "Viash 0.5.14",
      "default" : "Empty"
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description of the component. This will be displayed with `--help`.",
      "example" : [
        {
          "example" : "description: |\n  This component performs function Y and Z.\n  It is possible to make this a multiline string.\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "usage",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description on how to use the component. This will be displayed with `--help` under the 'Usage:' section.",
      "example" : [
        {
          "example" : "usage: Place the executable in a directory containing TSV files and run it",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "example" : [
        {
          "example" : "info:\n  twitter: wizzkid\n  classes: [ one, two, three ]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.4.0",
      "default" : "Empty"
    },
    {
      "name" : "platforms",
      "type" : "List[Platform]",
      "niceType" : "List of Platform",
      "description" : "A list of platforms to generate target artifacts for.\n\n - @[Native](platform_native)\n - @[Docker](platform_docker)\n - @[Nextflow](platform_nextflow)\n",
      "deprecated" : {
        "message" : "Use 'engines' and 'runners' instead.",
        "deprecation" : "0.9.0",
        "removal" : "0.10.0"
      },
      "default" : "Empty"
    },
    {
      "name" : "version",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Version of the component. This field will be used to version the executable and the Docker container.",
      "example" : [
        {
          "example" : "version: 0.8",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "links",
      "type" : "Links",
      "niceType" : "Links",
      "description" : "External links of the component.",
      "example" : [
        {
          "example" : "links:\n  repository: \"https://github.com/viash-io/viash\"\n  docker_registry: \"https://ghcr.io\"\n  homepage: \"https://viash.io\"\n  documentation: \"https://viash.io/reference/\"\n  issue_tracker: \"https://github.com/viash-io/viash/issues\"\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "references",
      "type" : "References",
      "niceType" : "References",
      "description" : "References to external resources related to the component.",
      "example" : [
        {
          "example" : "references:\n  doi: 10.1000/xx.123456.789\n  bibtex: |\n    @article{foo,\n      title={Foo},\n      author={Bar},\n      journal={Baz},\n      year={2024}\n    }\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "engines",
      "type" : "List[Engine]",
      "niceType" : "List of Engine",
      "description" : "A list of engine environments to execute target artifacts in.\n\n - @[NativeEngine](native_engine)\n - @[DockerEngine](docker_engine)\n",
      "since" : "Viash 0.8.0",
      "default" : "Empty"
    },
    {
      "name" : "resources",
      "type" : "List[Resource]",
      "niceType" : "List of Resource",
      "description" : "@[Resources](resources) are files that support the component. The first resource should be @[a script](scripting_languages) that will be executed when the component is run. Additional resources will be copied to the same directory.\n\nCommon properties:\n\n * type: `file` / `r_script` / `python_script` / `bash_script` / `javascript_script` / `scala_script` / `csharp_script`, specifies the type of the resource. The first resource cannot be of type `file`. When the type is not specified, the default type is simply `file`.\n * dest: filename, the resulting name of the resource.  From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.\n * path: `path/to/file`, the path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.\n * text: ...multiline text..., the content of the resulting file specified as a string. Mutually exclusive with `path`.\n * is_executable: `true` / `false`, whether the resulting resource file should be made executable.\n",
      "example" : [
        {
          "example" : "resources:\n  - type: r_script\n    path: script.R\n  - type: file\n    path: resource1.txt\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "keywords",
      "type" : "List[String]",
      "niceType" : "List of String",
      "description" : "The keywords of the components.",
      "example" : [
        {
          "example" : "keywords: [ bioinformatics, genomics ]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "test_resources",
      "type" : "List[Resource]",
      "niceType" : "List of Resource",
      "description" : "One or more @[scripts](scripting_languages) to be used to test the component behaviour when `viash test` is invoked. Additional files of type `file` will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing. See @[Unit Testing](unit_testing) for more info.",
      "example" : [
        {
          "example" : "test_resources:\n  - type: bash_script\n    path: tests/test1.sh\n  - type: r_script\n    path: tests/test2.R\n  - path: resource1.txt\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "__merge__",
      "type" : "Option[File]",
      "niceType" : "Option of File",
      "description" : "Config inheritance by including YAML partials. This is useful for defining common APIs in\nseparate files. `__merge__` can be used in any level of the YAML. For example,\nnot just in the config but also in the argument_groups or any of the engines.\n",
      "example" : [
        {
          "example" : "__merge__: ../api/common_interface.yaml",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.3",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "PackageConfig",
      "niceType" : "PackageConfig",
      "hierarchy" : [
        "io.viash.packageConfig.PackageConfig"
      ],
      "description" : "A Viash package configuration file. It's name should be `_viash.yaml`.",
      "example" : [
        {
          "example" : "viash_version: 0.9.0\nsource: src\ntarget: target\nversion: 1.0\norganization: viash-io\nlinks:\n  repository: 'https://github.com/viash-io/viash'\n  docker_registry: 'ghcr.io'\nconfig_mods: |\n  .runners[.type == 'nextflow'].directives.tag := '$id'\n  .runners[.type == 'nextflow'].config.script := 'includeConfig(\"configs/custom.config\")'\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.4"
    },
    {
      "name" : "organization",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The organization of the package.",
      "example" : [
        {
          "example" : "organization: viash-io",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "name",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The name of the package.",
      "example" : [
        {
          "example" : "name: my_package",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "source",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Which source directory to use for the `viash ns` commands.",
      "example" : [
        {
          "example" : "source: src",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description of the package.",
      "example" : [
        {
          "example" : "description: My package",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "viash_version",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Which version of Viash to use.",
      "example" : [
        {
          "example" : "viash_versions: 0.6.4",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "config_mods",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Which config mods to apply.",
      "example" : [
        {
          "example" : "config_mods: \".name := 'foo'\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "example" : [
        {
          "example" : "info:\n  twitter: wizzkid\n  classes: [ one, two, three ]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "license",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The license of the package.",
      "example" : [
        {
          "example" : "license: MIT",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "references",
      "type" : "References",
      "niceType" : "References",
      "description" : "References to external resources related to the package.",
      "example" : [
        {
          "example" : "references:\n  doi: 10.1000/xx.123456.789\n  bibtex: |\n    @article{foo,\n      title={Foo},\n      author={Bar},\n      journal={Baz},\n      year={2024}\n    }\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "authors",
      "type" : "List[Author]",
      "niceType" : "List of Author",
      "description" : "The authors of the package.",
      "example" : [
        {
          "example" : "authors:\n  - name: Jane Doe\n    role: [author, maintainer]\n    email: jane@doe.com\n    info:\n      github: janedoe\n      twitter: janedoe\n      orcid: XXAABBCCXX\n      groups: [ one, two, three ]\n  - name: Tim Farbe\n    roles: [author]\n    email: tim@far.be\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "repositories",
      "type" : "List[RepositoryWithName]",
      "niceType" : "List of RepositoryWithName",
      "description" : "Common repository definitions for component dependencies.",
      "example" : [
        {
          "example" : "repositories:\n  - name: openpipelines-bio\n    type: github\n    uri: openpipelines-bio/modules\n    tag: 0.3.0\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "keywords",
      "type" : "List[String]",
      "niceType" : "List of String",
      "description" : "The keywords of the package.",
      "example" : [
        {
          "example" : "keywords: [ bioinformatics, genomics ]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "target",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Which target directory to use for `viash ns build`.",
      "example" : [
        {
          "example" : "target: target",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "version",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The version of the package.",
      "example" : [
        {
          "example" : "version: 0.1.0",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "links",
      "type" : "Links",
      "niceType" : "Links",
      "description" : "External links of the package.",
      "example" : [
        {
          "example" : "links:\n  repository: \"https://github.com/viash-io/viash\"\n  docker_registry: \"https://ghcr.io\"\n  homepage: \"https://viash.io\"\n  documentation: \"https://viash.io/reference/\"\n  issue_tracker: \"https://github.com/viash-io/viash/issues\"\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "BuildInfo",
      "niceType" : "BuildInfo",
      "hierarchy" : [
        "io.viash.config.BuildInfo"
      ],
      "description" : "Meta information fields filled in by Viash during build."
    },
    {
      "name" : "git_tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Git tag.",
      "default" : "Empty"
    },
    {
      "name" : "git_remote",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Git remote name.",
      "default" : "Empty"
    },
    {
      "name" : "viash_version",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The Viash version that was used to build the component.",
      "default" : "Empty"
    },
    {
      "name" : "output",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Folder path to the build artifacts.",
      "default" : "Empty"
    },
    {
      "name" : "git_commit",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Git commit hash.",
      "default" : "Empty"
    },
    {
      "name" : "engine",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The engine id used during build.",
      "default" : "Empty"
    },
    {
      "name" : "runner",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The runner id used during build.",
      "default" : "Empty"
    },
    {
      "name" : "config",
      "type" : "String",
      "niceType" : "String",
      "description" : "Path to the config used during build."
    },
    {
      "name" : "dependencies",
      "type" : "Option[List[String]]",
      "niceType" : "Option[List[String]]",
      "description" : "List of dependencies used during build.",
      "default" : "Empty"
    },
    {
      "name" : "executable",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Output folder with main executable path.",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "EnvironmentVariables",
      "niceType" : "EnvironmentVariables",
      "hierarchy" : [
        "io.viash.helpers.SysEnvTrait"
      ],
      "description" : "Viash checks several environment variables during operation."
    },
    {
      "name" : "VIASH_VERSION",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A specific Viash version can be set to run the commands with. If so required, the specific Viash version will be downloaded.\nThis is useful when replicating older results or building Viash components that use outdated code.\n",
      "example" : [
        {
          "example" : "VIASH_VERSION=0.7.0 viash ns build",
          "format" : "sh"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "VIASH_HOME",
      "type" : "String",
      "niceType" : "String",
      "description" : "If `VIASH_HOME` is not defined, the fallback `HOME`/.viash is used.\n\nLocation where specific downloaded versions of Viash will be cached and run from.\n"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Functionality",
      "niceType" : "Functionality",
      "hierarchy" : [
        "io.viash.functionality.Functionality"
      ],
      "description" : "The functionality-part of the config file describes the behaviour of the script in terms of arguments and resources.\nBy specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you.\n",
      "deprecated" : {
        "message" : "Functionality level is deprecated, all functionality fields are now located on the top level of the config file.",
        "deprecation" : "0.9.0",
        "removal" : "0.10.0"
      }
    },
    {
      "name" : "organization",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The organization of the package.",
      "example" : [
        {
          "example" : "organization: viash-io",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "Name of the component and the filename of the executable when built with `viash build`.",
      "example" : [
        {
          "example" : "name: this_is_my_component",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "argument_groups",
      "type" : "List[ArgumentGroup]",
      "niceType" : "List of ArgumentGroup",
      "description" : "A grouping of the @[arguments](argument), used to display the help message.\n\n - `name: foo`, the name of the argument group. \n - `description: Description of foo`, a description of the argument group. Multiline descriptions are supported.\n - `arguments: [arg1, arg2, ...]`, list of the arguments.\n\n",
      "example" : [
        {
          "example" : "argument_groups:\n  - name: \"Input\"\n    arguments:\n      - name: \"--id\"\n        type: string\n        required: true\n      - name: \"--input\"\n        type: file\n        required: true\n  - name: \"Output\"\n    arguments:\n      - name: \"--output\"\n        type: file\n        direction: output\n        required: true\n      - name: \"--output_optional\"\n        type: file\n        direction: output\n",
          "format" : "yaml"
        },
        {
          "example" : "component_name\n\n  Input:\n      --id\n          type: string\n\n      --input\n          type: file\n\n  Output:\n      --output\n          type: file\n\n      --optional_output\n          type: file\n",
          "format" : "bash",
          "description" : "This results in the following output when calling the component with the `--help` argument:"
        }
      ],
      "since" : "Viash 0.5.14",
      "default" : "Empty"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "example" : [
        {
          "example" : "info:\n  twitter: wizzkid\n  classes: [ one, two, three ]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.4.0",
      "default" : "Empty"
    },
    {
      "name" : "license",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The license of the package.",
      "example" : [
        {
          "example" : "license: MIT",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "references",
      "type" : "References",
      "niceType" : "References",
      "description" : "References to external resources related to the component.",
      "example" : [
        {
          "example" : "references:\n  doi: 10.1000/xx.123456.789\n  bibtex: |\n    @article{foo,\n      title={Foo},\n      author={Bar},\n      journal={Baz},\n      year={2024}\n    }\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "authors",
      "type" : "List[Author]",
      "niceType" : "List of Author",
      "description" : "A list of @[authors](author). An author must at least have a name, but can also have a list of roles, an e-mail address, and a map of custom properties.\n\nSuggested values for roles are:\n \n| Role | Abbrev. | Description |\n|------|---------|-------------|\n| maintainer | mnt | for the maintainer of the code. Ideally, exactly one maintainer is specified. |\n| author | aut | for persons who have made substantial contributions to the software. |\n| contributor | ctb| for persons who have made smaller contributions (such as code patches).\n| datacontributor | dtc | for persons or organisations that contributed data sets for the software\n| copyrightholder | cph | for all copyright holders. This is a legal concept so should use the legal name of an institution or corporate body.\n| funder | fnd | for persons or organizations that furnished financial support for the development of the software\n\nThe [full list of roles](https://www.loc.gov/marc/relators/relaterm.html) is extremely comprehensive.\n",
      "example" : [
        {
          "example" : "authors:\n  - name: Jane Doe\n    role: [author, maintainer]\n    email: jane@doe.com\n    info:\n      github: janedoe\n      twitter: janedoe\n      orcid: XXAABBCCXX\n      groups: [ one, two, three ]\n  - name: Tim Farbe\n    roles: [author]\n    email: tim@far.be\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.3.1",
      "default" : "Empty"
    },
    {
      "name" : "status",
      "type" : "Status",
      "niceType" : "Status",
      "description" : "Allows setting a component to active, deprecated or disabled.",
      "since" : "Viash 0.6.0",
      "default" : "Enabled"
    },
    {
      "name" : "requirements",
      "type" : "ComputationalRequirements",
      "niceType" : "ComputationalRequirements",
      "description" : "@[Computational requirements](computational_requirements) related to running the component. \n`cpus` specifies the maximum number of (logical) cpus a component is allowed to use., whereas\n`memory` specifies the maximum amount of memory a component is allowed to allicate. Memory units must be\nin B, KB, MB, GB, TB or PB for SI units (1000-base), or KiB, MiB, GiB, TiB or PiB for binary IEC units (1024-base).",
      "example" : [
        {
          "example" : "requirements:\n  cpus: 5\n  memory: 10GB\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.0",
      "default" : "Empty"
    },
    {
      "name" : "repositories",
      "type" : "List[RepositoryWithName]",
      "niceType" : "List of RepositoryWithName",
      "description" : "(Pre-)defines @[repositories](repository) that can be used as repository in dependencies.\nAllows reusing repository definitions in case it is used in multiple dependencies.",
      "example" : [
        {
          "example" : "repositories:\n  - name: openpipelines-bio\n    type: github\n    uri: openpipelines-bio/modules\n    tag: 0.3.0\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "test_resources",
      "type" : "List[Resource]",
      "niceType" : "List of Resource",
      "description" : "One or more @[scripts](scripting_languages) to be used to test the component behaviour when `viash test` is invoked. Additional files of type `file` will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code >0 when unexpected behaviour occurs during testing. See @[Unit Testing](unit_testing) for more info.",
      "example" : [
        {
          "example" : "test_resources:\n  - type: bash_script\n    path: tests/test1.sh\n  - type: r_script\n    path: tests/test2.R\n  - path: resource1.txt\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "dependencies",
      "type" : "List[Dependency]",
      "niceType" : "List of Dependency",
      "description" : "Allows listing Viash components required by this Viash component",
      "example" : [
        {
          "example" : "dependencies:\n  - name: qc/multiqc\n    repository: \n      type: github\n      uri: openpipelines-bio/modules\n      tag: 0.3.0\n",
          "format" : "yaml",
          "description" : "Full specification of a repository"
        },
        {
          "example" : "dependencies:\n  - name: qc/multiqc\n    repository: \"github://openpipelines-bio/modules:0.3.0\"\n",
          "format" : "yaml",
          "description" : "Full specification of a repository using sugar syntax"
        },
        {
          "example" : "dependencies:\n  - name: qc/multiqc\n    repository: \"openpipelines-bio\"\n",
          "format" : "yaml",
          "description" : "Reference to a repository fully specified under 'repositories'"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description of the component. This will be displayed with `--help`.",
      "example" : [
        {
          "example" : "description: |\n  This component performs function Y and Z.\n  It is possible to make this a multiline string.\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "usage",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description on how to use the component. This will be displayed with `--help` under the 'Usage:' section.",
      "example" : [
        {
          "example" : "usage: Place the executable in a directory containing TSV files and run it",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "version",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Version of the component. This field will be used to version the executable and the Docker container.",
      "example" : [
        {
          "example" : "version: 0.8",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "links",
      "type" : "Links",
      "niceType" : "Links",
      "description" : "External links of the component.",
      "example" : [
        {
          "example" : "links:\n  repository: \"https://github.com/viash-io/viash\"\n  docker_registry: \"https://ghcr.io\"\n  homepage: \"https://viash.io\"\n  documentation: \"https://viash.io/reference/\"\n  issue_tracker: \"https://github.com/viash-io/viash/issues\"\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "resources",
      "type" : "List[Resource]",
      "niceType" : "List of Resource",
      "description" : "@[Resources](resources) are files that support the component. The first resource should be @[a script](scripting_languages) that will be executed when the functionality is run. Additional resources will be copied to the same directory.\n\nCommon properties:\n\n * type: `file` / `r_script` / `python_script` / `bash_script` / `javascript_script` / `scala_script` / `csharp_script`, specifies the type of the resource. The first resource cannot be of type `file`. When the type is not specified, the default type is simply `file`.\n * dest: filename, the resulting name of the resource.  From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.\n * path: `path/to/file`, the path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.\n * text: ...multiline text..., the content of the resulting file specified as a string. Mutually exclusive with `path`.\n * is_executable: `true` / `false`, whether the resulting resource file should be made executable.\n",
      "example" : [
        {
          "example" : "resources:\n  - type: r_script\n    path: script.R\n  - type: file\n    path: resource1.txt\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "keywords",
      "type" : "List[String]",
      "niceType" : "List of String",
      "description" : "The keywords of the components.",
      "example" : [
        {
          "example" : "keywords: [ bioinformatics, genomics ]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0",
      "default" : "Empty"
    },
    {
      "name" : "namespace",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Namespace this component is a part of. See the @[Namespaces guide](namespace) for more information on namespaces.",
      "example" : [
        {
          "example" : "namespace: fancy_components",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "arguments",
      "type" : "List[Argument]",
      "niceType" : "List of Argument",
      "description" : "A list of @[arguments](argument) for this component. For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. See these reference pages per type for more information:  \n\n - @[string](arg_string)\n - @[file](arg_file)\n - @[integer](arg_integer)\n - @[double](arg_double)\n - @[boolean](arg_boolean)\n - @[boolean_true](arg_boolean_true)\n - @[boolean_false](arg_boolean_false)\n",
      "example" : [
        {
          "example" : "arguments:\n  - name: --foo\n    type: file\n    alternatives: [-f]\n    description: Description of foo\n    default: \"/foo/bar\"\n    must_exist: true\n    direction: output\n    required: false\n    multiple: true\n    multiple_sep: \";\"\n  - name: --bar\n    type: string\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Author",
      "niceType" : "Author",
      "hierarchy" : [
        "io.viash.config.Author"
      ],
      "description" : "Author metadata.",
      "example" : [
        {
          "example" : "name: Jane Doe\nrole: [author, maintainer]\nemail: jane@doe.com\ninfo:\n  github: janedoe\n  twitter: janedoe\n  orcid: XXAABBCCXX\n  groups: [ one, two, three ]\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.3.2"
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "Full name of the author, usually in the name of FirstName MiddleName LastName."
    },
    {
      "name" : "email",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "E-mail of the author.",
      "default" : "Empty"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "since" : "Viash 0.7.4",
      "default" : "Empty"
    },
    {
      "name" : "roles",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Role of the author. Suggested items:\n\n* `\"author\"`: Authors who have made substantial contributions to the component.\n* `\"maintainer\"`: The maintainer of the component.\n* `\"contributor\"`: Authors who have made smaller contributions (such as code patches etc.).\n",
      "default" : "Empty"
    },
    {
      "name" : "props",
      "type" : "Map[String,String]",
      "niceType" : "Map of String to String",
      "description" : "Author properties. Must be a map of strings.",
      "removed" : {
        "message" : "Use `info` instead.",
        "deprecation" : "0.7.4",
        "removal" : "0.8.0"
      },
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "ComputationalRequirements",
      "niceType" : "ComputationalRequirements",
      "hierarchy" : [
        "io.viash.config.ComputationalRequirements"
      ],
      "description" : "Computational requirements related to running the component.",
      "since" : "Viash 0.6.0"
    },
    {
      "name" : "cpus",
      "type" : "Option[Int]",
      "niceType" : "Option of Int",
      "description" : "The maximum number of (logical) cpus a component is allowed to use.",
      "example" : [
        {
          "example" : "cpus: 10",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "commands",
      "type" : "List[String]",
      "niceType" : "List of String",
      "description" : "A list of commands which should be present on the system for the script to function.",
      "example" : [
        {
          "example" : "commands: [ which, bash, awk, date, grep, egrep, ps, sed, tail, tee ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "memory",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The maximum amount of memory a component is allowed to allocate. Unit must be one of B, KB, MB, GB, TB or PB for SI units (1000-base), or KiB, MiB, GiB, TiB or PiB for binary IEC units (1024-base).",
      "example" : [
        {
          "example" : "memory: 10GB",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "ArgumentGroup",
      "niceType" : "ArgumentGroup",
      "hierarchy" : [
        "io.viash.config.ArgumentGroup"
      ],
      "description" : "A grouping of the @[arguments](argument), used to display the help message."
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the argument group."
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Description of foo`, a description of the argument group. Multiline descriptions are supported.",
      "default" : "Empty"
    },
    {
      "name" : "arguments",
      "type" : "List[Argument]",
      "niceType" : "List of Argument",
      "description" : "List of arguments."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Links",
      "niceType" : "Links",
      "hierarchy" : [
        "io.viash.config.Links"
      ],
      "description" : "Links to external resources related to the component.",
      "example" : [
        {
          "example" : "repository: \"https://github.com/viash-io/viash\"\ndocker_registry: \"https://ghcr.io\"\nhomepage: \"https://viash.io\"\ndocumentation: \"https://viash.io/reference/\"\nissue_tracker: \"https://github.com/viash-io/viash/issues\"\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0"
    },
    {
      "name" : "repository",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Source repository url.",
      "example" : [
        {
          "example" : "repository: \"https://github.com/viash-io/viash\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "documentation",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Documentation website url.",
      "example" : [
        {
          "example" : "documentation: \"https://viash.io/reference/\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "docker_registry",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Docker registry url.",
      "example" : [
        {
          "example" : "docker_registry: \"https://ghcr.io\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "homepage",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Homepage website url.",
      "example" : [
        {
          "example" : "homepage: \"https://viash.io\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "issue_tracker",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Issue tracker url.",
      "example" : [
        {
          "example" : "issue_tracker: \"https://github.com/viash-io/viash/issues\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "References",
      "niceType" : "References",
      "hierarchy" : [
        "io.viash.config.References"
      ],
      "description" : "References to external resources related to the component.",
      "example" : [
        {
          "example" : "doi: 10.1000/xx.123456.789\nbibtex: |\n  @article{foo,\n    title={Foo},\n    author={Bar},\n    journal={Baz},\n    year={2024}\n  }\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.9.0"
    },
    {
      "name" : "bibtex",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "One or multiple BibTeX reference(s) of the component.",
      "example" : [
        {
          "example" : "bibtex: |\n  @article{foo,\n    title={Foo},\n    author={Bar},\n    journal={Baz},\n    year={2024}\n  }\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "doi",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "One or multiple DOI reference(s) of the component.",
      "example" : [
        {
          "example" : "doi: 10.1000/xx.123456.789",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Runner",
      "niceType" : "Runner",
      "hierarchy" : [
        "io.viash.runners.Runner"
      ],
      "description" : "A list of runners to generate target artifacts for.\n\n * @[Executable](executable_runner)\n * @[Nextflow](nextflow_runner)\n",
      "example" : [
        {
          "example" : "runners:\n  - type: executable\n  - type: nextflow\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "ExecutableRunner",
        "NextflowRunner"
      ]
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "ExecutableRunner",
      "niceType" : "ExecutableRunner",
      "hierarchy" : [
        "io.viash.runners.ExecutableRunner",
        "io.viash.runners.Runner"
      ],
      "description" : "Run code as an executable.\n\nThis runner is the default runner. It will generate a bash script that can be run directly.\n\nThis runner is also used for the @[native](native_engine) engine.\n\nThis runner is also used for the @[docker](docker_engine) engine.\n",
      "example" : [
        {
          "example" : "runners:\n  - type: executable\n    port: 8080\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "executable"
      ]
    },
    {
      "name" : "docker_setup_strategy",
      "type" : "DockerSetupStrategy",
      "niceType" : "DockerSetupStrategy",
      "description" : "The Docker setup strategy to use when building a docker engine enrivonment.\n\n| Strategy | Description |\n|-----|----------|\n| `alwaysbuild` / `build` / `b` | Always build the image from the dockerfile. This is the default setup strategy.\n| `alwayscachedbuild` / `cachedbuild` / `cb` | Always build the image from the dockerfile, with caching enabled.\n| `ifneedbebuild` |  Build the image if it does not exist locally.\n| `ifneedbecachedbuild` | Build the image with caching enabled if it does not exist locally, with caching enabled.\n| `alwayspull` / `pull` / `p` |  Try to pull the container from [Docker Hub](https://hub.docker.com) or the @[specified docker registry](docker_registry).\n| `alwayspullelsebuild` / `pullelsebuild` |  Try to pull the image from a registry and build it if it doesn't exist.\n| `alwayspullelsecachedbuild` / `pullelsecachedbuild` |  Try to pull the image from a registry and build it with caching if it doesn't exist.\n| `ifneedbepull` |  If the image does not exist locally, pull the image.\n| `ifneedbepullelsebuild` |  If the image does not exist locally, pull the image. If the image does exist, build it.\n| `ifneedbepullelsecachedbuild` | If the image does not exist locally, pull the image. If the image does exist, build it with caching enabled.\n| `push` | Push the container to [Docker Hub](https://hub.docker.com)  or the @[specified docker registry](docker_registry).\n| `pushifnotpresent` | Push the container to [Docker Hub](https://hub.docker.com) or the @[specified docker registry](docker_registry) if the @[tag](docker_tag) does not exist yet.\n| `donothing` / `meh` | Do not build or pull anything.\n\n",
      "example" : [
        {
          "example" : "setup_strategy: alwaysbuild",
          "format" : "yaml"
        }
      ],
      "default" : "ifneedbepullelsecachedbuild"
    },
    {
      "name" : "workdir",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The working directory when starting the engine. This doesn't change the Dockerfile but gets added as a command-line argument at runtime.",
      "example" : [
        {
          "example" : "workdir: /home/user",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "docker_run_args",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Provide runtime arguments to Docker. See the documentation on [`docker run`](https://docs.docker.com/engine/reference/run/) for more information.",
      "default" : "Empty"
    },
    {
      "name" : "id",
      "type" : "String",
      "niceType" : "String",
      "description" : "Name of the runner. As with all runners, you can give an runner a different name. By specifying `id: foo`, you can target this executor (only) by specifying `...` in any of the Viash commands.",
      "example" : [
        {
          "example" : "id: foo",
          "format" : "yaml"
        },
        {
          "example" : "id: foo",
          "format" : "yaml"
        }
      ],
      "default" : "executable"
    },
    {
      "name" : "port",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "A list of enabled ports. This doesn't change the Dockerfile but gets added as a command-line argument at runtime.",
      "example" : [
        {
          "example" : "port:\n  - 80\n  - 8080\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the runner."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "NextflowRunner",
      "niceType" : "NextflowRunner",
      "hierarchy" : [
        "io.viash.runners.NextflowRunner",
        "io.viash.runners.Runner"
      ],
      "description" : "Run a Viash component on a Nextflow backend engine.\n",
      "example" : [
        {
          "example" : "runners:\n  - type: nextflow\n    directives:\n      label: [lowcpu, midmem]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "nextflow"
      ]
    },
    {
      "name" : "auto",
      "type" : "NextflowAuto",
      "niceType" : "NextflowAuto",
      "description" : "@[Automated processing flags](nextflow_auto) which can be toggled on or off:\n\n| Flag | Description | Default |\n|---|---------|----|\n| `simplifyInput` | If `true`, an input tuple only containing only a single File (e.g. `[\"foo\", file(\"in.h5ad\")]`) is automatically transformed to a map (i.e. `[\"foo\", [ input: file(\"in.h5ad\") ] ]`). | `true` |\n| `simplifyOutput` | If `true`, an output tuple containing a map with a File (e.g. `[\"foo\", [ output: file(\"out.h5ad\") ] ]`) is automatically transformed to a map (i.e. `[\"foo\", file(\"out.h5ad\")]`). | `false` |\n| `transcript` | If `true`, the module's transcripts from `work/` are automatically published to `params.transcriptDir`. If not defined, `params.publishDir + \"/_transcripts\"` will be used. Will throw an error if neither are defined. | `false` |\n| `publish` | If `true`, the module's outputs are automatically published to `params.publishDir`. If equal to `\"state\"`, also a `.state.yaml` file will be published in the publish dir. Will throw an error if `params.publishDir` is not defined. | `false` |\n\n",
      "example" : [
        {
          "example" : "auto:\n  publish: true",
          "format" : "yaml"
        }
      ],
      "default" : "simplifyInput: true\nsimplifyOutput: false\ntranscript: false\npublish: false\n"
    },
    {
      "name" : "directives",
      "type" : "NextflowDirectives",
      "niceType" : "NextflowDirectives",
      "description" : "@[Directives](nextflow_directives) are optional settings that affect the execution of the process. These mostly match up with the Nextflow counterparts.  \n",
      "example" : [
        {
          "example" : "directives:\n  container: rocker/r-ver:4.1\n  label: highcpu\n  cpus: 4\n  memory: 16 GB",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "container",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the Docker engine id to be used to run Nextflow.",
      "default" : "docker"
    },
    {
      "name" : "config",
      "type" : "NextflowConfig",
      "niceType" : "NextflowConfig",
      "description" : "Allows tweaking how the @[Nextflow Config](nextflow_config) file is generated.",
      "since" : "Viash 0.7.4",
      "default" : "A series of default labels to specify memory and cpu constraints"
    },
    {
      "name" : "debug",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Whether or not to print debug messages.",
      "default" : "False"
    },
    {
      "name" : "id",
      "type" : "String",
      "niceType" : "String",
      "description" : "Name of the runner. As with all runners, you can give an runner a different name. By specifying `id: foo`, you can target this runner (only) by specifying `...` in any of the Viash commands.",
      "example" : [
        {
          "example" : "id: foo",
          "format" : "yaml"
        },
        {
          "example" : "id: foo",
          "format" : "yaml"
        }
      ],
      "default" : "nextflow"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the runner."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Engine",
      "niceType" : "Engine",
      "hierarchy" : [
        "io.viash.engines.Engine"
      ],
      "description" : "A list of engines to generate target artifacts for.\n\n * @[Docker](docker_engine)\n * @[Native](native_engine)\n",
      "example" : [
        {
          "example" : "engines:\n  - type: docker\n    image: \"bash:4.0\"\n  - type: native\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "DockerEngine",
        "NativeEngine"
      ]
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "NativeEngine",
      "niceType" : "NativeEngine",
      "hierarchy" : [
        "io.viash.engines.NativeEngine",
        "io.viash.engines.Engine"
      ],
      "description" : "Running a Viash component on a native engine means that the script will be executed in your current environment.\nAny dependencies are assumed to have been installed by the user, so the native engine is meant for developers (who know what they're doing) or for simple bash scripts (which have no extra dependencies).\n",
      "example" : [
        {
          "example" : "engines:\n  - type: native\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "native"
      ]
    },
    {
      "name" : "id",
      "type" : "String",
      "niceType" : "String",
      "description" : "Name of the engine. As with all engines, you can give an engine a different name. By specifying `id: foo`, you can target this engine (only) by specifying `...` in any of the Viash commands.",
      "example" : [
        {
          "example" : "id: foo",
          "format" : "yaml"
        },
        {
          "example" : "id: foo",
          "format" : "yaml"
        }
      ],
      "default" : "native"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the engine."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "DockerEngine",
      "niceType" : "DockerEngine",
      "hierarchy" : [
        "io.viash.engines.DockerEngine",
        "io.viash.engines.Engine"
      ],
      "description" : "Run a Viash component on a Docker backend engine.\nBy specifying which dependencies your component needs, users will be able to build a docker container from scratch using the setup flag, or pull it from a docker repository.\n",
      "example" : [
        {
          "example" : "engines:\n  - type: docker\n    image: \"bash:4.0\"\n    setup:\n      - type: apt\n        packages: [ curl ]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "docker"
      ]
    },
    {
      "name" : "organization",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Name of a start container's [organization](https://docs.docker.com/docker-hub/orgs/).",
      "deprecated" : {
        "message" : "Use the full container name in `image` instead.",
        "deprecation" : "0.9.0",
        "removal" : "0.10.0"
      },
      "default" : "Empty"
    },
    {
      "name" : "registry",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The URL to the a [custom Docker registry](https://docs.docker.com/registry/) where the start container is located.",
      "example" : [
        {
          "example" : "registry: https://my-docker-registry.org",
          "format" : "yaml"
        }
      ],
      "deprecated" : {
        "message" : "Use the full container name in `image` instead.",
        "deprecation" : "0.9.0",
        "removal" : "0.10.0"
      },
      "default" : "Empty"
    },
    {
      "name" : "image",
      "type" : "String",
      "niceType" : "String",
      "description" : "The base container to start from. You can also add the tag here if you wish.",
      "example" : [
        {
          "example" : "image: \"bash:4.0\"",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Specify a Docker image based on its tag.",
      "example" : [
        {
          "example" : "tag: 4.0",
          "format" : "yaml"
        }
      ],
      "deprecated" : {
        "message" : "Use the full container name in `image` instead.",
        "deprecation" : "0.9.0",
        "removal" : "0.10.0"
      },
      "default" : "Empty"
    },
    {
      "name" : "target_image",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "If anything is specified in the setup section, running the `---setup` will result in an image with the name of `<target_image>:<version>`. If nothing is specified in the `setup` section, simply `image` will be used. Advanced usage only.",
      "example" : [
        {
          "example" : "target_image: myfoo",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "target_tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The tag the resulting image gets. Advanced usage only.",
      "example" : [
        {
          "example" : "target_tag: 0.5.0",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "namespace_separator",
      "type" : "String",
      "niceType" : "String",
      "description" : "The separator between the namespace and the name of the component, used for determining the image name. Default: `\"/\"`.",
      "example" : [
        {
          "example" : "namespace_separator: \"_\"",
          "format" : "yaml"
        }
      ],
      "default" : "/"
    },
    {
      "name" : "target_package",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The package name set in the resulting image. Advanced usage only.",
      "example" : [
        {
          "example" : "target_package: tools",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "id",
      "type" : "String",
      "niceType" : "String",
      "description" : "Name of the engine. As with all engines, you can give a engine a different name. By specifying `id: foo`, you can target this engine (only) by specifying `...` in any of the Viash commands.",
      "example" : [
        {
          "example" : "id: foo",
          "format" : "yaml"
        },
        {
          "example" : "id: foo",
          "format" : "yaml"
        }
      ],
      "default" : "docker"
    },
    {
      "name" : "target_registry",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The URL where the resulting image will be pushed to. Advanced usage only.",
      "example" : [
        {
          "example" : "target_registry: https://my-docker-registry.org",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the engine."
    },
    {
      "name" : "target_organization",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The organization set in the resulting image. Advanced usage only.",
      "example" : [
        {
          "example" : "target_organization: viash-io",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "setup",
      "type" : "List[Requirements]",
      "niceType" : "List of Requirements",
      "description" : "A list of requirements for installing the following types of packages:\n\n - @[apt](apt_req)\n - @[apk](apk_req)\n - @[Docker setup instructions](docker_req)\n - @[JavaScript](javascript_req)\n - @[Python](python_req)\n - @[R](r_req)\n - @[Ruby](ruby_req)\n - @[yum](yum_req)\n\nThe order in which these dependencies are specified determines the order in which they will be installed.\n",
      "default" : "Empty"
    },
    {
      "name" : "cmd",
      "type" : "Option[Either[String,List[String]]]",
      "niceType" : "Option of Either String or List of String",
      "description" : "Set the default command being executed when running the Docker container.",
      "example" : [
        {
          "example" : "cmd: [\"echo\", \"$HOME\"]",
          "format" : "yaml",
          "description" : "Set CMD using the exec format, which is the prefered form."
        },
        {
          "example" : "cmd: \"echo $HOME\"",
          "format" : "yaml",
          "description" : "Set CMD using the shell format."
        }
      ],
      "since" : "Viash 0.7.4",
      "default" : "Empty"
    },
    {
      "name" : "target_image_source",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The source of the target image. This is used for defining labels in the dockerfile.",
      "example" : [
        {
          "example" : "target_image_source: https://github.com/foo/bar",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "test_setup",
      "type" : "List[Requirements]",
      "niceType" : "List of Requirements",
      "description" : "Additional requirements specific for running unit tests.",
      "since" : "Viash 0.5.13",
      "default" : "Empty"
    },
    {
      "name" : "entrypoint",
      "type" : "Option[Either[String,List[String]]]",
      "niceType" : "Option of Either String or List of String",
      "description" : "Override the entrypoint of the base container. Default set `ENTRYPOINT []`.",
      "example" : [
        {
          "example" : "entrypoint: ",
          "format" : "yaml",
          "description" : "Disable the default override."
        },
        {
          "example" : "entrypoint: [\"top\", \"-b\"]",
          "format" : "yaml",
          "description" : "Entrypoint of the container in the exec format, which is the prefered form."
        },
        {
          "example" : "entrypoint: \"top -b\"",
          "format" : "yaml",
          "description" : "Entrypoint of the container in the shell format."
        }
      ],
      "since" : "Viash 0.7.4",
      "default" : "[]"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Platform",
      "niceType" : "Platform",
      "hierarchy" : [
        "io.viash.platforms.Platform"
      ],
      "description" : "A list of platforms to generate target artifacts for.\n\n * @[Native](platform_native)\n * @[Docker](platform_docker)\n * @[Nextflow](platform_nextflow)\n",
      "example" : [
        {
          "example" : "platforms:\n  - type: docker\n    image: \"bash:4.0\"\n  - type: native\n  - type: nextflow\n    directives:\n      label: [lowcpu, midmem]\n",
          "format" : "yaml"
        }
      ],
      "deprecated" : {
        "message" : "Use 'engines' and 'runners' instead.",
        "deprecation" : "0.9.0",
        "removal" : "0.10.0"
      },
      "subclass" : [
        "NativePlatform",
        "DockerPlatform",
        "NextflowPlatform"
      ]
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "NativePlatform",
      "niceType" : "NativePlatform",
      "hierarchy" : [
        "io.viash.platforms.NativePlatform",
        "io.viash.platforms.Platform"
      ],
      "description" : "Running a Viash component on a native platform means that the script will be executed in your current environment.\nAny dependencies are assumed to have been installed by the user, so the native platform is meant for developers (who know what they're doing) or for simple bash scripts (which have no extra dependencies).\n",
      "example" : [
        {
          "example" : "platforms:\n  - type: native\n",
          "format" : "yaml"
        }
      ],
      "deprecated" : {
        "message" : "Use 'engines' and 'runners' instead.",
        "deprecation" : "0.9.0",
        "removal" : "0.10.0"
      },
      "subclass" : [
        "native"
      ]
    },
    {
      "name" : "id",
      "type" : "String",
      "niceType" : "String",
      "description" : "As with all platforms, you can give a platform a different name. By specifying `id: foo`, you can target this platform (only) by specifying `-p foo` in any of the Viash commands.",
      "example" : [
        {
          "example" : "id: foo",
          "format" : "yaml"
        }
      ],
      "default" : "native"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the platform."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "DockerPlatform",
      "niceType" : "DockerPlatform",
      "hierarchy" : [
        "io.viash.platforms.DockerPlatform",
        "io.viash.platforms.Platform"
      ],
      "description" : "Run a Viash component on a Docker backend platform.\nBy specifying which dependencies your component needs, users will be able to build a docker container from scratch using the setup flag, or pull it from a docker repository.\n",
      "example" : [
        {
          "example" : "platforms:\n  - type: docker\n    image: \"bash:4.0\"\n    setup:\n      - type: apt\n        packages: [ curl ]\n",
          "format" : "yaml"
        }
      ],
      "deprecated" : {
        "message" : "Use 'engines' and 'runners' instead.",
        "deprecation" : "0.9.0",
        "removal" : "0.10.0"
      },
      "subclass" : [
        "docker"
      ]
    },
    {
      "name" : "organization",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Name of a container's [organization](https://docs.docker.com/docker-hub/orgs/).",
      "default" : "Empty"
    },
    {
      "name" : "registry",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The URL to the a [custom Docker registry](https://docs.docker.com/registry/)",
      "example" : [
        {
          "example" : "registry: https://my-docker-registry.org",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "image",
      "type" : "String",
      "niceType" : "String",
      "description" : "The base container to start from. You can also add the tag here if you wish.",
      "example" : [
        {
          "example" : "image: \"bash:4.0\"",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Specify a Docker image based on its tag.",
      "example" : [
        {
          "example" : "tag: 4.0",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "target_tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The tag the resulting image gets. Advanced usage only.",
      "example" : [
        {
          "example" : "target_tag: 0.5.0",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "run_args",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Add [docker run](https://docs.docker.com/engine/reference/run/) arguments.",
      "default" : "Empty"
    },
    {
      "name" : "namespace_separator",
      "type" : "String",
      "niceType" : "String",
      "description" : "The separator between the namespace and the name of the component, used for determining the image name. Default: `\"/\"`.",
      "example" : [
        {
          "example" : "namespace_separator: \"_\"",
          "format" : "yaml"
        }
      ],
      "default" : "/"
    },
    {
      "name" : "resolve_volume",
      "type" : "DockerResolveVolume",
      "niceType" : "DockerResolveVolume",
      "description" : "Enables or disables automatic volume mapping. Enabled when set to `Automatic` or disabled when set to `Manual`. Default: `Automatic`.",
      "default" : "Automatic"
    },
    {
      "name" : "cmd",
      "type" : "Option[Either[String,List[String]]]",
      "niceType" : "Option of Either String or List of String",
      "description" : "Set the default command being executed when running the Docker container.",
      "example" : [
        {
          "example" : "cmd: [\"echo\", \"$HOME\"]",
          "format" : "yaml",
          "description" : "Set CMD using the exec format, which is the prefered form."
        },
        {
          "example" : "cmd: \"echo $HOME\"",
          "format" : "yaml",
          "description" : "Set CMD using the shell format."
        }
      ],
      "since" : "Viash 0.7.4",
      "default" : "Empty"
    },
    {
      "name" : "id",
      "type" : "String",
      "niceType" : "String",
      "description" : "As with all platforms, you can give a platform a different name. By specifying `id: foo`, you can target this platform (only) by specifying `-p foo` in any of the Viash commands.",
      "example" : [
        {
          "example" : "id: foo",
          "format" : "yaml"
        }
      ],
      "default" : "docker"
    },
    {
      "name" : "port",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "A list of enabled ports. This doesn't change the Dockerfile but gets added as a command-line argument at runtime.",
      "example" : [
        {
          "example" : "port:\n  - 80\n  - 8080\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "target_registry",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The URL where the resulting image will be pushed to. Advanced usage only.",
      "example" : [
        {
          "example" : "target_registry: https://my-docker-registry.org",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "setup",
      "type" : "List[Requirements]",
      "niceType" : "List of Requirements",
      "description" : "A list of requirements for installing the following types of packages:\n\n - @[apt](apt_req)\n - @[apk](apk_req)\n - @[Docker setup instructions](docker_req)\n - @[JavaScript](javascript_req)\n - @[Python](python_req)\n - @[R](r_req)\n - @[Ruby](ruby_req)\n - @[yum](yum_req)\n\nThe order in which these dependencies are specified determines the order in which they will be installed.\n",
      "default" : "Empty"
    },
    {
      "name" : "workdir",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The working directory when starting the container. This doesn't change the Dockerfile but gets added as a command-line argument at runtime.",
      "example" : [
        {
          "example" : "workdir: /home/user",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "target_image",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "If anything is specified in the setup section, running the `---setup` will result in an image with the name of `<target_image>:<version>`. If nothing is specified in the `setup` section, simply `image` will be used. Advanced usage only.",
      "example" : [
        {
          "example" : "target_image: myfoo",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "target_image_source",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The source of the target image. This is used for defining labels in the dockerfile.",
      "example" : [
        {
          "example" : "target_image_source: https://github.com/foo/bar",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "test_setup",
      "type" : "List[Requirements]",
      "niceType" : "List of Requirements",
      "description" : "Additional requirements specific for running unit tests.",
      "since" : "Viash 0.5.13",
      "default" : "Empty"
    },
    {
      "name" : "entrypoint",
      "type" : "Option[Either[String,List[String]]]",
      "niceType" : "Option of Either String or List of String",
      "description" : "Override the entrypoint of the base container. Default set `ENTRYPOINT []`.",
      "example" : [
        {
          "example" : "entrypoint: ",
          "format" : "yaml",
          "description" : "Disable the default override."
        },
        {
          "example" : "entrypoint: [\"top\", \"-b\"]",
          "format" : "yaml",
          "description" : "Entrypoint of the container in the exec format, which is the prefered form."
        },
        {
          "example" : "entrypoint: \"top -b\"",
          "format" : "yaml",
          "description" : "Entrypoint of the container in the shell format."
        }
      ],
      "since" : "Viash 0.7.4",
      "default" : "[]"
    },
    {
      "name" : "setup_strategy",
      "type" : "DockerSetupStrategy",
      "niceType" : "DockerSetupStrategy",
      "description" : "The Docker setup strategy to use when building a container.\n\n| Strategy | Description |\n|-----|----------|\n| `alwaysbuild` / `build` / `b` | Always build the image from the dockerfile. This is the default setup strategy.\n| `alwayscachedbuild` / `cachedbuild` / `cb` | Always build the image from the dockerfile, with caching enabled.\n| `ifneedbebuild` |  Build the image if it does not exist locally.\n| `ifneedbecachedbuild` | Build the image with caching enabled if it does not exist locally, with caching enabled.\n| `alwayspull` / `pull` / `p` |  Try to pull the container from [Docker Hub](https://hub.docker.com) or the @[specified docker registry](docker_registry).\n| `alwayspullelsebuild` / `pullelsebuild` |  Try to pull the image from a registry and build it if it does not exist.\n| `alwayspullelsecachedbuild` / `pullelsecachedbuild` |  Try to pull the image from a registry and build it with caching if it does not exist.\n| `ifneedbepull` |  If the image does not exist locally, pull the image.\n| `ifneedbepullelsebuild` |  Do nothing if the image exists locally. Else, try to pull the image from a registry. Otherwise build the image from scratch.\n| `ifneedbepullelsecachedbuild` | Do nothing if the image exists locally. Else, try to pull the image from a registry. Otherwise build the image with caching enabled.\n| `push` | Push the container to [Docker Hub](https://hub.docker.com)  or the @[specified docker registry](docker_registry).\n| `pushifnotpresent` | Push the container to [Docker Hub](https://hub.docker.com) or the @[specified docker registry](docker_registry) if the @[tag](docker_tag) does not exist yet.\n| `donothing` / `meh` | Do not build or pull anything.\n\n",
      "example" : [
        {
          "example" : "setup_strategy: alwaysbuild",
          "format" : "yaml"
        }
      ],
      "default" : "ifneedbepullelsecachedbuild"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the platform."
    },
    {
      "name" : "target_organization",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The organization set in the resulting image. Advanced usage only.",
      "example" : [
        {
          "example" : "target_organization: viash-io",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "chown",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "In Linux, files created by a Docker container will be owned by `root`. With `chown: true`, Viash will automatically change the ownership of output files (arguments with `type: file` and `direction: output`) to the user running the Viash command after execution of the component. Default value: `true`.",
      "example" : [
        {
          "example" : "chown: false",
          "format" : "yaml"
        }
      ],
      "removed" : {
        "message" : "Compability not provided with the Runners functionality.",
        "deprecation" : "0.8.0",
        "removal" : "0.8.0"
      },
      "default" : "True"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "NextflowPlatform",
      "niceType" : "NextflowPlatform",
      "hierarchy" : [
        "io.viash.platforms.NextflowPlatform",
        "io.viash.platforms.Platform"
      ],
      "description" : "Platform for generating Nextflow VDSL3 modules.",
      "example" : [
        {
          "example" : "platforms:\n  - type: nextflow\n    directives:\n      label: [lowcpu, midmem]\n",
          "format" : "yaml"
        }
      ],
      "deprecated" : {
        "message" : "Use 'engines' and 'runners' instead.",
        "deprecation" : "0.9.0",
        "removal" : "0.10.0"
      },
      "subclass" : [
        "nextflow"
      ]
    },
    {
      "name" : "auto",
      "type" : "NextflowAuto",
      "niceType" : "NextflowAuto",
      "description" : "@[Automated processing flags](nextflow_auto) which can be toggled on or off:\n\n| Flag | Description | Default |\n|---|---------|----|\n| `simplifyInput` | If `true`, an input tuple only containing only a single File (e.g. `[\"foo\", file(\"in.h5ad\")]`) is automatically transformed to a map (i.e. `[\"foo\", [ input: file(\"in.h5ad\") ] ]`). | `true` |\n| `simplifyOutput` | If `true`, an output tuple containing a map with a File (e.g. `[\"foo\", [ output: file(\"out.h5ad\") ] ]`) is automatically transformed to a map (i.e. `[\"foo\", file(\"out.h5ad\")]`). | `false` |\n| `transcript` | If `true`, the module's transcripts from `work/` are automatically published to `params.transcriptDir`. If not defined, `params.publishDir + \"/_transcripts\"` will be used. Will throw an error if neither are defined. | `false` |\n| `publish` | If `true`, the module's outputs are automatically published to `params.publishDir`. If equal to `\"state\"`, also a `.state.yaml` file will be published in the publish dir. Will throw an error if `params.publishDir` is not defined. | `false` |\n\n",
      "example" : [
        {
          "example" : "auto:\n  publish: true",
          "format" : "yaml"
        }
      ],
      "default" : "simplifyInput: true\nsimplifyOutput: false\ntranscript: false\npublish: false\n"
    },
    {
      "name" : "directives",
      "type" : "NextflowDirectives",
      "niceType" : "NextflowDirectives",
      "description" : "@[Directives](nextflow_directives) are optional settings that affect the execution of the process. These mostly match up with the Nextflow counterparts.  \n",
      "example" : [
        {
          "example" : "directives:\n  container: rocker/r-ver:4.1\n  label: highcpu\n  cpus: 4\n  memory: 16 GB",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "container",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the Docker platform id to be used to run Nextflow.",
      "default" : "docker"
    },
    {
      "name" : "config",
      "type" : "NextflowConfig",
      "niceType" : "NextflowConfig",
      "description" : "Allows tweaking how the @[Nextflow Config](nextflow_config) file is generated.",
      "since" : "Viash 0.7.4",
      "default" : "A series of default labels to specify memory and cpu constraints"
    },
    {
      "name" : "debug",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Whether or not to print debug messages.",
      "default" : "False"
    },
    {
      "name" : "id",
      "type" : "String",
      "niceType" : "String",
      "description" : "Every platform can be given a specific id that can later be referred to explicitly when running or building the Viash component.",
      "example" : [
        {
          "example" : "id: foo",
          "format" : "yaml"
        }
      ],
      "default" : "nextflow"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the platform."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Requirements",
      "niceType" : "Requirements",
      "hierarchy" : [
        "io.viash.engines.requirements.Requirements"
      ],
      "description" : "Requirements for installing the following types of packages:\n\n - @[apt](apt_req)\n - @[apk](apk_req)\n - @[Docker setup instructions](docker_req)\n - @[JavaScript](javascript_req)\n - @[Python](python_req)\n - @[R](r_req)\n - @[Ruby](ruby_req)\n - @[yum](yum_req)\n",
      "subclass" : [
        "ApkRequirements",
        "AptRequirements",
        "DockerRequirements",
        "JavaScriptRequirements",
        "PythonRequirements",
        "RRequirements",
        "RubyRequirements",
        "YumRequirements"
      ]
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "ApkRequirements",
      "niceType" : "ApkRequirements",
      "hierarchy" : [
        "io.viash.engines.requirements.ApkRequirements",
        "io.viash.engines.requirements.Requirements"
      ],
      "description" : "Specify which apk packages should be available in order to run the component.",
      "example" : [
        {
          "example" : "setup:\n  - type: apk\n    packages: [ sl ]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "apk"
      ]
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the requirement specification."
    },
    {
      "name" : "packages",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install.",
      "example" : [
        {
          "example" : "packages: [ sl ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "AptRequirements",
      "niceType" : "AptRequirements",
      "hierarchy" : [
        "io.viash.engines.requirements.AptRequirements",
        "io.viash.engines.requirements.Requirements"
      ],
      "description" : "Specify which apt packages should be available in order to run the component.",
      "example" : [
        {
          "example" : "setup:\n  - type: apt\n    packages: [ sl ]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "apt"
      ]
    },
    {
      "name" : "interactive",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "If `false`, the Debian frontend is set to non-interactive (recommended). Default: false.",
      "default" : "False"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the requirement specification."
    },
    {
      "name" : "packages",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install.",
      "example" : [
        {
          "example" : "packages: [ sl ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "DockerRequirements",
      "niceType" : "DockerRequirements",
      "hierarchy" : [
        "io.viash.engines.requirements.DockerRequirements",
        "io.viash.engines.requirements.Requirements"
      ],
      "description" : "Specify which Docker commands should be run during setup.",
      "example" : [
        {
          "example" : "setup:\n  - type: docker\n    build_args: \"R_VERSION=hello_world\"\n    run: |\n      echo 'Run a custom command'\n      echo 'Foo' > /path/to/file.txt",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "docker"
      ]
    },
    {
      "name" : "run",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which `RUN` entries to add to the Dockerfile while building it.",
      "example" : [
        {
          "example" : "run: |\n  echo 'Run a custom command'\n  echo 'Foo' > /path/to/file.txt",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "label",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which `LABEL` entries to add to the Dockerfile while building it.",
      "example" : [
        {
          "example" : "label: [ component=\"foo\" ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "build_args",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which `ARG` entries to add to the Dockerfile while building it.",
      "example" : [
        {
          "example" : "build_args: [ \"R_VERSION=4.2\" ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "copy",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which `COPY` entries to add to the Dockerfile while building it.",
      "example" : [
        {
          "example" : "copy: [ \"resource.txt /path/to/resource.txt\" ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the requirement specification."
    },
    {
      "name" : "add",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which `ADD` entries to add to the Dockerfile while building it.",
      "example" : [
        {
          "example" : "add: [ \"http://foo/bar .\" ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "env",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which `ENV` entries to add to the Dockerfile while building it. Unlike `ARG`, `ENV` entries are also accessible from inside the container.",
      "example" : [
        {
          "example" : "env: [ \"R_VERSION=4.2\" ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "JavaScriptRequirements",
      "niceType" : "JavaScriptRequirements",
      "hierarchy" : [
        "io.viash.engines.requirements.JavaScriptRequirements",
        "io.viash.engines.requirements.Requirements"
      ],
      "description" : "Specify which JavaScript packages should be available in order to run the component.",
      "example" : [
        {
          "example" : "setup:\n  - type: javascript\n    npm: packagename\n    git: \"https://some.git.repository/org/repo\"\n    github: \"owner/repository\"\n    url: \"https://github.com/org/repo/archive/HEAD.zip\"\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "javascript"
      ]
    },
    {
      "name" : "github",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from GitHub.",
      "example" : [
        {
          "example" : "github: [ owner/repository ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "url",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install using a generic URI.",
      "example" : [
        {
          "example" : "url: [ https://github.com/org/repo/archive/HEAD.zip ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "git",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install using a Git URI.",
      "example" : [
        {
          "example" : "git: [ https://some.git.repository/org/repo ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "npm",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from npm.",
      "example" : [
        {
          "example" : "npm: [ packagename ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the requirement specification."
    },
    {
      "name" : "packages",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from npm.",
      "example" : [
        {
          "example" : "packages: [ packagename ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "PythonRequirements",
      "niceType" : "PythonRequirements",
      "hierarchy" : [
        "io.viash.engines.requirements.PythonRequirements",
        "io.viash.engines.requirements.Requirements"
      ],
      "description" : "Specify which Python packages should be available in order to run the component.",
      "example" : [
        {
          "example" : "setup:\n  - type: python\n    pip: numpy\n    github: [ jkbr/httpie, foo/bar ]\n    url: \"https://github.com/some_org/some_pkg/zipball/master\"\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "python"
      ]
    },
    {
      "name" : "github",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from GitHub.",
      "example" : [
        {
          "example" : "github: [ jkbr/httpie ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "gitlab",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from GitLab.",
      "example" : [
        {
          "example" : "gitlab: [ foo/bar ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "pip",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from pip.",
      "example" : [
        {
          "example" : "pip: [ numpy ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "pypi",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from PyPI using pip.",
      "example" : [
        {
          "example" : "pypi: [ numpy ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "git",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install using a Git URI.",
      "example" : [
        {
          "example" : "git: [ https://some.git.repository/org/repo ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "upgrade",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Sets the `--upgrade` flag when set to true. Default: true.",
      "default" : "True"
    },
    {
      "name" : "packages",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from pip.",
      "example" : [
        {
          "example" : "packages: [ numpy ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "url",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install using a generic URI.",
      "example" : [
        {
          "example" : "url: [ https://github.com/some_org/some_pkg/zipball/master ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "svn",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install using an SVN URI.",
      "example" : [
        {
          "example" : "svn: [ http://svn.repo/some_pkg/trunk/#egg=SomePackage ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "bazaar",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install using a Bazaar URI.",
      "example" : [
        {
          "example" : "bazaar: [ http://bazaar.launchpad.net/some_pkg/some_pkg/release-0.1 ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "script",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies a code block to run as part of the build.",
      "example" : [
        {
          "example" : "script: |\n  print(\"Running custom code\")\n  x = 1 + 1 == 2",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the requirement specification."
    },
    {
      "name" : "mercurial",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install using a Mercurial URI.",
      "example" : [
        {
          "example" : "mercurial: [ https://hg.myproject.org/MyProject/#egg=MyProject ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "user",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Sets the `--user` flag when set to true. Default: false.",
      "default" : "False"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "RRequirements",
      "niceType" : "RRequirements",
      "hierarchy" : [
        "io.viash.engines.requirements.RRequirements",
        "io.viash.engines.requirements.Requirements"
      ],
      "description" : "Specify which R packages should be available in order to run the component.",
      "example" : [
        {
          "example" : "setup: \n  - type: r\n    cran: anndata\n    bioc: [ AnnotationDbi, SingleCellExperiment ]\n    github: rcannood/SCORPIUS\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "r"
      ]
    },
    {
      "name" : "bioc",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from BioConductor.",
      "example" : [
        {
          "example" : "bioc: [ AnnotationDbi ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "github",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from GitHub.",
      "example" : [
        {
          "example" : "github: [ rcannood/SCORPIUS ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "gitlab",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from GitLab.",
      "example" : [
        {
          "example" : "gitlab: [ org/package ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "url",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install using a generic URI.",
      "example" : [
        {
          "example" : "url: [ https://github.com/hadley/stringr/archive/HEAD.zip ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "bioc_force_install",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Forces packages specified in `bioc` to be reinstalled, even if they are already present in the container. Default: false.",
      "example" : [
        {
          "example" : "bioc_force_install: false",
          "format" : "yaml"
        }
      ],
      "default" : "False"
    },
    {
      "name" : "git",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install using a Git URI.",
      "example" : [
        {
          "example" : "git: [ https://some.git.repository/org/repo ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "cran",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from CRAN.",
      "example" : [
        {
          "example" : "cran: [ anndata, ggplot2 ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "bitbucket",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from Bitbucket.",
      "example" : [
        {
          "example" : "bitbucket: [ org/package ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "svn",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install using an SVN URI.",
      "example" : [
        {
          "example" : "svn: [ https://path.to.svn/group/repo ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "packages",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install from CRAN.",
      "example" : [
        {
          "example" : "packages: [ anndata, ggplot2 ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "script",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies a code block to run as part of the build.",
      "example" : [
        {
          "example" : "script: |\n  cat(\"Running custom code\n\")\n  install.packages(\"anndata\")",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the requirement specification."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "RubyRequirements",
      "niceType" : "RubyRequirements",
      "hierarchy" : [
        "io.viash.engines.requirements.RubyRequirements",
        "io.viash.engines.requirements.Requirements"
      ],
      "description" : "Specify which Ruby packages should be available in order to run the component.",
      "example" : [
        {
          "example" : "setup:\n  - type: ruby\n    packages: [ rspec ]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "ruby"
      ]
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the requirement specification."
    },
    {
      "name" : "packages",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install.",
      "example" : [
        {
          "example" : "packages: [ rspec ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "YumRequirements",
      "niceType" : "YumRequirements",
      "hierarchy" : [
        "io.viash.engines.requirements.YumRequirements",
        "io.viash.engines.requirements.Requirements"
      ],
      "description" : "Specify which yum packages should be available in order to run the component.",
      "example" : [
        {
          "example" : "setup:\n  - type: yum\n    packages: [ sl ]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "yum"
      ]
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the requirement specification."
    },
    {
      "name" : "packages",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Specifies which packages to install.",
      "example" : [
        {
          "example" : "packages: [ sl ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Argument",
      "niceType" : "Argument",
      "hierarchy" : [
        "io.viash.config.arguments.Argument"
      ],
      "description" : "For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. See these reference pages per type for more information:  \n\n - @[string](arg_string)\n - @[file](arg_file)\n - @[integer](arg_integer)\n - @[double](arg_double)\n - @[boolean](arg_boolean)\n - @[boolean_true](arg_boolean_true)\n - @[boolean_false](arg_boolean_false)\n",
      "example" : [
        {
          "example" : "arguments:\n  - name: --foo\n    type: file\n    alternatives: [-f]\n    description: Description of foo\n    default: \"/foo/bar\"\n    must_exist: true\n    direction: output\n    required: false\n    multiple: true\n    multiple_sep: \";\"\n  - name: --bar\n    type: string\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "BooleanArgument",
        "BooleanTrueArgument",
        "BooleanFalseArgument",
        "DoubleArgument",
        "FileArgument",
        "IntegerArgument",
        "LongArgument",
        "StringArgument"
      ]
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "BooleanArgument",
      "niceType" : "BooleanArgument",
      "hierarchy" : [
        "io.viash.config.arguments.BooleanArgument",
        "io.viash.config.arguments.BooleanArgumentBase",
        "io.viash.config.arguments.Argument"
      ],
      "description" : "A `boolean` type argument has two possible values: `true` or `false`.",
      "example" : [
        {
          "example" : "arguments:\n  - name: --trim\n    type: boolean\n    default: true\n    description: Trim whitespace from the final output\n    alternatives: [\"-t\"]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "boolean"
      ]
    },
    {
      "name" : "alternatives",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "List of alternative format variations for this argument.",
      "default" : "Empty"
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the argument. Can be in the formats `--trim`, `-t` or `trim`. The number of dashes determines how values can be passed:  \n\n  - `--trim` is a long option, which can be passed with `executable_name --trim`\n  - `-t` is a short option, which can be passed with `executable_name -t`\n  - `trim` is an argument, which can be passed with `executable_name trim`  \n"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "example" : [
        {
          "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.3",
      "default" : "Empty"
    },
    {
      "name" : "default",
      "type" : "OneOrMore[Boolean]",
      "niceType" : "OneOrMore of Boolean",
      "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
      "example" : [
        {
          "example" : "- name: --my_boolean\n  type: boolean\n  default: true\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "example",
      "type" : "OneOrMore[Boolean]",
      "niceType" : "OneOrMore of Boolean",
      "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
      "example" : [
        {
          "example" : "- name: --my_boolean\n  type: boolean\n  example: true\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description of the argument. This will be displayed with `--help`.",
      "default" : "Empty"
    },
    {
      "name" : "multiple_sep",
      "type" : "String",
      "niceType" : "String",
      "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
      "example" : [
        {
          "example" : "- name: --my_boolean\n  type: boolean\n  multiple: true\n  multiple_sep: \";\"\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_boolean=true,true,false",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : ";"
    },
    {
      "name" : "multiple",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
      "example" : [
        {
          "example" : "- name: --my_boolean\n  type: boolean\n  multiple: true\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_boolean=true:true:false",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : "False"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the argument."
    },
    {
      "name" : "required",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
      "example" : [
        {
          "example" : "- name: --my_boolean\n  type: boolean\n  required: true\n",
          "format" : "yaml"
        }
      ],
      "default" : "False"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "BooleanTrueArgument",
      "niceType" : "BooleanTrueArgument",
      "hierarchy" : [
        "io.viash.config.arguments.BooleanTrueArgument",
        "io.viash.config.arguments.BooleanArgumentBase",
        "io.viash.config.arguments.Argument"
      ],
      "description" : "An argument of the `boolean_true` type acts like a `boolean` flag with a default value of `false`. When called as an argument it sets the `boolean` to `true`.",
      "example" : [
        {
          "example" : "arguments:\n  - name: --silent\n    type: boolean_true\n    description: Ignore console output\n    alternatives: [\"-s\"]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "boolean_true"
      ]
    },
    {
      "name" : "alternatives",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "List of alternative format variations for this argument.",
      "default" : "Empty"
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the argument. Can be in the formats `--silent`, `-s` or `silent`. The number of dashes determines how values can be passed:  \n\n  - `--silent` is a long option, which can be passed with `executable_name --silent`\n  - `-s` is a short option, which can be passed with `executable_name -s`\n  - `silent` is an argument, which can be passed with `executable_name silent`  \n"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "example" : [
        {
          "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.3",
      "default" : "Empty"
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description of the argument. This will be displayed with `--help`.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the argument."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "BooleanFalseArgument",
      "niceType" : "BooleanFalseArgument",
      "hierarchy" : [
        "io.viash.config.arguments.BooleanFalseArgument",
        "io.viash.config.arguments.BooleanArgumentBase",
        "io.viash.config.arguments.Argument"
      ],
      "description" : "An argument of the `boolean_false` type acts like an inverted `boolean` flag with a default value of `true`. When called as an argument it sets the `boolean` to `false`.",
      "example" : [
        {
          "example" : "arguments:\n  - name: --no-log\n    type: boolean_false\n    description: Disable logging\n    alternatives: [\"-nl\"]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "boolean_false"
      ]
    },
    {
      "name" : "alternatives",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "List of alternative format variations for this argument.",
      "default" : "Empty"
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the argument. Can be in the formats `--no-log`, `-n` or `no-log`. The number of dashes determines how values can be passed:  \n\n  - `--no-log` is a long option, which can be passed with `executable_name --no-log`\n  - `-n` is a short option, which can be passed with `executable_name -n`\n  - `no-log` is an argument, which can be passed with `executable_name no-log`  \n"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "example" : [
        {
          "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.3",
      "default" : "Empty"
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description of the argument. This will be displayed with `--help`.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the argument."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "DoubleArgument",
      "niceType" : "DoubleArgument",
      "hierarchy" : [
        "io.viash.config.arguments.DoubleArgument",
        "io.viash.config.arguments.Argument"
      ],
      "description" : "A `double` type argument has a numeric value with decimal points",
      "example" : [
        {
          "example" : "arguments:\n  - name: --litres\n    type: double\n    default: 1.5\n    description: Litres of fluid to process\n    alternatives: [\"-l\"]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "double"
      ]
    },
    {
      "name" : "alternatives",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "List of alternative format variations for this argument.",
      "default" : "Empty"
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "example" : [
        {
          "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.3",
      "default" : "Empty"
    },
    {
      "name" : "max",
      "type" : "Option[Double]",
      "niceType" : "Option of Double",
      "description" : "Maximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with [`min`](#min) to clamp values.",
      "example" : [
        {
          "example" : "- name: --my_double\n  type: double\n  max: 80.4\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "default",
      "type" : "OneOrMore[Double]",
      "niceType" : "OneOrMore of Double",
      "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
      "example" : [
        {
          "example" : "- name: --my_double\n  type: double\n  default: 5.8\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "example",
      "type" : "OneOrMore[Double]",
      "niceType" : "OneOrMore of Double",
      "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
      "example" : [
        {
          "example" : "- name: --my_double\n  type: double\n  example: 5.8\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description of the argument. This will be displayed with `--help`.",
      "default" : "Empty"
    },
    {
      "name" : "multiple_sep",
      "type" : "String",
      "niceType" : "String",
      "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
      "example" : [
        {
          "example" : "- name: --my_double\n  type: double\n  multiple: true\n  multiple_sep: \";\"\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_double=5.8,22.6,200.4",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : ";"
    },
    {
      "name" : "min",
      "type" : "Option[Double]",
      "niceType" : "Option of Double",
      "description" : "Minimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with [`max`](#max) to clamp values.",
      "example" : [
        {
          "example" : "- name: --my_double\n  type: double\n  min: 25.5\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "multiple",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
      "example" : [
        {
          "example" : "- name: --my_double\n  type: double\n  multiple: true\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_double=5.8:22.6:200.4",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : "False"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the argument."
    },
    {
      "name" : "required",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
      "example" : [
        {
          "example" : "- name: --my_double\n  type: double\n  required: true\n",
          "format" : "yaml"
        }
      ],
      "default" : "False"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "FileArgument",
      "niceType" : "FileArgument",
      "hierarchy" : [
        "io.viash.config.arguments.FileArgument",
        "io.viash.config.arguments.Argument"
      ],
      "description" : "A `file` type argument has a string value that points to a file or folder path.",
      "example" : [
        {
          "example" : "arguments:\n  - name: --input_csv\n    type: file\n    must_exist: true\n    description: CSV file to read contents from\n    alternatives: [\"-i\"]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "file"
      ]
    },
    {
      "name" : "alternatives",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "List of alternative format variations for this argument.",
      "default" : "Empty"
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
    },
    {
      "name" : "create_parent",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "If the output filename is a path and it does not exist, create it before executing the script (only for `direction: output`).",
      "example" : [
        {
          "example" : "- name: --my_file\n  type: file\n  direction: output\n  create_parent: true\n",
          "format" : "yaml"
        }
      ],
      "default" : "True"
    },
    {
      "name" : "direction",
      "type" : "Direction",
      "niceType" : "Direction",
      "description" : "Makes this argument an `input` or an `output`, as in does the file/folder needs to be read or written. `input` by default.",
      "example" : [
        {
          "example" : "- name: --my_output_file\n  type: file\n  direction: output\n",
          "format" : "yaml"
        }
      ],
      "default" : "Input"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "example" : [
        {
          "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.3",
      "default" : "Empty"
    },
    {
      "name" : "must_exist",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Checks whether the file or folder exists. For input files, this check will happen before the execution of the script, while for output files the check will happen afterwards.",
      "example" : [
        {
          "example" : "- name: --my_file\n  type: file\n  must_exist: true\n",
          "format" : "yaml"
        }
      ],
      "default" : "True"
    },
    {
      "name" : "default",
      "type" : "OneOrMore[Path]",
      "niceType" : "OneOrMore of Path",
      "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
      "example" : [
        {
          "example" : "- name: --my_file\n  type: file\n  default: data.csv\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "example",
      "type" : "OneOrMore[Path]",
      "niceType" : "OneOrMore of Path",
      "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
      "example" : [
        {
          "example" : "- name: --my_file\n  type: file\n  example: data.csv\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description of the argument. This will be displayed with `--help`.",
      "default" : "Empty"
    },
    {
      "name" : "multiple_sep",
      "type" : "String",
      "niceType" : "String",
      "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
      "example" : [
        {
          "example" : "- name: --my_files\n  type: file\n  multiple: true\n  multiple_sep: \";\"\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_files=firstFile.csv,anotherFile.csv,yetAnother.csv",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : ";"
    },
    {
      "name" : "multiple",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Allow for multiple values (`false` by default).\n\nFor input arguments, this will be treated as a list of values. For example, values\ncan be passed using the delimiter `--foo=1:2:3` or by providing the same argument \nmultiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the \n[`multiple_sep`](#multiple_sep) property.\n\nFor output file arguments, the passed value needs to contain a wildcard. For example,\n`--foo 'foo_*.txt'` will be treated as a list of files that match the pattern. Note that in Bash,\n the wildcard will need to be in quotes (`\"foo_*.txt\"` or `'foo_*.txt'`) or else Bash will\n automatically attempt to expand the expression.\n\nOther output arguments (e.g. integer, double, ...) are not supported yet.\n",
      "example" : [
        {
          "example" : "- name: --my_files\n  type: file\n  multiple: true\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_files=firstFile.csv:anotherFile.csv:yetAnother.csv",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : "False"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the argument."
    },
    {
      "name" : "required",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
      "example" : [
        {
          "example" : "- name: --my_file\n  type: file\n  required: true\n",
          "format" : "yaml"
        }
      ],
      "default" : "False"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "IntegerArgument",
      "niceType" : "IntegerArgument",
      "hierarchy" : [
        "io.viash.config.arguments.IntegerArgument",
        "io.viash.config.arguments.Argument"
      ],
      "description" : "An `integer` type argument has a numeric value without decimal points.",
      "example" : [
        {
          "example" : "arguments:\n  - name: --core_amount\n    type: integer\n    default: 16\n    description: Amount of CPU cores to use\n    alternatives: [\"-c\"]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "integer"
      ]
    },
    {
      "name" : "alternatives",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "List of alternative format variations for this argument.",
      "default" : "Empty"
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
    },
    {
      "name" : "choices",
      "type" : "List[Int]",
      "niceType" : "List of Int",
      "description" : "Limit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.",
      "example" : [
        {
          "example" : "- name: --values\n  type: integer\n  choices: [1024, 2048, 4096]\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "example" : [
        {
          "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.3",
      "default" : "Empty"
    },
    {
      "name" : "max",
      "type" : "Option[Int]",
      "niceType" : "Option of Int",
      "description" : "Maximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with [`min`](#min) to clamp values.",
      "example" : [
        {
          "example" : "- name: --my_integer\n  type: integer\n  max: 150\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "default",
      "type" : "OneOrMore[Int]",
      "niceType" : "OneOrMore of Int",
      "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
      "example" : [
        {
          "example" : "- name: --my_integer\n  type: integer\n  default: 100\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "example",
      "type" : "OneOrMore[Int]",
      "niceType" : "OneOrMore of Int",
      "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
      "example" : [
        {
          "example" : "- name: --my_integer\n  type: integer\n  example: 100\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description of the argument. This will be displayed with `--help`.",
      "default" : "Empty"
    },
    {
      "name" : "multiple_sep",
      "type" : "String",
      "niceType" : "String",
      "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
      "example" : [
        {
          "example" : "- name: --my_integer\n  type: integer\n  multiple: true\n  multiple_sep: \";\"\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_integer=10:80:152",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : ";"
    },
    {
      "name" : "min",
      "type" : "Option[Int]",
      "niceType" : "Option of Int",
      "description" : "Minimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with [`max`](#max) to clamp values.",
      "example" : [
        {
          "example" : "- name: --my_integer\n  type: integer\n  min: 50\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "multiple",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
      "example" : [
        {
          "example" : "- name: --my_integer\n  type: integer\n  multiple: true\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_integer=10:80:152",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : "False"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the argument."
    },
    {
      "name" : "required",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
      "example" : [
        {
          "example" : "- name: --my_integer\n  type: integer\n  required: true\n",
          "format" : "yaml"
        }
      ],
      "default" : "False"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "LongArgument",
      "niceType" : "LongArgument",
      "hierarchy" : [
        "io.viash.config.arguments.LongArgument",
        "io.viash.config.arguments.Argument"
      ],
      "description" : "An `long` type argument has a numeric value without decimal points.",
      "example" : [
        {
          "example" : "arguments:\n  - name: --core_amount\n    type: long\n    default: 16\n    description: Amount of CPU cores to use\n    alternatives: [\"-c\"]\n",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.1",
      "subclass" : [
        "long"
      ]
    },
    {
      "name" : "alternatives",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "List of alternative format variations for this argument.",
      "default" : "Empty"
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
    },
    {
      "name" : "choices",
      "type" : "List[Long]",
      "niceType" : "List of Long",
      "description" : "Limit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.",
      "example" : [
        {
          "example" : "- name: --values\n  type: long\n  choices: [1024, 2048, 4096]\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "example" : [
        {
          "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.3",
      "default" : "Empty"
    },
    {
      "name" : "max",
      "type" : "Option[Long]",
      "niceType" : "Option of Long",
      "description" : "Maximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with [`min`](#min) to clamp values.",
      "example" : [
        {
          "example" : "- name: --my_long\n  type: long\n  max: 150\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "default",
      "type" : "OneOrMore[Long]",
      "niceType" : "OneOrMore of Long",
      "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
      "example" : [
        {
          "example" : "- name: --my_long\n  type: long\n  default: 100\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "example",
      "type" : "OneOrMore[Long]",
      "niceType" : "OneOrMore of Long",
      "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
      "example" : [
        {
          "example" : "- name: --my_long\n  type: long\n  example: 100\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description of the argument. This will be displayed with `--help`.",
      "default" : "Empty"
    },
    {
      "name" : "multiple_sep",
      "type" : "String",
      "niceType" : "String",
      "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
      "example" : [
        {
          "example" : "- name: --my_long\n  type: long\n  multiple: true\n  multiple_sep: \";\"\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_long=10:80:152",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : ";"
    },
    {
      "name" : "min",
      "type" : "Option[Long]",
      "niceType" : "Option of Long",
      "description" : "Minimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with [`max`](#max) to clamp values.",
      "example" : [
        {
          "example" : "- name: --my_long\n  type: long\n  min: 50\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "multiple",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
      "example" : [
        {
          "example" : "- name: --my_long\n  type: long\n  multiple: true\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_long=10:80:152",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : "False"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the argument."
    },
    {
      "name" : "required",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
      "example" : [
        {
          "example" : "- name: --my_long\n  type: long\n  required: true\n",
          "format" : "yaml"
        }
      ],
      "default" : "False"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "StringArgument",
      "niceType" : "StringArgument",
      "hierarchy" : [
        "io.viash.config.arguments.StringArgument",
        "io.viash.config.arguments.Argument"
      ],
      "description" : "A `string` type argument has a value made up of an ordered sequences of characters, like \"Hello\" or \"I'm a string\".",
      "example" : [
        {
          "example" : "arguments:\n  - name: --search_query\n    type: string\n    default: \"meaning of life\"\n    description: The term to search for\n    alternatives: [\"-q\"]\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "string"
      ]
    },
    {
      "name" : "alternatives",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "List of alternative format variations for this argument.",
      "default" : "Empty"
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  \n\n  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`\n  - `-f` is a short option, which can be passed with `executable_name -f value`\n  - `foo` is an argument, which can be passed with `executable_name value`  \n"
    },
    {
      "name" : "choices",
      "type" : "List[String]",
      "niceType" : "List of String",
      "description" : "Limit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.",
      "example" : [
        {
          "example" : "- name: --language\n  type: string\n  choices: [\"python\", \"r\", \"javascript\"]\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "info",
      "type" : "Json",
      "niceType" : "Json",
      "description" : "Structured information. Can be any shape: a string, vector, map or even nested map.",
      "example" : [
        {
          "example" : "info:\n  category: cat1\n  labels: [one, two, three]",
          "format" : "yaml"
        }
      ],
      "since" : "Viash 0.6.3",
      "default" : "Empty"
    },
    {
      "name" : "default",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.",
      "example" : [
        {
          "example" : "- name: --my_string\n  type: string\n  default: \"The answer is 42\"\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "example",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.",
      "example" : [
        {
          "example" : "- name: --my_string\n  type: string\n  example: \"Hello World\"\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "description",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "A description of the argument. This will be displayed with `--help`.",
      "default" : "Empty"
    },
    {
      "name" : "multiple_sep",
      "type" : "String",
      "niceType" : "String",
      "description" : "The delimiter character for providing [`multiple`](#multiple) values. `:` by default.",
      "example" : [
        {
          "example" : "- name: --my_string\n  type: string\n  multiple: true\n  multiple_sep: \";\"\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_string=Marc,Susan,Paul",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : ";"
    },
    {
      "name" : "multiple",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.",
      "example" : [
        {
          "example" : "- name: --my_string\n  type: string\n  multiple: true\n",
          "format" : "yaml"
        },
        {
          "example" : "my_component --my_string=Marc:Susan:Paul",
          "format" : "bash",
          "description" : "Here's an example of how to use this:"
        }
      ],
      "default" : "False"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the type of the argument."
    },
    {
      "name" : "required",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.",
      "example" : [
        {
          "example" : "- name: --my_string\n  type: string\n  required: true\n",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Resource",
      "niceType" : "Resource",
      "hierarchy" : [
        "io.viash.config.resources.Resource"
      ],
      "description" : "Resources are files that support the component. The first resource should be @[a script](scripting_languages) that will be executed when the component is run. Additional resources will be copied to the same directory.\n\nCommon properties:\n\n * type: `file` / `r_script` / `python_script` / `bash_script` / `javascript_script` / `scala_script` / `csharp_script`, specifies the type of the resource. The first resource cannot be of type `file`. When the type is not specified, the default type is simply `file`.\n * dest: filename, the resulting name of the resource.  From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.\n * path: `path/to/file`, the path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.\n * text: ...multiline text..., the content of the resulting file specified as a string. Mutually exclusive with `path`.\n * is_executable: `true` / `false`, whether the resulting resource file should be made executable.\n",
      "example" : [
        {
          "example" : "resources:\n  - type: r_script\n    path: script.R\n  - type: file\n    path: resource1.txt\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "BashScript",
        "CSharpScript",
        "Executable",
        "JavaScriptScript",
        "NextflowScript",
        "PlainFile",
        "PythonScript",
        "RScript",
        "ScalaScript"
      ]
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "BashScript",
      "niceType" : "BashScript",
      "hierarchy" : [
        "io.viash.config.resources.BashScript",
        "io.viash.config.resources.Script",
        "io.viash.config.resources.Resource"
      ],
      "description" : "An executable Bash script.\nWhen defined in resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in test_resources, all entries will be executed during `viash test`.",
      "subclass" : [
        "bash_script"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.",
      "default" : "Empty"
    },
    {
      "name" : "text",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`.",
      "default" : "Empty"
    },
    {
      "name" : "is_executable",
      "type" : "Option[Boolean]",
      "niceType" : "Option of Boolean",
      "description" : "Whether the resulting resource file should be made executable.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the resource as a Bash script."
    },
    {
      "name" : "dest",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "CSharpScript",
      "niceType" : "CSharpScript",
      "hierarchy" : [
        "io.viash.config.resources.CSharpScript",
        "io.viash.config.resources.Script",
        "io.viash.config.resources.Resource"
      ],
      "description" : "An executable C# script.\nWhen defined in resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in test_resources, all entries will be executed during `viash test`.",
      "subclass" : [
        "csharp_script"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.",
      "default" : "Empty"
    },
    {
      "name" : "text",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`.",
      "default" : "Empty"
    },
    {
      "name" : "is_executable",
      "type" : "Option[Boolean]",
      "niceType" : "Option of Boolean",
      "description" : "Whether the resulting resource file should be made executable.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the resource as a C# script."
    },
    {
      "name" : "dest",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Executable",
      "niceType" : "Executable",
      "hierarchy" : [
        "io.viash.config.resources.Executable",
        "io.viash.config.resources.Script",
        "io.viash.config.resources.Resource"
      ],
      "description" : "An executable file.",
      "subclass" : [
        "executable"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.",
      "default" : "Empty"
    },
    {
      "name" : "text",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`.",
      "default" : "Empty"
    },
    {
      "name" : "is_executable",
      "type" : "Option[Boolean]",
      "niceType" : "Option of Boolean",
      "description" : "Whether the resulting resource file should be made executable.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the resource as an executable."
    },
    {
      "name" : "dest",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "JavaScriptScript",
      "niceType" : "JavaScriptScript",
      "hierarchy" : [
        "io.viash.config.resources.JavaScriptScript",
        "io.viash.config.resources.Script",
        "io.viash.config.resources.Resource"
      ],
      "description" : "An executable JavaScript script.\nWhen defined in resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in test_resources, all entries will be executed during `viash test`.",
      "subclass" : [
        "javascript_script"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.",
      "default" : "Empty"
    },
    {
      "name" : "text",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`.",
      "default" : "Empty"
    },
    {
      "name" : "is_executable",
      "type" : "Option[Boolean]",
      "niceType" : "Option of Boolean",
      "description" : "Whether the resulting resource file should be made executable.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the resource as a JavaScript script."
    },
    {
      "name" : "dest",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "NextflowScript",
      "niceType" : "NextflowScript",
      "hierarchy" : [
        "io.viash.config.resources.NextflowScript",
        "io.viash.config.resources.Script",
        "io.viash.config.resources.Resource"
      ],
      "description" : "A Nextflow script. Work in progress; added mainly for annotation at the moment.",
      "subclass" : [
        "nextflow_script"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.",
      "default" : "Empty"
    },
    {
      "name" : "text",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`.",
      "default" : "Empty"
    },
    {
      "name" : "entrypoint",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the workflow to be wrapped."
    },
    {
      "name" : "is_executable",
      "type" : "Option[Boolean]",
      "niceType" : "Option of Boolean",
      "description" : "Whether the resulting resource file should be made executable.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the resource as a Nextflow script."
    },
    {
      "name" : "dest",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "PlainFile",
      "niceType" : "PlainFile",
      "hierarchy" : [
        "io.viash.config.resources.PlainFile",
        "io.viash.config.resources.Resource"
      ],
      "description" : "A plain file. This can only be used as a supporting resource for the main script or unit tests.",
      "subclass" : [
        "file"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.",
      "default" : "Empty"
    },
    {
      "name" : "text",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`.",
      "default" : "Empty"
    },
    {
      "name" : "is_executable",
      "type" : "Option[Boolean]",
      "niceType" : "Option of Boolean",
      "description" : "Whether the resulting resource file should be made executable.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the resource as a plain file."
    },
    {
      "name" : "dest",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "PythonScript",
      "niceType" : "PythonScript",
      "hierarchy" : [
        "io.viash.config.resources.PythonScript",
        "io.viash.config.resources.Script",
        "io.viash.config.resources.Resource"
      ],
      "description" : "An executable Python script.\nWhen defined in resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in test_resources, all entries will be executed during `viash test`.",
      "subclass" : [
        "python_script"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.",
      "default" : "Empty"
    },
    {
      "name" : "text",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`.",
      "default" : "Empty"
    },
    {
      "name" : "is_executable",
      "type" : "Option[Boolean]",
      "niceType" : "Option of Boolean",
      "description" : "Whether the resulting resource file should be made executable.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the resource as a Python script."
    },
    {
      "name" : "dest",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "RScript",
      "niceType" : "RScript",
      "hierarchy" : [
        "io.viash.config.resources.RScript",
        "io.viash.config.resources.Script",
        "io.viash.config.resources.Resource"
      ],
      "description" : "An executable R script.\nWhen defined in resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in test_resources, all entries will be executed during `viash test`.",
      "subclass" : [
        "r_script"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.",
      "default" : "Empty"
    },
    {
      "name" : "text",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`.",
      "default" : "Empty"
    },
    {
      "name" : "is_executable",
      "type" : "Option[Boolean]",
      "niceType" : "Option of Boolean",
      "description" : "Whether the resulting resource file should be made executable.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the resource as a R script."
    },
    {
      "name" : "dest",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "ScalaScript",
      "niceType" : "ScalaScript",
      "hierarchy" : [
        "io.viash.config.resources.ScalaScript",
        "io.viash.config.resources.Script",
        "io.viash.config.resources.Resource"
      ],
      "description" : "An executable Scala script.\nWhen defined in resources, only the first entry will be executed when running the built component or when running `viash run`.\nWhen defined in test_resources, all entries will be executed during `viash test`.",
      "subclass" : [
        "scala_script"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with `text`.",
      "default" : "Empty"
    },
    {
      "name" : "text",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The content of the resulting file specified as a string. Mutually exclusive with `path`.",
      "default" : "Empty"
    },
    {
      "name" : "is_executable",
      "type" : "Option[Boolean]",
      "niceType" : "Option of Boolean",
      "description" : "Whether the resulting resource file should be made executable.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Specifies the resource as a Scala script."
    },
    {
      "name" : "dest",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Resulting filename of the resource. From within a script, the file can be accessed at `meta[\"resources_dir\"] + \"/\" + dest`. If unspecified, `dest` will be set to the basename of the `path` parameter.",
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "NextflowDirectives",
      "niceType" : "NextflowDirectives",
      "hierarchy" : [
        "io.viash.runners.nextflow.NextflowDirectives"
      ],
      "description" : "Directives are optional settings that affect the execution of the process.\n",
      "example" : [
        {
          "example" : "directives:\n    container: rocker/r-ver:4.1\n    label: highcpu\n    cpus: 4\n    memory: 16 GB",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "beforeScript",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `beforeScript` directive allows you to execute a custom (Bash) snippet before the main process script is run. This may be useful to initialise the underlying cluster environment or for other custom initialisation.\n\nSee [`beforeScript`](https://www.nextflow.io/docs/latest/process.html#beforeScript).\n",
      "example" : [
        {
          "example" : "source /cluster/bin/setup",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "module",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Environment Modules is a package manager that allows you to dynamically configure your execution environment and easily switch between multiple versions of the same software tool.\n\nIf it is available in your system you can use it with Nextflow in order to configure the processes execution environment in your pipeline.\n\nIn a process definition you can use the `module` directive to load a specific module version to be used in the process execution environment.\n\nSee [`module`](https://www.nextflow.io/docs/latest/process.html#module).\n",
      "example" : [
        {
          "example" : "\"ncbi-blast/2.2.27\"",
          "format" : "yaml"
        },
        {
          "example" : "\"ncbi-blast/2.2.27:t_coffee/10.0\"",
          "format" : "yaml"
        },
        {
          "example" : "[\"ncbi-blast/2.2.27\", \"t_coffee/10.0\"]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "queue",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "The `queue` directory allows you to set the queue where jobs are scheduled when using a grid based executor in your pipeline.\n\nSee [`queue`](https://www.nextflow.io/docs/latest/process.html#queue).\n",
      "example" : [
        {
          "example" : "\"long\"",
          "format" : "yaml"
        },
        {
          "example" : "\"short,long\"",
          "format" : "yaml"
        },
        {
          "example" : "[\"short\", \"long\"]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "label",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "The `label` directive allows the annotation of processes with mnemonic identifier of your choice.\n\nSee [`label`](https://www.nextflow.io/docs/latest/process.html#label).\n",
      "example" : [
        {
          "example" : "\"big_mem\"",
          "format" : "yaml"
        },
        {
          "example" : "\"big_cpu\"",
          "format" : "yaml"
        },
        {
          "example" : "[\"big_mem\", \"big_cpu\"]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "container",
      "type" : "Option[Either[Map[String,String],String]]",
      "niceType" : "Option of Either Map of String to String or String",
      "description" : "The `container` directive allows you to execute the process script in a Docker container.\n\nIt requires the Docker daemon to be running in machine where the pipeline is executed, i.e. the local machine when using the local executor or the cluster nodes when the pipeline is deployed through a grid executor.\n\nViash implements allows either a string value or a map. In case a map is used, the allowed keys are: `registry`, `image`, and `tag`. The `image` value must be specified.\n\nSee [`container`](https://www.nextflow.io/docs/latest/process.html#container).\n",
      "example" : [
        {
          "example" : "\"foo/bar:tag\"",
          "format" : "yaml"
        },
        {
          "example" : "[ registry: \"reg\", image: \"im\", tag: \"ta\" ]",
          "format" : "yaml",
          "description" : "This is transformed to `\"reg/im:ta\"`:"
        },
        {
          "example" : "[ image: \"im\" ]",
          "format" : "yaml",
          "description" : "This is transformed to `\"im:latest\"`:"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "publishDir",
      "type" : "OneOrMore[Either[String,Map[String,String]]]",
      "niceType" : "OneOrMore of Either String or Map of String to String",
      "description" : "The `publishDir` directive allows you to publish the process output files to a specified folder.\n\nViash implements this directive as a plain string or a map. The allowed keywords for the map are: `path`, `mode`, `overwrite`, `pattern`, `saveAs`, `enabled`. The `path` key and value are required.\nThe allowed values for `mode` are: `symlink`, `rellink`, `link`, `copy`, `copyNoFollow`, `move`.\n\nSee [`publishDir`](https://www.nextflow.io/docs/latest/process.html#publishdir).\n",
      "example" : [
        {
          "example" : "[]",
          "format" : "yaml"
        },
        {
          "example" : "[ [ path: \"foo\", enabled: true ], [ path: \"bar\", enabled: false ] ]",
          "format" : "yaml"
        },
        {
          "example" : "\"/path/to/dir\"",
          "format" : "yaml",
          "description" : "This is transformed to `[[ path: \"/path/to/dir\" ]]`:"
        },
        {
          "example" : "[ path: \"/path/to/dir\", mode: \"cache\" ]",
          "format" : "yaml",
          "description" : "This is transformed to `[[ path: \"/path/to/dir\", mode: \"cache\" ]]`:"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "maxForks",
      "type" : "Option[Either[String,Int]]",
      "niceType" : "Option of Either String or Int",
      "description" : "The `maxForks` directive allows you to define the maximum number of process instances that can be executed in parallel. By default this value is equals to the number of CPU cores available minus 1.\n\nIf you want to execute a process in a sequential manner, set this directive to one.\n\nSee [`maxForks`](https://www.nextflow.io/docs/latest/process.html#maxforks).\n",
      "example" : [
        {
          "example" : "1",
          "format" : "yaml"
        },
        {
          "example" : "3",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "maxErrors",
      "type" : "Option[Either[String,Int]]",
      "niceType" : "Option of Either String or Int",
      "description" : "The `maxErrors` directive allows you to specify the maximum number of times a process can fail when using the `retry` error strategy. By default this directive is disabled.\n\nSee [`maxErrors`](https://www.nextflow.io/docs/latest/process.html#maxerrors).\n",
      "example" : [
        {
          "example" : "1",
          "format" : "yaml"
        },
        {
          "example" : "3",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "cpus",
      "type" : "Option[Either[Int,String]]",
      "niceType" : "Option of Either Int or String",
      "description" : "The `cpus` directive allows you to define the number of (logical) CPU required by the process' task.\n\nSee [`cpus`](https://www.nextflow.io/docs/latest/process.html#cpus).\n",
      "example" : [
        {
          "example" : "1",
          "format" : "yaml"
        },
        {
          "example" : "10",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "accelerator",
      "type" : "Map[String,String]",
      "niceType" : "Map of String to String",
      "description" : "The `accelerator` directive allows you to specify the hardware accelerator requirement for the task execution e.g. GPU processor.\n\nViash implements this directive as a map with accepted keywords: `type`, `limit`, `request`, and `runtime`.\n\nSee [`accelerator`](https://www.nextflow.io/docs/latest/process.html#accelerator).\n",
      "example" : [
        {
          "example" : "[ limit: 4, type: \"nvidia-tesla-k80\" ]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "time",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `time` directive allows you to define how long a process is allowed to run.\n\nSee [`time`](https://www.nextflow.io/docs/latest/process.html#time).\n",
      "example" : [
        {
          "example" : "\"1h\"",
          "format" : "yaml"
        },
        {
          "example" : "\"2days\"",
          "format" : "yaml"
        },
        {
          "example" : "\"1day 6hours 3minutes 30seconds\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "afterScript",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `afterScript` directive allows you to execute a custom (Bash) snippet immediately after the main process has run. This may be useful to clean up your staging area.\n\nSee [`afterScript`](https://www.nextflow.io/docs/latest/process.html#afterscript).\n",
      "example" : [
        {
          "example" : "source /cluster/bin/cleanup",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "executor",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `executor` defines the underlying system where processes are executed. By default a process uses the executor defined globally in the nextflow.config file.\n\nThe `executor` directive allows you to configure what executor has to be used by the process, overriding the default configuration. The following values can be used:\n\n| Name | Executor |\n|------|----------|\n| awsbatch | The process is executed using the AWS Batch service. | \n| azurebatch | The process is executed using the Azure Batch service. | \n| condor | The process is executed using the HTCondor job scheduler. | \n| google-lifesciences | The process is executed using the Google Genomics Pipelines service. | \n| ignite | The process is executed using the Apache Ignite cluster. | \n| k8s | The process is executed using the Kubernetes cluster. | \n| local | The process is executed in the computer where Nextflow is launched. | \n| lsf | The process is executed using the Platform LSF job scheduler. | \n| moab | The process is executed using the Moab job scheduler. | \n| nqsii | The process is executed using the NQSII job scheduler. | \n| oge | Alias for the sge executor. | \n| pbs | The process is executed using the PBS/Torque job scheduler. | \n| pbspro | The process is executed using the PBS Pro job scheduler. | \n| sge | The process is executed using the Sun Grid Engine / Open Grid Engine. | \n| slurm | The process is executed using the SLURM job scheduler. | \n| tes | The process is executed using the GA4GH TES service. | \n| uge | Alias for the sge executor. |\n\nSee [`executor`](https://www.nextflow.io/docs/latest/process.html#executor).\n",
      "example" : [
        {
          "example" : "\"local\"",
          "format" : "yaml"
        },
        {
          "example" : "\"sge\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "containerOptions",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "The `containerOptions` directive allows you to specify any container execution option supported by the underlying container engine (ie. Docker, Singularity, etc). This can be useful to provide container settings only for a specific process e.g. mount a custom path.\n\nSee [`containerOptions`](https://www.nextflow.io/docs/latest/process.html#containeroptions).\n",
      "example" : [
        {
          "example" : "\"--foo bar\"",
          "format" : "yaml"
        },
        {
          "example" : "[\"--foo bar\", \"-f b\"]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "disk",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `disk` directive allows you to define how much local disk storage the process is allowed to use.\n\nSee [`disk`](https://www.nextflow.io/docs/latest/process.html#disk).\n",
      "example" : [
        {
          "example" : "\"1 GB\"",
          "format" : "yaml"
        },
        {
          "example" : "\"2TB\"",
          "format" : "yaml"
        },
        {
          "example" : "\"3.2KB\"",
          "format" : "yaml"
        },
        {
          "example" : "\"10.B\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `tag` directive allows you to associate each process execution with a custom label, so that it will be easier to identify them in the log file or in the trace execution report.\n\nFor ease of use, the default tag is set to `\"$id\"`, which allows tracking the progression of the channel events through the workflow more easily.\n\nSee [`tag`](https://www.nextflow.io/docs/latest/process.html#tag).\n",
      "example" : [
        {
          "example" : "\"foo\"",
          "format" : "yaml"
        }
      ],
      "default" : "'$id'"
    },
    {
      "name" : "conda",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "The `conda` directive allows for the definition of the process dependencies using the Conda package manager.\n\nNextflow automatically sets up an environment for the given package names listed by in the `conda` directive.\n\nSee [`conda`](https://www.nextflow.io/docs/latest/process.html#conda).\n",
      "example" : [
        {
          "example" : "\"bwa=0.7.15\"",
          "format" : "yaml"
        },
        {
          "example" : "\"bwa=0.7.15 fastqc=0.11.5\"",
          "format" : "yaml"
        },
        {
          "example" : "[\"bwa=0.7.15\", \"fastqc=0.11.5\"]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "machineType",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : " The `machineType` can be used to specify a predefined Google Compute Platform machine type when running using the Google Life Sciences executor.\n\nSee [`machineType`](https://www.nextflow.io/docs/latest/process.html#machinetype).\n",
      "example" : [
        {
          "example" : "\"n1-highmem-8\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "stageInMode",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `stageInMode` directive defines how input files are staged-in to the process work directory. The following values are allowed:\n\n| Value | Description |\n|-------|-------------| \n| copy | Input files are staged in the process work directory by creating a copy. | \n| link | Input files are staged in the process work directory by creating an (hard) link for each of them. | \n| symlink | Input files are staged in the process work directory by creating a symbolic link with an absolute path for each of them (default). | \n| rellink | Input files are staged in the process work directory by creating a symbolic link with a relative path for each of them. | \n\nSee [`stageInMode`](https://www.nextflow.io/docs/latest/process.html#stageinmode).\n",
      "example" : [
        {
          "example" : "\"copy\"",
          "format" : "yaml"
        },
        {
          "example" : "\"link\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "cache",
      "type" : "Option[Either[Boolean,String]]",
      "niceType" : "Option of Either Boolean or String",
      "description" : "The `cache` directive allows you to store the process results to a local cache. When the cache is enabled and the pipeline is launched with the resume option, any following attempt to execute the process, along with the same inputs, will cause the process execution to be skipped, producing the stored data as the actual results.\n\nThe caching feature generates a unique key by indexing the process script and inputs. This key is used to identify univocally the outputs produced by the process execution.\n\nThe `cache` is enabled by default, you can disable it for a specific process by setting the cache directive to `false`.\n\nAccepted values are: `true`, `false`, `\"deep\"`, and `\"lenient\"`.\n\nSee [`cache`](https://www.nextflow.io/docs/latest/process.html#cache).\n",
      "example" : [
        {
          "example" : "true",
          "format" : "yaml"
        },
        {
          "example" : "false",
          "format" : "yaml"
        },
        {
          "example" : "\"deep\"",
          "format" : "yaml"
        },
        {
          "example" : "\"lenient\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "pod",
      "type" : "OneOrMore[Map[String,String]]",
      "niceType" : "OneOrMore of Map of String to String",
      "description" : "The `pod` directive allows the definition of pods specific settings, such as environment variables, secrets and config maps when using the Kubernetes executor.\n\nSee [`pod`](https://www.nextflow.io/docs/latest/process.html#pod).\n",
      "example" : [
        {
          "example" : "[ label: \"key\", value: \"val\" ]",
          "format" : "yaml"
        },
        {
          "example" : "[ annotation: \"key\", value: \"val\" ]",
          "format" : "yaml"
        },
        {
          "example" : "[ env: \"key\", value: \"val\" ]",
          "format" : "yaml"
        },
        {
          "example" : "[ [label: \"l\", value: \"v\"], [env: \"e\", value: \"v\"]]",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "penv",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `penv` directive allows you to define the parallel environment to be used when submitting a parallel task to the SGE resource manager.\n\nSee [`penv`](https://www.nextflow.io/docs/latest/process.html#penv).\n",
      "example" : [
        {
          "example" : "\"smp\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "scratch",
      "type" : "Option[Either[Boolean,String]]",
      "niceType" : "Option of Either Boolean or String",
      "description" : "The `scratch` directive allows you to execute the process in a temporary folder that is local to the execution node.\n\nSee [`scratch`](https://www.nextflow.io/docs/latest/process.html#scratch).\n",
      "example" : [
        {
          "example" : "true",
          "format" : "yaml"
        },
        {
          "example" : "\"/path/to/scratch\"",
          "format" : "yaml"
        },
        {
          "example" : "'$MY_PATH_TO_SCRATCH'",
          "format" : "yaml"
        },
        {
          "example" : "\"ram-disk\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "storeDir",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `storeDir` directive allows you to define a directory that is used as a permanent cache for your process results.\n\nSee [`storeDir`](https://www.nextflow.io/docs/latest/process.html#storeDir).\n",
      "example" : [
        {
          "example" : "\"/path/to/storeDir\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "maxRetries",
      "type" : "Option[Either[String,Int]]",
      "niceType" : "Option of Either String or Int",
      "description" : "The `maxRetries` directive allows you to define the maximum number of times a process instance can be re-submitted in case of failure. This value is applied only when using the retry error strategy. By default only one retry is allowed.\n\nSee [`maxRetries`](https://www.nextflow.io/docs/latest/process.html#maxretries).\n",
      "example" : [
        {
          "example" : "1",
          "format" : "yaml"
        },
        {
          "example" : "3",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "echo",
      "type" : "Option[Either[Boolean,String]]",
      "niceType" : "Option of Either Boolean or String",
      "description" : "By default the stdout produced by the commands executed in all processes is ignored. By setting the `echo` directive to true, you can forward the process stdout to the current top running process stdout file, showing it in the shell terminal.\n \nSee [`echo`](https://www.nextflow.io/docs/latest/process.html#echo).\n",
      "example" : [
        {
          "example" : "true",
          "format" : "yaml"
        },
        {
          "example" : "false",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "errorStrategy",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `errorStrategy` directive allows you to define how an error condition is managed by the process. By default when an error status is returned by the executed script, the process stops immediately. This in turn forces the entire pipeline to terminate.\n\nTable of available error strategies:\n| Name | Executor |\n|------|----------|\n| `terminate` | Terminates the execution as soon as an error condition is reported. Pending jobs are killed (default) |\n| `finish` | Initiates an orderly pipeline shutdown when an error condition is raised, waiting the completion of any submitted job. |\n| `ignore` | Ignores processes execution errors. |\n| `retry` | Re-submit for execution a process returning an error condition. |\n\nSee [`errorStrategy`](https://www.nextflow.io/docs/latest/process.html#errorstrategy).\n",
      "example" : [
        {
          "example" : "\"terminate\"",
          "format" : "yaml"
        },
        {
          "example" : "\"finish\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "memory",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `memory` directive allows you to define how much memory the process is allowed to use.\n\nSee [`memory`](https://www.nextflow.io/docs/latest/process.html#memory).\n",
      "example" : [
        {
          "example" : "\"1 GB\"",
          "format" : "yaml"
        },
        {
          "example" : "\"2TB\"",
          "format" : "yaml"
        },
        {
          "example" : "\"3.2KB\"",
          "format" : "yaml"
        },
        {
          "example" : "\"10.B\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    },
    {
      "name" : "stageOutMode",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "The `stageOutMode` directive defines how output files are staged-out from the scratch directory to the process work directory. The following values are allowed:\n\n| Value | Description |\n|-------|-------------| \n| copy | Output files are copied from the scratch directory to the work directory. | \n| move | Output files are moved from the scratch directory to the work directory. | \n| rsync | Output files are copied from the scratch directory to the work directory by using the rsync utility. |\n\nSee [`stageOutMode`](https://www.nextflow.io/docs/latest/process.html#stageoutmode).\n",
      "example" : [
        {
          "example" : "\"copy\"",
          "format" : "yaml"
        },
        {
          "example" : "\"link\"",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "NextflowAuto",
      "niceType" : "NextflowAuto",
      "hierarchy" : [
        "io.viash.runners.nextflow.NextflowAuto"
      ],
      "description" : "Automated processing flags which can be toggled on or off."
    },
    {
      "name" : "simplifyInput",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "If `true`, an input tuple only containing only a single File (e.g. `[\"foo\", file(\"in.h5ad\")]`) is automatically transformed to a map (i.e. `[\"foo\", [ input: file(\"in.h5ad\") ] ]`).\n\nDefault: `true`.\n",
      "default" : "True"
    },
    {
      "name" : "simplifyOutput",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "If `true`, an output tuple containing a map with a File (e.g. `[\"foo\", [ output: file(\"out.h5ad\") ] ]`) is automatically transformed to a map (i.e. `[\"foo\", file(\"out.h5ad\")]`).\n\nDefault: `false`.\n",
      "default" : "False"
    },
    {
      "name" : "publish",
      "type" : "Either[Boolean,String]",
      "niceType" : "Either Boolean or String",
      "description" : "If `true`, the module's outputs are automatically published to `params.publishDir`.\nIf equal to `\"state\"`, also a `.state.yaml` file will be published in the publish dir.\nWill throw an error if `params.publishDir` is not defined.\n\nDefault: `false`.\n",
      "default" : "False"
    },
    {
      "name" : "transcript",
      "type" : "Boolean",
      "niceType" : "Boolean",
      "description" : "If `true`, the module's transcripts from `work/` are automatically published to `params.transcriptDir`.\nIf not defined, `params.publishDir + \"/_transcripts\"` will be used.\nWill throw an error if neither are defined.\n\nDefault: `false`.\n",
      "default" : "False"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "NextflowConfig",
      "niceType" : "NextflowConfig",
      "hierarchy" : [
        "io.viash.runners.nextflow.NextflowConfig"
      ],
      "description" : "Allows tweaking how the Nextflow Config file is generated.",
      "since" : "Viash 0.7.4"
    },
    {
      "name" : "labels",
      "type" : "ListMap[String,String]",
      "niceType" : "Map of String to String",
      "description" : "A series of default labels to specify memory and cpu constraints.\n\nThe default memory labels are defined as \"mem1gb\", \"mem2gb\", \"mem4gb\", ... upto \"mem512tb\" and follows powers of 2.\nThe default cpu labels are defined as \"cpu1\", \"cpu2\", \"cpu5\", \"cpu10\", ... upto \"cpu1000\" and follows a semi logarithmic scale (1, 2, 5 per decade).\n\nConceptually it is possible for a Viash Config to overwrite the full labels parameter, however likely it is more efficient to add additional labels\nin the Viash Package with a config mod.\n",
      "example" : [
        {
          "example" : "labels:\n  lowmem: \"memory = 4.GB\"\n  lowcpu: \"cpus = 4\"\n  midmem: \"memory = 25.GB\"\n  midcpu: \"cpus = 10\"\n  highmem: \"memory = 50.GB\"\n  highcpu: \"cpus = 20\"\n  vhighmem: \"memory = 100.GB\"\n  vhighcpu: \"cpus = 40\"\n",
          "format" : "yaml",
          "description" : "Replace the default labels with a different set of labels"
        },
        {
          "example" : "-c '.runners[.type == \"nextflow\"].config.labels.lowmem := \"memory = 4.GB\";.runners[.type == \"nextflow\"].config.labels.lowcpu := \"cpus = 4\"'",
          "format" : "viash_config_mod",
          "description" : "Add 'lowmem' and 'lowcpu' to the default labels by using a config mod"
        },
        {
          "example" : "config_mods: |\n  .runners[.type == \"nextflow\"].config.labels.lowmem := \"memory = 4.GB\"\n  .runners[.type == \"nextflow\"].config.labels.lowcpu := \"cpus = 4\"\n",
          "format" : "viash_package_file",
          "description" : "Add 'lowmem' and 'lowcpu' to the default labels by using the Viash Package file"
        },
        {
          "example" : "config_mods: |\n  .runners[.type == \"nextflow\"].config.labels := { lowmem: \"memory = 4.GB\", lowcpu: \"cpus = 4\", midmem: \"memory = 25.GB\", midcpu: \"cpus = 10\", highmem: \"memory = 50.GB\", highcpu: \"cpus = 20\", vhighmem: \"memory = 100.GB\", vhighcpu: \"cpus = 40\" }\n",
          "format" : "viash_package_file",
          "description" : "Replace the default labels with a different set of labels by using the Viash Package file"
        }
      ],
      "default" : "A series of default labels to specify memory and cpu constraints"
    },
    {
      "name" : "script",
      "type" : "OneOrMore[String]",
      "niceType" : "OneOrMore of String",
      "description" : "Includes a single string or list of strings into the nextflow.config file.\nThis can be used to add custom profiles or include an additional config file.\n",
      "example" : [
        {
          "example" : "script:\n  - |\n    profiles {\n    ...\n    }\n",
          "format" : "yaml"
        },
        {
          "example" : "script: includeConfig(\"config.config\")",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Dependency",
      "niceType" : "Dependency",
      "hierarchy" : [
        "io.viash.config.dependencies.Dependency"
      ],
      "description" : "Specifies a Viash component (script or executable) that should be made available for the code defined in the component.\nThe dependency components are collected and copied to the output folder during the Viash build step.\n",
      "example" : [
        {
          "example" : "name: qc/multiqc\nrepository: \n  type: github\n  repo: openpipelines-bio/modules\n  tag: 0.3.0\n",
          "format" : "yaml",
          "description" : "Definition of dependency with a fully defined repository"
        },
        {
          "example" : "name: qc/multiqc\nrepository: \"github://openpipelines-bio/modules:0.3.0\"\n",
          "format" : "yaml",
          "description" : "Definition of a dependency with a repository using sugar syntax."
        },
        {
          "example" : "name: qc/multiqc\nrepository: \"openpipelines-bio\"\n",
          "format" : "yaml",
          "description" : "Definition of a dependency with a repository defined as 'openpipelines-bio' under `.repositories`."
        },
        {
          "example" : "name: qc/multiqc\n",
          "format" : "yaml",
          "description" : "Definition of a local dependency. This dependency is present in the current code base and will be built when `viash ns build` is run."
        }
      ]
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The full name of the dependency component. This should include the namespace.",
      "example" : [
        {
          "example" : "name: \"my_namespace/component\"",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "repository",
      "type" : "Either[String,Repository]",
      "niceType" : "Either String or Repository",
      "description" : "Specifies the @[repository](repository) location where the dependency component can be found.\nThis must either be a full definition of the repository or the name of a repository referenced as it is defined under repositories.\nAdditionally, the full definition can be specified as a single string where all parameters such as repository type, url, branch or tag are specified.\nOmitting the value sets the dependency as a local dependency, ie. the dependency is available in the same namespace as the component.\n",
      "default" : "Empty"
    },
    {
      "name" : "alias",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "An alternative name for the dependency component. This can include a namespace if so needed.",
      "example" : [
        {
          "example" : "alias: my_alias",
          "format" : "yaml"
        }
      ],
      "default" : "Empty"
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "Repository",
      "niceType" : "Repository",
      "hierarchy" : [
        "io.viash.config.dependencies.Repository",
        "io.viash.config.dependencies.CopyableRepo"
      ],
      "description" : "Specifies a repository where dependency components can be found.\n\n - @[local](repo_local)\n - @[git](repo_git)\n - @[github](repo_github)\n - @[vsh](repo_vsh)\n",
      "example" : [
        {
          "example" : "repositories:\n  - name: openpipelines-bio\n    type: github\n    repo: openpipelines-bio/modules\n    tag: 0.3.0\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "LocalRepository",
        "GitRepository",
        "GithubRepository",
        "ViashhubRepository"
      ]
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "LocalRepository",
      "niceType" : "LocalRepository",
      "hierarchy" : [
        "io.viash.config.dependencies.LocalRepository",
        "io.viash.config.dependencies.LocalRepositoryTrait",
        "io.viash.config.dependencies.Repository",
        "io.viash.config.dependencies.CopyableRepo"
      ],
      "description" : "Defines a locally present and available repository.\nThis can be used to define components from the same code base as the current component.\nAlternatively, this can be used to refer to a code repository present on the local hard-drive instead of fetchable remotely, for example during development.\n",
      "example" : [
        {
          "example" : "type: local\npath: /additional_code/src\n",
          "format" : "yaml",
          "description" : "Refer to a local code repository under `additional_code/src` referenced to the Viash Package Config file."
        }
      ],
      "subclass" : [
        "local"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines a subfolder of the repository to use as base to look for the dependency components.",
      "default" : "Empty"
    },
    {
      "name" : "tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Defines the repository as a locally present and available repository."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "GitRepository",
      "niceType" : "GitRepository",
      "hierarchy" : [
        "io.viash.config.dependencies.GitRepository",
        "io.viash.config.dependencies.GitRepositoryTrait",
        "io.viash.config.dependencies.AbstractGitRepository",
        "io.viash.helpers.Logging",
        "io.viash.config.dependencies.Repository",
        "io.viash.config.dependencies.CopyableRepo"
      ],
      "description" : "A Git repository where remote dependency components can be found.",
      "example" : [
        {
          "example" : "type: git\nuri: git+https://github.com/openpipelines-bio/openpipeline.git\ntag: 0.8.0\n",
          "format" : "yaml"
        },
        {
          "example" : "type: git\nuri: git+https://gitlab.com/viash-io/viash.git\ntag: 0.7.1\npath: src/test/resources/testns\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "git"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines a subfolder of the repository to use as base to look for the dependency components.",
      "default" : "Empty"
    },
    {
      "name" : "tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash.",
      "default" : "Empty"
    },
    {
      "name" : "uri",
      "type" : "String",
      "niceType" : "String",
      "description" : "The URI of the Git repository.",
      "example" : [
        {
          "example" : "uri: \"git+https://github.com/openpipelines-bio/openpipeline.git\"",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Defines the repository as a Git repository."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "GithubRepository",
      "niceType" : "GithubRepository",
      "hierarchy" : [
        "io.viash.config.dependencies.GithubRepository",
        "io.viash.config.dependencies.GithubRepositoryTrait",
        "io.viash.config.dependencies.AbstractGitRepository",
        "io.viash.helpers.Logging",
        "io.viash.config.dependencies.Repository",
        "io.viash.config.dependencies.CopyableRepo"
      ],
      "description" : "A GitHub repository where remote dependency components can be found.",
      "example" : [
        {
          "example" : "type: github\nrepo: openpipelines-bio/openpipeline\ntag: 0.8.0\n",
          "format" : "yaml"
        },
        {
          "example" : "type: github\nrepo: viash-io/viash\ntag: 0.7.1\npath: src/test/resources/testns\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "github"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines a subfolder of the repository to use as base to look for the dependency components.",
      "default" : "Empty"
    },
    {
      "name" : "tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash.",
      "default" : "Empty"
    },
    {
      "name" : "repo",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the GitHub repository.",
      "example" : [
        {
          "example" : "repo: viash-io/viash",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Defines the repository as a GitHub repository."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "ViashhubRepository",
      "niceType" : "ViashhubRepository",
      "hierarchy" : [
        "io.viash.config.dependencies.ViashhubRepository",
        "io.viash.config.dependencies.ViashhubRepositoryTrait",
        "io.viash.config.dependencies.AbstractGitRepository",
        "io.viash.helpers.Logging",
        "io.viash.config.dependencies.Repository",
        "io.viash.config.dependencies.CopyableRepo"
      ],
      "description" : "A Viash-Hub repository where remote dependency components can be found.",
      "example" : [
        {
          "example" : "type: vsh\nrepo: biobox\ntag: 0.1.0\n",
          "format" : "yaml"
        },
        {
          "example" : "type: vsh\nrepo: openpipelines-bio/openpipeline\ntag: 0.8.0\n",
          "format" : "yaml"
        },
        {
          "example" : "type: vsh\nrepo: openpipelines-bio/openpipeline\ntag: 0.7.1\npath: src/test/resources/testns\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "viashhub"
      ]
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines a subfolder of the repository to use as base to look for the dependency components.",
      "default" : "Empty"
    },
    {
      "name" : "tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash.",
      "default" : "Empty"
    },
    {
      "name" : "repo",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the Viash-Hub repository.",
      "example" : [
        {
          "example" : "repo: openpipelines-bio/openpipeline",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Defines the repository as a Viash-Hub repository."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "RepositoryWithName",
      "niceType" : "RepositoryWithName",
      "hierarchy" : [
        "io.viash.config.dependencies.RepositoryWithName",
        "io.viash.config.dependencies.Repository",
        "io.viash.config.dependencies.CopyableRepo"
      ],
      "description" : "Specifies a repository where dependency components can be found.",
      "subclass" : [
        "LocalRepositoryWithName",
        "GitRepositoryWithName",
        "GithubRepositoryWithName",
        "ViashhubRepositoryWithName"
      ]
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "LocalRepositoryWithName",
      "niceType" : "LocalRepositoryWithName",
      "hierarchy" : [
        "io.viash.config.dependencies.LocalRepositoryWithName",
        "io.viash.config.dependencies.LocalRepositoryTrait",
        "io.viash.config.dependencies.RepositoryWithName",
        "io.viash.config.dependencies.Repository",
        "io.viash.config.dependencies.CopyableRepo"
      ],
      "description" : "Defines a locally present and available repository.\nThis can be used to define components from the same code base as the current component.\nAlternatively, this can be used to refer to a code repository present on the local hard-drive instead of fetchable remotely, for example during development.\n",
      "example" : [
        {
          "example" : "name: my_local_code\ntype: local\npath: /additional_code/src\n",
          "format" : "yaml",
          "description" : "Refer to a local code repository under `additional_code/src` referenced to the Viash Package Config file."
        }
      ],
      "subclass" : [
        "localwithname"
      ]
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The identifier used to refer to this repository from dependencies."
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines a subfolder of the repository to use as base to look for the dependency components.",
      "default" : "Empty"
    },
    {
      "name" : "tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash.",
      "default" : "Empty"
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Defines the repository type. This determines how the repository will be fetched and handled."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "GitRepositoryWithName",
      "niceType" : "GitRepositoryWithName",
      "hierarchy" : [
        "io.viash.config.dependencies.GitRepositoryWithName",
        "io.viash.config.dependencies.GitRepositoryTrait",
        "io.viash.config.dependencies.AbstractGitRepository",
        "io.viash.helpers.Logging",
        "io.viash.config.dependencies.RepositoryWithName",
        "io.viash.config.dependencies.Repository",
        "io.viash.config.dependencies.CopyableRepo"
      ],
      "description" : "A Git repository where remote dependency components can be found.",
      "example" : [
        {
          "example" : "name: openpipeline\ntype: git\nuri: git+https://github.com/openpipelines-bio/openpipeline.git\ntag: 0.8.0\n",
          "format" : "yaml"
        },
        {
          "example" : "name: viash-testns\ntype: git\nuri: git+https://gitlab.com/viash-io/viash.git\ntag: 0.7.1\npath: src/test/resources/testns\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "gitwithname"
      ]
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The identifier used to refer to this repository from dependencies."
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines a subfolder of the repository to use as base to look for the dependency components.",
      "default" : "Empty"
    },
    {
      "name" : "tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash.",
      "default" : "Empty"
    },
    {
      "name" : "uri",
      "type" : "String",
      "niceType" : "String",
      "description" : "The URI of the Git repository.",
      "example" : [
        {
          "example" : "uri: \"git+https://github.com/openpipelines-bio/openpipeline.git\"",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Defines the repository as a Git repository."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "GithubRepositoryWithName",
      "niceType" : "GithubRepositoryWithName",
      "hierarchy" : [
        "io.viash.config.dependencies.GithubRepositoryWithName",
        "io.viash.config.dependencies.GithubRepositoryTrait",
        "io.viash.config.dependencies.AbstractGitRepository",
        "io.viash.helpers.Logging",
        "io.viash.config.dependencies.RepositoryWithName",
        "io.viash.config.dependencies.Repository",
        "io.viash.config.dependencies.CopyableRepo"
      ],
      "description" : "A GitHub repository where remote dependency components can be found.",
      "example" : [
        {
          "example" : "name: openpipeline\ntype: github\nrepo: openpipelines-bio/openpipeline\ntag: 0.8.0\n",
          "format" : "yaml"
        },
        {
          "example" : "name: viash-testns\ntype: github\nrepo: viash-io/viash\ntag: 0.7.1\npath: src/test/resources/testns\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "githubwithname"
      ]
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The identifier used to refer to this repository from dependencies."
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines a subfolder of the repository to use as base to look for the dependency components.",
      "default" : "Empty"
    },
    {
      "name" : "tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash.",
      "default" : "Empty"
    },
    {
      "name" : "repo",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the GitHub repository.",
      "example" : [
        {
          "example" : "repo: viash-io/viash",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Defines the repository as a GitHub repository."
    }
  ],
  [
    {
      "name" : "__this__",
      "type" : "ViashhubRepositoryWithName",
      "niceType" : "ViashhubRepositoryWithName",
      "hierarchy" : [
        "io.viash.config.dependencies.ViashhubRepositoryWithName",
        "io.viash.config.dependencies.ViashhubRepositoryTrait",
        "io.viash.config.dependencies.AbstractGitRepository",
        "io.viash.helpers.Logging",
        "io.viash.config.dependencies.RepositoryWithName",
        "io.viash.config.dependencies.Repository",
        "io.viash.config.dependencies.CopyableRepo"
      ],
      "description" : "A Viash-Hub repository where remote dependency components can be found.",
      "example" : [
        {
          "example" : "name: biobox\ntype: vsh\nrepo: biobox\ntag: 0.1.0\n",
          "format" : "yaml"
        },
        {
          "example" : "name: openpipeline\ntype: vsh\nrepo: openpipelines-bio/openpipeline\ntag: 0.8.0\n",
          "format" : "yaml"
        },
        {
          "example" : "name: viash-testns\ntype: vsh\nrepo: openpipelines-bio/openpipeline\ntag: 0.7.1\npath: src/test/resources/testns\n",
          "format" : "yaml"
        }
      ],
      "subclass" : [
        "viashhubwithname"
      ]
    },
    {
      "name" : "name",
      "type" : "String",
      "niceType" : "String",
      "description" : "The identifier used to refer to this repository from dependencies."
    },
    {
      "name" : "path",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines a subfolder of the repository to use as base to look for the dependency components.",
      "default" : "Empty"
    },
    {
      "name" : "tag",
      "type" : "Option[String]",
      "niceType" : "Option of String",
      "description" : "Defines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash.",
      "default" : "Empty"
    },
    {
      "name" : "repo",
      "type" : "String",
      "niceType" : "String",
      "description" : "The name of the Viash-Hub repository.",
      "example" : [
        {
          "example" : "repo: openpipelines-bio/openpipeline",
          "format" : "yaml"
        }
      ]
    },
    {
      "name" : "type",
      "type" : "String",
      "niceType" : "String",
      "description" : "Defines the repository as a Viash-Hub repository."
    }
  ]
]