---
title: "File"
search: true
---

A `file` type argument has a string value that points to a file or folder path.

**Example:**

```yaml
arguments:
  - name: --input_csv
    type: file
    must_exist: true
    description: CSV file to read contents from
    alternatives: ["-i"]

```

## alternatives

**Type**: `String` / `List of String`

**Default**: `Empty`

List of alternative format variations for this argument.

## create_parent

**Type**: `Boolean`

**Default**: `True`

If the output filename is a path and it does not exist, create it before executing the script (only for `direction: output`).

**Example:**

```yaml
- name: --my_file
  type: file
  direction: output
  create_parent: true

```

## default

**Type**: `Path` / `List of Path`

**Default**: `Empty`

The default value when no argument value is provided. This will not work if the [`required`](#required) property is enabled.

**Example:**

```yaml
- name: --my_file
  type: file
  default: data.csv

```

## description

**Type**: `String`

**Default**: `Empty`

A description of the argument. This will be displayed with `--help`.

## direction

**Type**: `Direction`

**Default**: `Input`

Makes this argument an `input` or an `output`, as in does the file/folder needs to be read or written. `input` by default.

**Example:**

```yaml
- name: --my_output_file
  type: file
  direction: output

```

## example

**Type**: `Path` / `List of Path`

**Default**: `Empty`

An example value for this argument. If no [`default`](#default) property was specified, this will be used for that purpose.

**Example:**

```yaml
- name: --my_file
  type: file
  example: data.csv

```

## info

**Type**: `Json`

**Default**: `Empty`

Structured information. Can be any shape: a string, vector, map or even nested map.

**Example:**

```yaml
info:
  category: cat1
  labels: [one, two, three]
```

## multiple

**Type**: `Boolean`

**Default**: `False`

Treat the argument value as an array. Arrays can be passed using the delimiter `--foo=1:2:3` or by providing the same argument multiple times `--foo 1 --foo 2`. You can use a custom delimiter by using the [`multiple_sep`](#multiple_sep) property. `false` by default.

**Examples:**

```yaml
- name: --my_files
  type: file
  multiple: true

```

Here's an example of how to use this:

```bash
my_component --my_files=firstFile.csv:anotherFile.csv:yetAnother.csv
```

## multiple_sep

**Type**: `String`

**Default**: `:`

The delimiter character for providing [`multiple`](#multiple) values. `:` by default.

**Examples:**

```yaml
- name: --my_files
  type: file
  multiple: true
  multiple_sep: ","

```

Here's an example of how to use this:

```bash
my_component --my_files=firstFile.csv,anotherFile.csv,yetAnother.csv
```

## must_exist

**Type**: `Boolean`

**Default**: `True`

Checks whether the file or folder exists. For input files, this check will happen before the execution of the script, while for output files the check will happen afterwards.

**Example:**

```yaml
- name: --my_file
  type: file
  must_exist: true

```

## name

**Type**: `String`

The name of the argument. Can be in the formats `--foo`, `-f` or `foo`. The number of dashes determines how values can be passed:  

  - `--foo` is a long option, which can be passed with `executable_name --foo=value` or `executable_name --foo value`
  - `-f` is a short option, which can be passed with `executable_name -f value`
  - `foo` is an argument, which can be passed with `executable_name value`  


## required

**Type**: `Boolean`

**Default**: `False`

Make the value for this argument required. If set to `true`, an error will be produced if no value was provided. `false` by default.

**Example:**

```yaml
- name: --my_file
  type: file
  required: true

```

## type

**Type**: `String`

Specifies the type of the argument.
