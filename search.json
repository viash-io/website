[
  {
    "objectID": "quickstart/index.html",
    "href": "quickstart/index.html",
    "title": "Welcome to Viash!",
    "section": "",
    "text": "Viash is your go-to script wrapper for building data pipelines from modular software components. All you need is your trusty script and a metadata file to embark on this journey.\nCheck out some of Viash’s key features:"
  },
  {
    "objectID": "quickstart/index.html#requirements",
    "href": "quickstart/index.html#requirements",
    "title": "Welcome to Viash!",
    "section": "Requirements",
    "text": "Requirements\nThis guide assumes you’ve already installed Viash, Docker and Nextflow."
  },
  {
    "objectID": "quickstart/index.html#quickstart-example-project",
    "href": "quickstart/index.html#quickstart-example-project",
    "title": "Welcome to Viash!",
    "section": "Quickstart example project",
    "text": "Quickstart example project\nTo get up and running fast, we provide a template project for you to use. It contains three components, which are combined into a Nextflow pipeline as follows:\n\n\n\n\ngraph LR\n   A(file?.tsv) --&gt; B[/remove_comments/]\n   B --&gt; C[/take_column/]\n   C --&gt; D[/combine_columns/]\n   D --&gt; E(output)\n\n\n\n\n\nThis pipeline takes one or more TSV files as input and stores its output in an output folder."
  },
  {
    "objectID": "quickstart/index.html#step-1-get-the-template",
    "href": "quickstart/index.html#step-1-get-the-template",
    "title": "Welcome to Viash!",
    "section": "Step 1: Get the template",
    "text": "Step 1: Get the template\nFirst create a new repository by clicking the “Use this template” button. If you can’t see the “Use this template” button, log into GitHub first.\nNext, clone the repository using the following command.\ngit clone https://github.com/youruser/my_first_pipeline.git && cd my_first_pipeline\nYour new repository should contain the following files:\ntree my_first_pipeline\n.\n├── LICENSE.md                            License information\n├── README.md                             A readme.\n├── _viash.yaml                           Global Viash settings\n├── resources_test/*.tsv                  Sample files to showcase pipeline and\n│   ├── file1.tsv                         run component unit tests.\n│   └── file2.tsv\n├── src/demo                              Source directory with Viash components\n│   ├── combine_columns\n│   ├── remove_comments\n│   └── take_column\n└── workflows\n    └── demo_pipeline                     Demo Nextflow pipeline\n        ├── main.nf\n        └── nextflow.config"
  },
  {
    "objectID": "quickstart/index.html#step-2-build-the-viash-components",
    "href": "quickstart/index.html#step-2-build-the-viash-components",
    "title": "Welcome to Viash!",
    "section": "Step 2: Build the Viash components",
    "text": "Step 2: Build the Viash components\nWith Viash you can turn the components in src/ into Dockerized Nextflow modules by running:\nviash ns build --setup cachedbuild --parallel\n\n\nOutput\n\n\n\nExporting remove_comments (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/remove_comments\nExporting combine_columns (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/combine_columns\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/combine_columns:dev' with Dockerfile\nExporting take_column (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/take_column\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/take_column:dev' with Dockerfile\nExporting combine_columns (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/combine_columns\nExporting remove_comments (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/remove_comments\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/remove_comments:dev' with Dockerfile\nExporting take_column (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/take_column\n\u001b[32mAll 6 configs built successfully\u001b[0m\n\n\n\nOnce everything is built, a new target directory has been created containing the executables and modules grouped per platform:\nls -l\n\n\nOutput\n\n\n\ntotal 72\n-rw-r--r-- 1 runner docker   747 Oct 23 08:59 CHANGELOG.md\n-rw-r--r-- 1 runner docker 32219 Oct 23 08:59 LICENSE.md\n-rw-r--r-- 1 runner docker  1094 Oct 23 08:59 README.md\n-rw-r--r-- 1 runner docker  1125 Oct 23 08:59 README.qmd\n-rw-r--r-- 1 runner docker   415 Oct 23 09:00 _viash.yaml\n-rw-r--r-- 1 runner docker   245 Oct 23 08:59 main.nf\n-rw-r--r-- 1 runner docker   222 Oct 23 08:59 nextflow.config\ndrwxr-xr-x 2 runner docker  4096 Oct 23 08:59 resources_test\ndrwxr-xr-x 3 runner docker  4096 Oct 23 08:59 src\ndrwxr-xr-x 4 runner docker  4096 Oct 23 09:00 target\ndrwxr-xr-x 3 runner docker  4096 Oct 23 08:59 workflows"
  },
  {
    "objectID": "quickstart/index.html#step-3-run-the-pipeline",
    "href": "quickstart/index.html#step-3-run-the-pipeline",
    "title": "Welcome to Viash!",
    "section": "Step 3: Run the pipeline",
    "text": "Step 3: Run the pipeline\nNow run the pipeline with Nextflow:\nnextflow run . \\\n  -main-script workflows/demo_pipeline/main.nf \\\n  -with-docker \\\n  --input resources_test/file*.tsv \\\n  --publish_dir output\n\n\nOutput\n\n\n\nN E X T F L O W  ~  version 23.10.0\nLaunching `workflows/demo_pipeline/main.nf` [nasty_swanson] DSL2 - revision: c65d4e7bba\n[-        ] process &gt; remove_comments:remove_comm... -\n\n[-        ] process &gt; remove_comments:remove_comm... -\n[-        ] process &gt; take_column:take_column_pro... -\n\n[-        ] process &gt; remove_comments:remove_comm... -\n[-        ] process &gt; take_column:take_column_pro... -\n[-        ] process &gt; combine_columns:combine_col... -\n\nexecutor &gt;  local (1)\n[7f/ebb29b] process &gt; remove_comments:remove_comm... [  0%] 0 of 1\n[-        ] process &gt; take_column:take_column_pro... -\n[-        ] process &gt; combine_columns:combine_col... -\n\nexecutor &gt;  local (2)\n[7f/ebb29b] process &gt; remove_comments:remove_comm... [100%] 1 of 1 ✔\n[bb/fa155d] process &gt; take_column:take_column_pro... [  0%] 0 of 1\n[-        ] process &gt; combine_columns:combine_col... -\n\nexecutor &gt;  local (3)\n[7f/ebb29b] process &gt; remove_comments:remove_comm... [100%] 1 of 1 ✔\n[bb/fa155d] process &gt; take_column:take_column_pro... [100%] 1 of 1 ✔\n[b7/774745] process &gt; combine_columns:combine_col... [  0%] 0 of 1\n\nexecutor &gt;  local (3)\n[7f/ebb29b] process &gt; remove_comments:remove_comm... [100%] 1 of 1 ✔\n[bb/fa155d] process &gt; take_column:take_column_pro... [100%] 1 of 1 ✔\n[b7/774745] process &gt; combine_columns:combine_col... [  0%] 0 of 1\n\nexecutor &gt;  local (3)\n[7f/ebb29b] process &gt; remove_comments:remove_comm... [100%] 1 of 1 ✔\n[bb/fa155d] process &gt; take_column:take_column_pro... [100%] 1 of 1 ✔\n[b7/774745] process &gt; combine_columns:combine_col... [100%] 1 of 1 ✔\nOutput: [combined, /home/runner/work/website/website/guide/_viash_project_template/work/b7/774745f6ff3f888ec722090812cc42/combined.combine_columns.output]\n\n\n\nThis will run the three modules in sequence, with the final result result being stored in a file named combined.combine_columns.output in a new temp directory:\ncat output/combined.combine_columns.output\n\n\nOutput\n\n\n\n\"1\" 0.11\n\"2\" 0.23\n\"3\" 0.35\n\"4\" 0.47"
  },
  {
    "objectID": "quickstart/index.html#whats-next",
    "href": "quickstart/index.html#whats-next",
    "title": "Welcome to Viash!",
    "section": "What’s next?",
    "text": "What’s next?\nCongratulations, you’ve reached the end of this quickstart tutorial, and we’re excited for you to delve deeper into the world of Viash! Our comprehensive guide and reference documentation is here to help you explore various topics, such as:\n\nCreating a Viash component and converting it into a standalone executable\nEnsuring reproducibility and designing customised Docker images\nEnsuring code reliability with unit testing for Viash\nStreamlining your workflow by performing batch operations on Viash projects\nBuilding Nextflow pipelines using Viash components\n\nSo, get ready to enhance your skills and create outstanding solutions with Viash!"
  },
  {
    "objectID": "reference/config_mods/index.html",
    "href": "reference/config_mods/index.html",
    "title": "Dynamic Config Modding",
    "section": "",
    "text": "Viash can modify a viash config at runtime using a custom Domain Specific Language (DSL). This allows making dynamic changes to your components or projects.\nAll Viash subcommands have support for the DSL through the -c|--config_mod parameter. The format for these is as follows:\nMultiple config mods can be added by adding more -c|--config_mod parameters:"
  },
  {
    "objectID": "reference/config_mods/index.html#examples",
    "href": "reference/config_mods/index.html#examples",
    "title": "Dynamic Config Modding",
    "section": "Examples",
    "text": "Examples\nChange the version of a component:\nviash build -c '.functionality.version := \"0.3.0\"'\nChange the registry of a docker container:\nviash build -c \\\n  '.platforms[.type == \"docker\"].container_registry := \"url-to-registry\"'\nAdd an author to the list:\nviash build -c '.functionality.authors += { name: \"Mr. T\", role: \"sponsor\" }'\nYou can use dynamic config modding to alter the config of multiple components at once:\nviash ns build \\\n  -c '.functionality.version := \"0.3.0\"' \\\n  -c '.platforms[.type == \"docker\"].container_registry := \"url-to-registry\"' \\\n  -c '.functionality.authors += { name: \"Mr. T\", role: \"sponsor\" }'"
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html",
    "href": "reference/config/platforms/nextflow/index.html",
    "title": "Nextflow Platform",
    "section": "",
    "text": "Platform for generating Nextflow VDSL3 modules.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#auto",
    "href": "reference/config/platforms/nextflow/index.html#auto",
    "title": "Nextflow Platform",
    "section": "auto",
    "text": "auto\nType: NextflowAuto\nDefault: simplifyInput: true simplifyOutput: false transcript: false publish: false\nAutomated processing flags which can be toggled on or off:\n\n\n\n\n\n\n\n\nFlag\nDescription\nDefault\n\n\n\n\nsimplifyInput\nIf true, an input tuple only containing only a single File (e.g. [\"foo\", file(\"in.h5ad\")]) is automatically transformed to a map (i.e. [\"foo\", [ input: file(\"in.h5ad\") ] ]).\ntrue\n\n\nsimplifyOutput\nIf true, an output tuple containing a map with a File (e.g. [\"foo\", [ output: file(\"out.h5ad\") ] ]) is automatically transformed to a map (i.e. [\"foo\", file(\"out.h5ad\")]).\nfalse\n\n\ntranscript\nIf true, the module’s transcripts from work/ are automatically published to params.transcriptDir. If not defined, params.publishDir + \"/_transcripts\" will be used. Will throw an error if neither are defined.\nfalse\n\n\npublish\nIf true, the module’s outputs are automatically published to params.publishDir. If equal to \"state\", also a .state.yaml file will be published in the publish dir. Will throw an error if params.publishDir is not defined.\nfalse\n\n\n\nExample:\nauto:\n  publish: true"
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#config",
    "href": "reference/config/platforms/nextflow/index.html#config",
    "title": "Nextflow Platform",
    "section": "config",
    "text": "config\nType: NextflowConfig\nDefault: A series of default labels to specify memory and cpu constraints\nAllows tweaking how the Nextflow Config file is generated."
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#container",
    "href": "reference/config/platforms/nextflow/index.html#container",
    "title": "Nextflow Platform",
    "section": "container",
    "text": "container\nType: String\nDefault: docker\nSpecifies the Docker platform id to be used to run Nextflow."
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#debug",
    "href": "reference/config/platforms/nextflow/index.html#debug",
    "title": "Nextflow Platform",
    "section": "debug",
    "text": "debug\nType: Boolean\nDefault: False\nWhether or not to print debug messages."
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#directives",
    "href": "reference/config/platforms/nextflow/index.html#directives",
    "title": "Nextflow Platform",
    "section": "directives",
    "text": "directives\nType: NextflowDirectives\nDefault: Empty\nDirectives are optional settings that affect the execution of the process. These mostly match up with the Nextflow counterparts.\nExample:\ndirectives:\n  container: rocker/r-ver:4.1\n  label: highcpu\n  cpus: 4\n  memory: 16 GB"
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#id",
    "href": "reference/config/platforms/nextflow/index.html#id",
    "title": "Nextflow Platform",
    "section": "id",
    "text": "id\nType: String\nDefault: nextflow\nEvery platform can be given a specific id that can later be referred to explicitly when running or building the Viash component.\nExample:\nid: foo"
  },
  {
    "objectID": "reference/config/platforms/nextflow/index.html#type",
    "href": "reference/config/platforms/nextflow/index.html#type",
    "title": "Nextflow Platform",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the platform."
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html",
    "href": "reference/config/platforms/nextflow/directives.html",
    "title": "Nextflow Directives",
    "section": "",
    "text": "Directives are optional settings that affect the execution of the process.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#accelerator",
    "href": "reference/config/platforms/nextflow/directives.html#accelerator",
    "title": "Nextflow Directives",
    "section": "accelerator",
    "text": "accelerator\nType: Map of String to String\nDefault: Empty\nThe accelerator directive allows you to specify the hardware accelerator requirement for the task execution e.g. GPU processor.\nViash implements this directive as a map with accepted keywords: type, limit, request, and runtime.\nSee accelerator.\nExample:\n[ limit: 4, type: \"nvidia-tesla-k80\" ]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#afterscript",
    "href": "reference/config/platforms/nextflow/directives.html#afterscript",
    "title": "Nextflow Directives",
    "section": "afterScript",
    "text": "afterScript\nType: String\nDefault: Empty\nThe afterScript directive allows you to execute a custom (Bash) snippet immediately after the main process has run. This may be useful to clean up your staging area.\nSee afterScript.\nExample:\nsource /cluster/bin/cleanup"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#beforescript",
    "href": "reference/config/platforms/nextflow/directives.html#beforescript",
    "title": "Nextflow Directives",
    "section": "beforeScript",
    "text": "beforeScript\nType: String\nDefault: Empty\nThe beforeScript directive allows you to execute a custom (Bash) snippet before the main process script is run. This may be useful to initialise the underlying cluster environment or for other custom initialisation.\nSee beforeScript.\nExample:\nsource /cluster/bin/setup"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#cache",
    "href": "reference/config/platforms/nextflow/directives.html#cache",
    "title": "Nextflow Directives",
    "section": "cache",
    "text": "cache\nType: Either   - Boolean   - String\nDefault: Empty\nThe cache directive allows you to store the process results to a local cache. When the cache is enabled and the pipeline is launched with the resume option, any following attempt to execute the process, along with the same inputs, will cause the process execution to be skipped, producing the stored data as the actual results.\nThe caching feature generates a unique key by indexing the process script and inputs. This key is used to identify univocally the outputs produced by the process execution.\nThe cache is enabled by default, you can disable it for a specific process by setting the cache directive to false.\nAccepted values are: true, false, \"deep\", and \"lenient\".\nSee cache.\nExamples:\ntrue\nfalse\n\"deep\"\n\"lenient\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#conda",
    "href": "reference/config/platforms/nextflow/directives.html#conda",
    "title": "Nextflow Directives",
    "section": "conda",
    "text": "conda\nType: String / List of String\nDefault: Empty\nThe conda directive allows for the definition of the process dependencies using the Conda package manager.\nNextflow automatically sets up an environment for the given package names listed by in the conda directive.\nSee conda.\nExamples:\n\"bwa=0.7.15\"\n\"bwa=0.7.15 fastqc=0.11.5\"\n[\"bwa=0.7.15\", \"fastqc=0.11.5\"]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#container",
    "href": "reference/config/platforms/nextflow/directives.html#container",
    "title": "Nextflow Directives",
    "section": "container",
    "text": "container\nType: Either   - Map of String to String   - String\nDefault: Empty\nThe container directive allows you to execute the process script in a Docker container.\nIt requires the Docker daemon to be running in machine where the pipeline is executed, i.e. the local machine when using the local executor or the cluster nodes when the pipeline is deployed through a grid executor.\nViash implements allows either a string value or a map. In case a map is used, the allowed keys are: registry, image, and tag. The image value must be specified.\nSee container.\nExamples:\n\"foo/bar:tag\"\nThis is transformed to \"reg/im:ta\":\n[ registry: \"reg\", image: \"im\", tag: \"ta\" ]\nThis is transformed to \"im:latest\":\n[ image: \"im\" ]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#containeroptions",
    "href": "reference/config/platforms/nextflow/directives.html#containeroptions",
    "title": "Nextflow Directives",
    "section": "containerOptions",
    "text": "containerOptions\nType: String / List of String\nDefault: Empty\nThe containerOptions directive allows you to specify any container execution option supported by the underlying container engine (ie. Docker, Singularity, etc). This can be useful to provide container settings only for a specific process e.g. mount a custom path.\nSee containerOptions.\nExamples:\n\"--foo bar\"\n[\"--foo bar\", \"-f b\"]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#cpus",
    "href": "reference/config/platforms/nextflow/directives.html#cpus",
    "title": "Nextflow Directives",
    "section": "cpus",
    "text": "cpus\nType: Either   - Int   - String\nDefault: Empty\nThe cpus directive allows you to define the number of (logical) CPU required by the process’ task.\nSee cpus.\nExamples:\n1\n10"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#disk",
    "href": "reference/config/platforms/nextflow/directives.html#disk",
    "title": "Nextflow Directives",
    "section": "disk",
    "text": "disk\nType: String\nDefault: Empty\nThe disk directive allows you to define how much local disk storage the process is allowed to use.\nSee disk.\nExamples:\n\"1 GB\"\n\"2TB\"\n\"3.2KB\"\n\"10.B\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#echo",
    "href": "reference/config/platforms/nextflow/directives.html#echo",
    "title": "Nextflow Directives",
    "section": "echo",
    "text": "echo\nType: Either   - Boolean   - String\nDefault: Empty\nBy default the stdout produced by the commands executed in all processes is ignored. By setting the echo directive to true, you can forward the process stdout to the current top running process stdout file, showing it in the shell terminal.\nSee echo.\nExamples:\ntrue\nfalse"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#errorstrategy",
    "href": "reference/config/platforms/nextflow/directives.html#errorstrategy",
    "title": "Nextflow Directives",
    "section": "errorStrategy",
    "text": "errorStrategy\nType: String\nDefault: Empty\nThe errorStrategy directive allows you to define how an error condition is managed by the process. By default when an error status is returned by the executed script, the process stops immediately. This in turn forces the entire pipeline to terminate.\nTable of available error strategies: | Name | Executor | |——|———-| | terminate | Terminates the execution as soon as an error condition is reported. Pending jobs are killed (default) | | finish | Initiates an orderly pipeline shutdown when an error condition is raised, waiting the completion of any submitted job. | | ignore | Ignores processes execution errors. | | retry | Re-submit for execution a process returning an error condition. |\nSee errorStrategy.\nExamples:\n\"terminate\"\n\"finish\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#executor",
    "href": "reference/config/platforms/nextflow/directives.html#executor",
    "title": "Nextflow Directives",
    "section": "executor",
    "text": "executor\nType: String\nDefault: Empty\nThe executor defines the underlying system where processes are executed. By default a process uses the executor defined globally in the nextflow.config file.\nThe executor directive allows you to configure what executor has to be used by the process, overriding the default configuration. The following values can be used:\n\n\n\n\n\n\n\nName\nExecutor\n\n\n\n\nawsbatch\nThe process is executed using the AWS Batch service.\n\n\nazurebatch\nThe process is executed using the Azure Batch service.\n\n\ncondor\nThe process is executed using the HTCondor job scheduler.\n\n\ngoogle-lifesciences\nThe process is executed using the Google Genomics Pipelines service.\n\n\nignite\nThe process is executed using the Apache Ignite cluster.\n\n\nk8s\nThe process is executed using the Kubernetes cluster.\n\n\nlocal\nThe process is executed in the computer where Nextflow is launched.\n\n\nlsf\nThe process is executed using the Platform LSF job scheduler.\n\n\nmoab\nThe process is executed using the Moab job scheduler.\n\n\nnqsii\nThe process is executed using the NQSII job scheduler.\n\n\noge\nAlias for the sge executor.\n\n\npbs\nThe process is executed using the PBS/Torque job scheduler.\n\n\npbspro\nThe process is executed using the PBS Pro job scheduler.\n\n\nsge\nThe process is executed using the Sun Grid Engine / Open Grid Engine.\n\n\nslurm\nThe process is executed using the SLURM job scheduler.\n\n\ntes\nThe process is executed using the GA4GH TES service.\n\n\nuge\nAlias for the sge executor.\n\n\n\nSee executor.\nExamples:\n\"local\"\n\"sge\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#label",
    "href": "reference/config/platforms/nextflow/directives.html#label",
    "title": "Nextflow Directives",
    "section": "label",
    "text": "label\nType: String / List of String\nDefault: Empty\nThe label directive allows the annotation of processes with mnemonic identifier of your choice.\nSee label.\nExamples:\n\"big_mem\"\n\"big_cpu\"\n[\"big_mem\", \"big_cpu\"]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#machinetype",
    "href": "reference/config/platforms/nextflow/directives.html#machinetype",
    "title": "Nextflow Directives",
    "section": "machineType",
    "text": "machineType\nType: String\nDefault: Empty\nThe machineType can be used to specify a predefined Google Compute Platform machine type when running using the Google Life Sciences executor.\nSee machineType.\nExample:\n\"n1-highmem-8\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#maxerrors",
    "href": "reference/config/platforms/nextflow/directives.html#maxerrors",
    "title": "Nextflow Directives",
    "section": "maxErrors",
    "text": "maxErrors\nType: Either   - String   - Int\nDefault: Empty\nThe maxErrors directive allows you to specify the maximum number of times a process can fail when using the retry error strategy. By default this directive is disabled.\nSee maxErrors.\nExamples:\n1\n3"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#maxforks",
    "href": "reference/config/platforms/nextflow/directives.html#maxforks",
    "title": "Nextflow Directives",
    "section": "maxForks",
    "text": "maxForks\nType: Either   - String   - Int\nDefault: Empty\nThe maxForks directive allows you to define the maximum number of process instances that can be executed in parallel. By default this value is equals to the number of CPU cores available minus 1.\nIf you want to execute a process in a sequential manner, set this directive to one.\nSee maxForks.\nExamples:\n1\n3"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#maxretries",
    "href": "reference/config/platforms/nextflow/directives.html#maxretries",
    "title": "Nextflow Directives",
    "section": "maxRetries",
    "text": "maxRetries\nType: Either   - String   - Int\nDefault: Empty\nThe maxRetries directive allows you to define the maximum number of times a process instance can be re-submitted in case of failure. This value is applied only when using the retry error strategy. By default only one retry is allowed.\nSee maxRetries.\nExamples:\n1\n3"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#memory",
    "href": "reference/config/platforms/nextflow/directives.html#memory",
    "title": "Nextflow Directives",
    "section": "memory",
    "text": "memory\nType: String\nDefault: Empty\nThe memory directive allows you to define how much memory the process is allowed to use.\nSee memory.\nExamples:\n\"1 GB\"\n\"2TB\"\n\"3.2KB\"\n\"10.B\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#module",
    "href": "reference/config/platforms/nextflow/directives.html#module",
    "title": "Nextflow Directives",
    "section": "module",
    "text": "module\nType: String / List of String\nDefault: Empty\nEnvironment Modules is a package manager that allows you to dynamically configure your execution environment and easily switch between multiple versions of the same software tool.\nIf it is available in your system you can use it with Nextflow in order to configure the processes execution environment in your pipeline.\nIn a process definition you can use the module directive to load a specific module version to be used in the process execution environment.\nSee module.\nExamples:\n\"ncbi-blast/2.2.27\"\n\"ncbi-blast/2.2.27:t_coffee/10.0\"\n[\"ncbi-blast/2.2.27\", \"t_coffee/10.0\"]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#penv",
    "href": "reference/config/platforms/nextflow/directives.html#penv",
    "title": "Nextflow Directives",
    "section": "penv",
    "text": "penv\nType: String\nDefault: Empty\nThe penv directive allows you to define the parallel environment to be used when submitting a parallel task to the SGE resource manager.\nSee penv.\nExample:\n\"smp\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#pod",
    "href": "reference/config/platforms/nextflow/directives.html#pod",
    "title": "Nextflow Directives",
    "section": "pod",
    "text": "pod\nType: Map of String to String / List of Map of String to String\nDefault: Empty\nThe pod directive allows the definition of pods specific settings, such as environment variables, secrets and config maps when using the Kubernetes executor.\nSee pod.\nExamples:\n[ label: \"key\", value: \"val\" ]\n[ annotation: \"key\", value: \"val\" ]\n[ env: \"key\", value: \"val\" ]\n[ [label: \"l\", value: \"v\"], [env: \"e\", value: \"v\"]]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#publishdir",
    "href": "reference/config/platforms/nextflow/directives.html#publishdir",
    "title": "Nextflow Directives",
    "section": "publishDir",
    "text": "publishDir\nType: Either   - String   - Map of String to String / List of Either   - String   - Map of String to String\nDefault: Empty\nThe publishDir directive allows you to publish the process output files to a specified folder.\nViash implements this directive as a plain string or a map. The allowed keywords for the map are: path, mode, overwrite, pattern, saveAs, enabled. The path key and value are required. The allowed values for mode are: symlink, rellink, link, copy, copyNoFollow, move.\nSee publishDir.\nExamples:\n[]\n[ [ path: \"foo\", enabled: true ], [ path: \"bar\", enabled: false ] ]\nThis is transformed to [[ path: \"/path/to/dir\" ]]:\n\"/path/to/dir\"\nThis is transformed to [[ path: \"/path/to/dir\", mode: \"cache\" ]]:\n[ path: \"/path/to/dir\", mode: \"cache\" ]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#queue",
    "href": "reference/config/platforms/nextflow/directives.html#queue",
    "title": "Nextflow Directives",
    "section": "queue",
    "text": "queue\nType: String / List of String\nDefault: Empty\nThe queue directory allows you to set the queue where jobs are scheduled when using a grid based executor in your pipeline.\nSee queue.\nExamples:\n\"long\"\n\"short,long\"\n[\"short\", \"long\"]"
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#scratch",
    "href": "reference/config/platforms/nextflow/directives.html#scratch",
    "title": "Nextflow Directives",
    "section": "scratch",
    "text": "scratch\nType: Either   - Boolean   - String\nDefault: Empty\nThe scratch directive allows you to execute the process in a temporary folder that is local to the execution node.\nSee scratch.\nExamples:\ntrue\n\"/path/to/scratch\"\n'$MY_PATH_TO_SCRATCH'\n\"ram-disk\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#stageinmode",
    "href": "reference/config/platforms/nextflow/directives.html#stageinmode",
    "title": "Nextflow Directives",
    "section": "stageInMode",
    "text": "stageInMode\nType: String\nDefault: Empty\nThe stageInMode directive defines how input files are staged-in to the process work directory. The following values are allowed:\n\n\n\n\n\n\n\nValue\nDescription\n\n\n\n\ncopy\nInput files are staged in the process work directory by creating a copy.\n\n\nlink\nInput files are staged in the process work directory by creating an (hard) link for each of them.\n\n\nsymlink\nInput files are staged in the process work directory by creating a symbolic link with an absolute path for each of them (default).\n\n\nrellink\nInput files are staged in the process work directory by creating a symbolic link with a relative path for each of them.\n\n\n\nSee stageInMode.\nExamples:\n\"copy\"\n\"link\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#stageoutmode",
    "href": "reference/config/platforms/nextflow/directives.html#stageoutmode",
    "title": "Nextflow Directives",
    "section": "stageOutMode",
    "text": "stageOutMode\nType: String\nDefault: Empty\nThe stageOutMode directive defines how output files are staged-out from the scratch directory to the process work directory. The following values are allowed:\n\n\n\n\n\n\n\nValue\nDescription\n\n\n\n\ncopy\nOutput files are copied from the scratch directory to the work directory.\n\n\nmove\nOutput files are moved from the scratch directory to the work directory.\n\n\nrsync\nOutput files are copied from the scratch directory to the work directory by using the rsync utility.\n\n\n\nSee stageOutMode.\nExamples:\n\"copy\"\n\"link\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#storedir",
    "href": "reference/config/platforms/nextflow/directives.html#storedir",
    "title": "Nextflow Directives",
    "section": "storeDir",
    "text": "storeDir\nType: String\nDefault: Empty\nThe storeDir directive allows you to define a directory that is used as a permanent cache for your process results.\nSee storeDir.\nExample:\n\"/path/to/storeDir\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#tag",
    "href": "reference/config/platforms/nextflow/directives.html#tag",
    "title": "Nextflow Directives",
    "section": "tag",
    "text": "tag\nType: String\nDefault: '$id'\nThe tag directive allows you to associate each process execution with a custom label, so that it will be easier to identify them in the log file or in the trace execution report.\nFor ease of use, the default tag is set to \"$id\", which allows tracking the progression of the channel events through the workflow more easily.\nSee tag.\nExample:\n\"foo\""
  },
  {
    "objectID": "reference/config/platforms/nextflow/directives.html#time",
    "href": "reference/config/platforms/nextflow/directives.html#time",
    "title": "Nextflow Directives",
    "section": "time",
    "text": "time\nType: String\nDefault: Empty\nThe time directive allows you to define how long a process is allowed to run.\nSee time.\nExamples:\n\"1h\"\n\"2days\"\n\"1day 6hours 3minutes 30seconds\""
  },
  {
    "objectID": "reference/config/platforms/docker/index.html",
    "href": "reference/config/platforms/docker/index.html",
    "title": "Docker Platform",
    "section": "",
    "text": "Run a Viash component on a Docker backend platform. By specifying which dependencies your component needs, users will be able to build a docker container from scratch using the setup flag, or pull it from a docker repository.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#chown",
    "href": "reference/config/platforms/docker/index.html#chown",
    "title": "Docker Platform",
    "section": "chown",
    "text": "chown\nType: Boolean\nDefault: True\nIn Linux, files created by a Docker container will be owned by root. With chown: true, Viash will automatically change the ownership of output files (arguments with type: file and direction: output) to the user running the Viash command after execution of the component. Default value: true.\nExample:\nchown: false"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#cmd",
    "href": "reference/config/platforms/docker/index.html#cmd",
    "title": "Docker Platform",
    "section": "cmd",
    "text": "cmd\nType: Either   - String   - List of String\nDefault: Empty\nSet the default command being executed when running the Docker container.\nExamples:\nSet CMD using the exec format, which is the prefered form.\ncmd: [\"echo\", \"$HOME\"]\nSet CMD using the shell format.\ncmd: \"echo $HOME\""
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#entrypoint",
    "href": "reference/config/platforms/docker/index.html#entrypoint",
    "title": "Docker Platform",
    "section": "entrypoint",
    "text": "entrypoint\nType: Either   - String   - List of String\nDefault: []\nOverride the entrypoint of the base container. Default set ENTRYPOINT [].\nExamples:\nDisable the default override.\nentrypoint: \nEntrypoint of the container in the exec format, which is the prefered form.\nentrypoint: [\"top\", \"-b\"]\nEntrypoint of the container in the shell format.\nentrypoint: \"top -b\""
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#id",
    "href": "reference/config/platforms/docker/index.html#id",
    "title": "Docker Platform",
    "section": "id",
    "text": "id\nType: String\nDefault: docker\nAs with all platforms, you can give a platform a different name. By specifying id: foo, you can target this platform (only) by specifying -p foo in any of the Viash commands.\nExample:\nid: foo"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#image",
    "href": "reference/config/platforms/docker/index.html#image",
    "title": "Docker Platform",
    "section": "image",
    "text": "image\nType: String\nThe base container to start from. You can also add the tag here if you wish.\nExample:\nimage: \"bash:4.0\""
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#namespace_separator",
    "href": "reference/config/platforms/docker/index.html#namespace_separator",
    "title": "Docker Platform",
    "section": "namespace_separator",
    "text": "namespace_separator\nType: String\nDefault: /\nThe separator between the namespace and the name of the component, used for determining the image name. Default: \"/\".\nExample:\nnamespace_separator: \"_\""
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#organization",
    "href": "reference/config/platforms/docker/index.html#organization",
    "title": "Docker Platform",
    "section": "organization",
    "text": "organization\nType: String\nDefault: Empty\nName of a container’s organization."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#port",
    "href": "reference/config/platforms/docker/index.html#port",
    "title": "Docker Platform",
    "section": "port",
    "text": "port\nType: String / List of String\nDefault: Empty\nA list of enabled ports. This doesn’t change the Dockerfile but gets added as a command-line argument at runtime.\nExample:\nport:\n  - 80\n  - 8080"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#registry",
    "href": "reference/config/platforms/docker/index.html#registry",
    "title": "Docker Platform",
    "section": "registry",
    "text": "registry\nType: String\nDefault: Empty\nThe URL to the a custom Docker registry\nExample:\nregistry: https://my-docker-registry.org"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#resolve_volume",
    "href": "reference/config/platforms/docker/index.html#resolve_volume",
    "title": "Docker Platform",
    "section": "resolve_volume",
    "text": "resolve_volume\nType: DockerResolveVolume\nDefault: Automatic\nEnables or disables automatic volume mapping. Enabled when set to Automatic or disabled when set to Manual. Default: Automatic."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#run_args",
    "href": "reference/config/platforms/docker/index.html#run_args",
    "title": "Docker Platform",
    "section": "run_args",
    "text": "run_args\nType: String / List of String\nDefault: Empty\nAdd docker run arguments."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#setup",
    "href": "reference/config/platforms/docker/index.html#setup",
    "title": "Docker Platform",
    "section": "setup",
    "text": "setup\nType: List of Requirements\nDefault: Empty\nA list of requirements for installing the following types of packages:\n\napt\napk\nDocker setup instructions\nJavaScript\nPython\nR\nRuby\nyum\n\nThe order in which these dependencies are specified determines the order in which they will be installed."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#setup_strategy",
    "href": "reference/config/platforms/docker/index.html#setup_strategy",
    "title": "Docker Platform",
    "section": "setup_strategy",
    "text": "setup_strategy\nType: DockerSetupStrategy\nDefault: ifneedbepullelsecachedbuild\nThe Docker setup strategy to use when building a container.\n\n\n\nStrategy\nDescription\n\n\n\n\nalwaysbuild / build / b\nAlways build the image from the dockerfile. This is the default setup strategy.\n\n\nalwayscachedbuild / cachedbuild / cb\nAlways build the image from the dockerfile, with caching enabled.\n\n\nifneedbebuild\nBuild the image if it does not exist locally.\n\n\nifneedbecachedbuild\nBuild the image with caching enabled if it does not exist locally, with caching enabled.\n\n\nalwayspull / pull / p\nTry to pull the container from Docker Hub or the specified docker registry.\n\n\nalwayspullelsebuild / pullelsebuild\nTry to pull the image from a registry and build it if it doesn’t exist.\n\n\nalwayspullelsecachedbuild / pullelsecachedbuild\nTry to pull the image from a registry and build it with caching if it doesn’t exist.\n\n\nifneedbepull\nIf the image does not exist locally, pull the image.\n\n\nifneedbepullelsebuild\nIf the image does not exist locally, pull the image. If the image does exist, build it.\n\n\nifneedbepullelsecachedbuild\nIf the image does not exist locally, pull the image. If the image does exist, build it with caching enabled.\n\n\npush\nPush the container to Docker Hub or the specified docker registry.\n\n\npushifnotpresent\nPush the container to Docker Hub or the specified docker registry if the tag does not exist yet.\n\n\ndonothing / meh\nDo not build or pull anything.\n\n\n\nExample:\nsetup_strategy: alwaysbuild"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#tag",
    "href": "reference/config/platforms/docker/index.html#tag",
    "title": "Docker Platform",
    "section": "tag",
    "text": "tag\nType: String\nDefault: Empty\nSpecify a Docker image based on its tag.\nExample:\ntag: 4.0"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#target_image",
    "href": "reference/config/platforms/docker/index.html#target_image",
    "title": "Docker Platform",
    "section": "target_image",
    "text": "target_image\nType: String\nDefault: Empty\nIf anything is specified in the setup section, running the ---setup will result in an image with the name of &lt;target_image&gt;:&lt;version&gt;. If nothing is specified in the setup section, simply image will be used. Advanced usage only.\nExample:\ntarget_image: myfoo"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#target_image_source",
    "href": "reference/config/platforms/docker/index.html#target_image_source",
    "title": "Docker Platform",
    "section": "target_image_source",
    "text": "target_image_source\nType: String\nDefault: Empty\nThe source of the target image. This is used for defining labels in the dockerfile.\nExample:\ntarget_image_source: https://github.com/foo/bar"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#target_organization",
    "href": "reference/config/platforms/docker/index.html#target_organization",
    "title": "Docker Platform",
    "section": "target_organization",
    "text": "target_organization\nType: String\nDefault: Empty\nThe organization set in the resulting image. Advanced usage only.\nExample:\ntarget_organization: viash-io"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#target_registry",
    "href": "reference/config/platforms/docker/index.html#target_registry",
    "title": "Docker Platform",
    "section": "target_registry",
    "text": "target_registry\nType: String\nDefault: Empty\nThe URL where the resulting image will be pushed to. Advanced usage only.\nExample:\ntarget_registry: https://my-docker-registry.org"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#target_tag",
    "href": "reference/config/platforms/docker/index.html#target_tag",
    "title": "Docker Platform",
    "section": "target_tag",
    "text": "target_tag\nType: String\nDefault: Empty\nThe tag the resulting image gets. Advanced usage only.\nExample:\ntarget_tag: 0.5.0"
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#test_setup",
    "href": "reference/config/platforms/docker/index.html#test_setup",
    "title": "Docker Platform",
    "section": "test_setup",
    "text": "test_setup\nType: List of Requirements\nDefault: Empty\nAdditional requirements specific for running unit tests."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#type",
    "href": "reference/config/platforms/docker/index.html#type",
    "title": "Docker Platform",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the platform."
  },
  {
    "objectID": "reference/config/platforms/docker/index.html#workdir",
    "href": "reference/config/platforms/docker/index.html#workdir",
    "title": "Docker Platform",
    "section": "workdir",
    "text": "workdir\nType: String\nDefault: Empty\nThe working directory when starting the container. This doesn’t change the Dockerfile but gets added as a command-line argument at runtime.\nExample:\nworkdir: /home/user"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html",
    "title": "JavaScript Requirements",
    "section": "",
    "text": "Specify which JavaScript packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#git",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#git",
    "title": "JavaScript Requirements",
    "section": "git",
    "text": "git\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install using a Git URI.\nExample:\ngit: [ https://some.git.repository/org/repo ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#github",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#github",
    "title": "JavaScript Requirements",
    "section": "github",
    "text": "github\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from GitHub.\nExample:\ngithub: [ owner/repository ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#npm",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#npm",
    "title": "JavaScript Requirements",
    "section": "npm",
    "text": "npm\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from npm.\nExample:\nnpm: [ packagename ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#packages",
    "title": "JavaScript Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from npm.\nExample:\npackages: [ packagename ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#type",
    "title": "JavaScript Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/javascriptRequirements.html#url",
    "href": "reference/config/platforms/docker/setup/javascriptRequirements.html#url",
    "title": "JavaScript Requirements",
    "section": "url",
    "text": "url\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install using a generic URI.\nExample:\nurl: [ https://github.com/org/repo/archive/HEAD.zip ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html",
    "title": "Python Requirements",
    "section": "",
    "text": "Specify which Python packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#bazaar",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#bazaar",
    "title": "Python Requirements",
    "section": "bazaar",
    "text": "bazaar\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install using a Bazaar URI.\nExample:\nbazaar: [ http://bazaar.launchpad.net/some_pkg/some_pkg/release-0.1 ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#git",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#git",
    "title": "Python Requirements",
    "section": "git",
    "text": "git\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install using a Git URI.\nExample:\ngit: [ https://some.git.repository/org/repo ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#github",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#github",
    "title": "Python Requirements",
    "section": "github",
    "text": "github\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from GitHub.\nExample:\ngithub: [ jkbr/httpie ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#gitlab",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#gitlab",
    "title": "Python Requirements",
    "section": "gitlab",
    "text": "gitlab\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from GitLab.\nExample:\ngitlab: [ foo/bar ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#mercurial",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#mercurial",
    "title": "Python Requirements",
    "section": "mercurial",
    "text": "mercurial\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install using a Mercurial URI.\nExample:\nmercurial: [ https://hg.myproject.org/MyProject/#egg=MyProject ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#packages",
    "title": "Python Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from pip.\nExample:\npackages: [ numpy ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#pip",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#pip",
    "title": "Python Requirements",
    "section": "pip",
    "text": "pip\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from pip.\nExample:\npip: [ numpy ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#pypi",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#pypi",
    "title": "Python Requirements",
    "section": "pypi",
    "text": "pypi\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from PyPI using pip.\nExample:\npypi: [ numpy ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#script",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#script",
    "title": "Python Requirements",
    "section": "script",
    "text": "script\nType: String / List of String\nDefault: Empty\nSpecifies a code block to run as part of the build.\nExample:\nscript: |\n  print(\"Running custom code\")\n  x = 1 + 1 == 2"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#svn",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#svn",
    "title": "Python Requirements",
    "section": "svn",
    "text": "svn\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install using an SVN URI.\nExample:\nsvn: [ http://svn.repo/some_pkg/trunk/#egg=SomePackage ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#type",
    "title": "Python Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#upgrade",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#upgrade",
    "title": "Python Requirements",
    "section": "upgrade",
    "text": "upgrade\nType: Boolean\nDefault: True\nSets the --upgrade flag when set to true. Default: true."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#url",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#url",
    "title": "Python Requirements",
    "section": "url",
    "text": "url\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install using a generic URI.\nExample:\nurl: [ https://github.com/some_org/some_pkg/zipball/master ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/pythonRequirements.html#user",
    "href": "reference/config/platforms/docker/setup/pythonRequirements.html#user",
    "title": "Python Requirements",
    "section": "user",
    "text": "user\nType: Boolean\nDefault: False\nSets the --user flag when set to true. Default: false."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/yumRequirements.html",
    "href": "reference/config/platforms/docker/setup/yumRequirements.html",
    "title": "Yum Requirements",
    "section": "",
    "text": "Specify which yum packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/yumRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/yumRequirements.html#packages",
    "title": "Yum Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install.\nExample:\npackages: [ sl ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/yumRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/yumRequirements.html#type",
    "title": "Yum Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html",
    "href": "reference/config/platforms/docker/setup/rRequirements.html",
    "title": "R Requirements",
    "section": "",
    "text": "Specify which R packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#bioc",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#bioc",
    "title": "R Requirements",
    "section": "bioc",
    "text": "bioc\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from BioConductor.\nExample:\nbioc: [ AnnotationDbi ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#bioc_force_install",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#bioc_force_install",
    "title": "R Requirements",
    "section": "bioc_force_install",
    "text": "bioc_force_install\nType: Boolean\nDefault: False\nForces packages specified in bioc to be reinstalled, even if they are already present in the container. Default: false.\nExample:\nbioc_force_install: false"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#bitbucket",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#bitbucket",
    "title": "R Requirements",
    "section": "bitbucket",
    "text": "bitbucket\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from Bitbucket.\nExample:\nbitbucket: [ org/package ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#cran",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#cran",
    "title": "R Requirements",
    "section": "cran",
    "text": "cran\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from CRAN.\nExample:\ncran: [ anndata, ggplot2 ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#git",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#git",
    "title": "R Requirements",
    "section": "git",
    "text": "git\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install using a Git URI.\nExample:\ngit: [ https://some.git.repository/org/repo ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#github",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#github",
    "title": "R Requirements",
    "section": "github",
    "text": "github\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from GitHub.\nExample:\ngithub: [ rcannood/SCORPIUS ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#gitlab",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#gitlab",
    "title": "R Requirements",
    "section": "gitlab",
    "text": "gitlab\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from GitLab.\nExample:\ngitlab: [ org/package ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#packages",
    "title": "R Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install from CRAN.\nExample:\npackages: [ anndata, ggplot2 ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#script",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#script",
    "title": "R Requirements",
    "section": "script",
    "text": "script\nType: String / List of String\nDefault: Empty\nSpecifies a code block to run as part of the build.\nExample:\nscript: |\n  cat(\"Running custom code\n\")\n  install.packages(\"anndata\")"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#svn",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#svn",
    "title": "R Requirements",
    "section": "svn",
    "text": "svn\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install using an SVN URI.\nExample:\nsvn: [ https://path.to.svn/group/repo ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#type",
    "title": "R Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rRequirements.html#url",
    "href": "reference/config/platforms/docker/setup/rRequirements.html#url",
    "title": "R Requirements",
    "section": "url",
    "text": "url\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install using a generic URI.\nExample:\nurl: [ https://github.com/hadley/stringr/archive/HEAD.zip ]"
  },
  {
    "objectID": "reference/config/platforms/native/index.html",
    "href": "reference/config/platforms/native/index.html",
    "title": "Native Platform",
    "section": "",
    "text": "Running a Viash component on a native platform means that the script will be executed in your current environment. Any dependencies are assumed to have been installed by the user, so the native platform is meant for developers (who know what they’re doing) or for simple bash scripts (which have no extra dependencies).\nExample:"
  },
  {
    "objectID": "reference/config/platforms/native/index.html#id",
    "href": "reference/config/platforms/native/index.html#id",
    "title": "Native Platform",
    "section": "id",
    "text": "id\nType: String\nDefault: native\nAs with all platforms, you can give a platform a different name. By specifying id: foo, you can target this platform (only) by specifying -p foo in any of the Viash commands.\nExample:\nid: foo"
  },
  {
    "objectID": "reference/config/platforms/native/index.html#type",
    "href": "reference/config/platforms/native/index.html#type",
    "title": "Native Platform",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the platform."
  },
  {
    "objectID": "reference/config/functionality/argumentGroup.html",
    "href": "reference/config/functionality/argumentGroup.html",
    "title": "Argument Group",
    "section": "",
    "text": "A grouping of the arguments, used to display the help message."
  },
  {
    "objectID": "reference/config/functionality/argumentGroup.html#arguments",
    "href": "reference/config/functionality/argumentGroup.html#arguments",
    "title": "Argument Group",
    "section": "arguments",
    "text": "arguments\nType: List of Argument\nList of arguments."
  },
  {
    "objectID": "reference/config/functionality/argumentGroup.html#description",
    "href": "reference/config/functionality/argumentGroup.html#description",
    "title": "Argument Group",
    "section": "description",
    "text": "description\nType: String\nDefault: Empty\nDescription of foo`, a description of the argument group. Multiline descriptions are supported."
  },
  {
    "objectID": "reference/config/functionality/argumentGroup.html#name",
    "href": "reference/config/functionality/argumentGroup.html#name",
    "title": "Argument Group",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument group."
  },
  {
    "objectID": "reference/config/functionality/author.html",
    "href": "reference/config/functionality/author.html",
    "title": "Author",
    "section": "",
    "text": "Author metadata.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/author.html#email",
    "href": "reference/config/functionality/author.html#email",
    "title": "Author",
    "section": "email",
    "text": "email\nType: String\nDefault: Empty\nE-mail of the author."
  },
  {
    "objectID": "reference/config/functionality/author.html#info",
    "href": "reference/config/functionality/author.html#info",
    "title": "Author",
    "section": "info",
    "text": "info\nType: Json\nDefault: Empty\nStructured information. Can be any shape: a string, vector, map or even nested map."
  },
  {
    "objectID": "reference/config/functionality/author.html#name",
    "href": "reference/config/functionality/author.html#name",
    "title": "Author",
    "section": "name",
    "text": "name\nType: String\nFull name of the author, usually in the name of FirstName MiddleName LastName."
  },
  {
    "objectID": "reference/config/functionality/author.html#props",
    "href": "reference/config/functionality/author.html#props",
    "title": "Author",
    "section": "props",
    "text": "props\nType: Map of String to String\nDefault: Empty\n\n\n\n\n\n\nWarning\n\n\n\nDeprecated since 0.7.4. Removed since 0.8.0. Use info instead.\n\n\nAuthor properties. Must be a map of strings."
  },
  {
    "objectID": "reference/config/functionality/author.html#roles",
    "href": "reference/config/functionality/author.html#roles",
    "title": "Author",
    "section": "roles",
    "text": "roles\nType: String / List of String\nDefault: Empty\nRole of the author. Suggested items:\n\n\"author\": Authors who have made substantial contributions to the component.\n\"maintainer\": The maintainer of the component.\n\"contributor\": Authors who have made smaller contributions (such as code patches etc.)."
  },
  {
    "objectID": "reference/config/functionality/resources/index.html",
    "href": "reference/config/functionality/resources/index.html",
    "title": "Resource",
    "section": "",
    "text": "Resources are files that support the component. The first resource should be a script that will be executed when the functionality is run. Additional resources will be copied to the same directory.\nCommon properties:\n\ntype: file / r_script / python_script / bash_script / javascript_script / scala_script / csharp_script, specifies the type of the resource. The first resource cannot be of type file. When the type is not specified, the default type is simply file.\ndest: filename, the resulting name of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter.\npath: path/to/file, the path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text.\ntext: …multiline text…, the content of the resulting file specified as a string. Mutually exclusive with path.\nis_executable: true / false, whether the resulting resource file should be made executable.\n\nExample:\nresources:\n  - type: r_script\n    path: script.R\n  - type: file\n    path: resource1.txt"
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html",
    "href": "reference/config/functionality/resources/scalaScript.html",
    "title": "Scala Script",
    "section": "",
    "text": "An executable Scala script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html#dest",
    "href": "reference/config/functionality/resources/scalaScript.html#dest",
    "title": "Scala Script",
    "section": "dest",
    "text": "dest\nType: String\nDefault: Empty\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html#is_executable",
    "href": "reference/config/functionality/resources/scalaScript.html#is_executable",
    "title": "Scala Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nDefault: Empty\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html#path",
    "href": "reference/config/functionality/resources/scalaScript.html#path",
    "title": "Scala Script",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html#text",
    "href": "reference/config/functionality/resources/scalaScript.html#text",
    "title": "Scala Script",
    "section": "text",
    "text": "text\nType: String\nDefault: Empty\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/scalaScript.html#type",
    "href": "reference/config/functionality/resources/scalaScript.html#type",
    "title": "Scala Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a Scala script."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html",
    "href": "reference/config/functionality/resources/pythonScript.html",
    "title": "Python Script",
    "section": "",
    "text": "An executable Python script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html#dest",
    "href": "reference/config/functionality/resources/pythonScript.html#dest",
    "title": "Python Script",
    "section": "dest",
    "text": "dest\nType: String\nDefault: Empty\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html#is_executable",
    "href": "reference/config/functionality/resources/pythonScript.html#is_executable",
    "title": "Python Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nDefault: Empty\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html#path",
    "href": "reference/config/functionality/resources/pythonScript.html#path",
    "title": "Python Script",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html#text",
    "href": "reference/config/functionality/resources/pythonScript.html#text",
    "title": "Python Script",
    "section": "text",
    "text": "text\nType: String\nDefault: Empty\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/pythonScript.html#type",
    "href": "reference/config/functionality/resources/pythonScript.html#type",
    "title": "Python Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a Python script."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html",
    "href": "reference/config/functionality/resources/cSharpScript.html",
    "title": "C# Script",
    "section": "",
    "text": "An executable C# script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html#dest",
    "href": "reference/config/functionality/resources/cSharpScript.html#dest",
    "title": "C# Script",
    "section": "dest",
    "text": "dest\nType: String\nDefault: Empty\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html#is_executable",
    "href": "reference/config/functionality/resources/cSharpScript.html#is_executable",
    "title": "C# Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nDefault: Empty\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html#path",
    "href": "reference/config/functionality/resources/cSharpScript.html#path",
    "title": "C# Script",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html#text",
    "href": "reference/config/functionality/resources/cSharpScript.html#text",
    "title": "C# Script",
    "section": "text",
    "text": "text\nType: String\nDefault: Empty\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/cSharpScript.html#type",
    "href": "reference/config/functionality/resources/cSharpScript.html#type",
    "title": "C# Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a C# script."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html",
    "href": "reference/config/functionality/resources/javaScriptScript.html",
    "title": "JavaScript Script",
    "section": "",
    "text": "An executable JavaScript script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html#dest",
    "href": "reference/config/functionality/resources/javaScriptScript.html#dest",
    "title": "JavaScript Script",
    "section": "dest",
    "text": "dest\nType: String\nDefault: Empty\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html#is_executable",
    "href": "reference/config/functionality/resources/javaScriptScript.html#is_executable",
    "title": "JavaScript Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nDefault: Empty\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html#path",
    "href": "reference/config/functionality/resources/javaScriptScript.html#path",
    "title": "JavaScript Script",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html#text",
    "href": "reference/config/functionality/resources/javaScriptScript.html#text",
    "title": "JavaScript Script",
    "section": "text",
    "text": "text\nType: String\nDefault: Empty\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/javaScriptScript.html#type",
    "href": "reference/config/functionality/resources/javaScriptScript.html#type",
    "title": "JavaScript Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a JavaScript script."
  },
  {
    "objectID": "reference/config/functionality/dependencies/viashhubRepository.html",
    "href": "reference/config/functionality/dependencies/viashhubRepository.html",
    "title": "Viashhub Repository",
    "section": "",
    "text": "A Viash-Hub repository where remote dependency components can be found.\nExamples:"
  },
  {
    "objectID": "reference/config/functionality/dependencies/viashhubRepository.html#name",
    "href": "reference/config/functionality/dependencies/viashhubRepository.html#name",
    "title": "Viashhub Repository",
    "section": "name",
    "text": "name\nType: String\nThe identifier used to refer to this repository from dependencies."
  },
  {
    "objectID": "reference/config/functionality/dependencies/viashhubRepository.html#path",
    "href": "reference/config/functionality/dependencies/viashhubRepository.html#path",
    "title": "Viashhub Repository",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nDefines a subfolder of the repository to use as base to look for the dependency components."
  },
  {
    "objectID": "reference/config/functionality/dependencies/viashhubRepository.html#repo",
    "href": "reference/config/functionality/dependencies/viashhubRepository.html#repo",
    "title": "Viashhub Repository",
    "section": "repo",
    "text": "repo\nType: String\nThe name of the Viash-Hub repository.\nExample:\nrepo: openpipelines-bio/openpipeline"
  },
  {
    "objectID": "reference/config/functionality/dependencies/viashhubRepository.html#tag",
    "href": "reference/config/functionality/dependencies/viashhubRepository.html#tag",
    "title": "Viashhub Repository",
    "section": "tag",
    "text": "tag\nType: String\nDefault: Empty\nDefines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash."
  },
  {
    "objectID": "reference/config/functionality/dependencies/viashhubRepository.html#type",
    "href": "reference/config/functionality/dependencies/viashhubRepository.html#type",
    "title": "Viashhub Repository",
    "section": "type",
    "text": "type\nType: String\nDefines the repository as a Viash-Hub repository."
  },
  {
    "objectID": "reference/config/functionality/dependencies/githubRepository.html",
    "href": "reference/config/functionality/dependencies/githubRepository.html",
    "title": "Github Repository",
    "section": "",
    "text": "A GitHub repository where remote dependency components can be found.\nExamples:"
  },
  {
    "objectID": "reference/config/functionality/dependencies/githubRepository.html#name",
    "href": "reference/config/functionality/dependencies/githubRepository.html#name",
    "title": "Github Repository",
    "section": "name",
    "text": "name\nType: String\nThe identifier used to refer to this repository from dependencies."
  },
  {
    "objectID": "reference/config/functionality/dependencies/githubRepository.html#path",
    "href": "reference/config/functionality/dependencies/githubRepository.html#path",
    "title": "Github Repository",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nDefines a subfolder of the repository to use as base to look for the dependency components."
  },
  {
    "objectID": "reference/config/functionality/dependencies/githubRepository.html#repo",
    "href": "reference/config/functionality/dependencies/githubRepository.html#repo",
    "title": "Github Repository",
    "section": "repo",
    "text": "repo\nType: String\nThe name of the GitHub repository.\nExample:\nrepo: viash-io/viash"
  },
  {
    "objectID": "reference/config/functionality/dependencies/githubRepository.html#tag",
    "href": "reference/config/functionality/dependencies/githubRepository.html#tag",
    "title": "Github Repository",
    "section": "tag",
    "text": "tag\nType: String\nDefault: Empty\nDefines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash."
  },
  {
    "objectID": "reference/config/functionality/dependencies/githubRepository.html#type",
    "href": "reference/config/functionality/dependencies/githubRepository.html#type",
    "title": "Github Repository",
    "section": "type",
    "text": "type\nType: String\nDefines the repository as a GitHub repository."
  },
  {
    "objectID": "reference/config/functionality/dependencies/repository.html",
    "href": "reference/config/functionality/dependencies/repository.html",
    "title": "Repository",
    "section": "",
    "text": "Specifies a repository where dependency components can be found."
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html",
    "href": "reference/config/functionality/arguments/integer.html",
    "title": "Integer",
    "section": "",
    "text": "An integer type argument has a numeric value without decimal points.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#alternatives",
    "href": "reference/config/functionality/arguments/integer.html#alternatives",
    "title": "Integer",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nDefault: Empty\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#choices",
    "href": "reference/config/functionality/arguments/integer.html#choices",
    "title": "Integer",
    "section": "choices",
    "text": "choices\nType: List of Int\nDefault: Empty\nLimit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.\nExample:\n- name: --values\n  type: integer\n  choices: [1024, 2048, 4096]"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#default",
    "href": "reference/config/functionality/arguments/integer.html#default",
    "title": "Integer",
    "section": "default",
    "text": "default\nType: Int / List of Int\nDefault: Empty\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_integer\n  type: integer\n  default: 100"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#description",
    "href": "reference/config/functionality/arguments/integer.html#description",
    "title": "Integer",
    "section": "description",
    "text": "description\nType: String\nDefault: Empty\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#example",
    "href": "reference/config/functionality/arguments/integer.html#example",
    "title": "Integer",
    "section": "example",
    "text": "example\nType: Int / List of Int\nDefault: Empty\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_integer\n  type: integer\n  example: 100"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#info",
    "href": "reference/config/functionality/arguments/integer.html#info",
    "title": "Integer",
    "section": "info",
    "text": "info\nType: Json\nDefault: Empty\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#max",
    "href": "reference/config/functionality/arguments/integer.html#max",
    "title": "Integer",
    "section": "max",
    "text": "max\nType: Int\nDefault: Empty\nMaximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with min to clamp values.\nExample:\n- name: --my_integer\n  type: integer\n  max: 150"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#min",
    "href": "reference/config/functionality/arguments/integer.html#min",
    "title": "Integer",
    "section": "min",
    "text": "min\nType: Int\nDefault: Empty\nMinimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with max to clamp values.\nExample:\n- name: --my_integer\n  type: integer\n  min: 50"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#multiple",
    "href": "reference/config/functionality/arguments/integer.html#multiple",
    "title": "Integer",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nDefault: False\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_integer\n  type: integer\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_integer=10:80:152"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#multiple_sep",
    "href": "reference/config/functionality/arguments/integer.html#multiple_sep",
    "title": "Integer",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nDefault: :\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_integer\n  type: integer\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_integer=10:80:152"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#name",
    "href": "reference/config/functionality/arguments/integer.html#name",
    "title": "Integer",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#required",
    "href": "reference/config/functionality/arguments/integer.html#required",
    "title": "Integer",
    "section": "required",
    "text": "required\nType: Boolean\nDefault: False\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_integer\n  type: integer\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/integer.html#type",
    "href": "reference/config/functionality/arguments/integer.html#type",
    "title": "Integer",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html",
    "href": "reference/config/functionality/arguments/file.html",
    "title": "File",
    "section": "",
    "text": "A file type argument has a string value that points to a file or folder path.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#alternatives",
    "href": "reference/config/functionality/arguments/file.html#alternatives",
    "title": "File",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nDefault: Empty\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#create_parent",
    "href": "reference/config/functionality/arguments/file.html#create_parent",
    "title": "File",
    "section": "create_parent",
    "text": "create_parent\nType: Boolean\nDefault: True\nIf the output filename is a path and it does not exist, create it before executing the script (only for direction: output).\nExample:\n- name: --my_file\n  type: file\n  direction: output\n  create_parent: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#default",
    "href": "reference/config/functionality/arguments/file.html#default",
    "title": "File",
    "section": "default",
    "text": "default\nType: Path / List of Path\nDefault: Empty\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_file\n  type: file\n  default: data.csv"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#description",
    "href": "reference/config/functionality/arguments/file.html#description",
    "title": "File",
    "section": "description",
    "text": "description\nType: String\nDefault: Empty\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#direction",
    "href": "reference/config/functionality/arguments/file.html#direction",
    "title": "File",
    "section": "direction",
    "text": "direction\nType: Direction\nDefault: Input\nMakes this argument an input or an output, as in does the file/folder needs to be read or written. input by default.\nExample:\n- name: --my_output_file\n  type: file\n  direction: output"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#example",
    "href": "reference/config/functionality/arguments/file.html#example",
    "title": "File",
    "section": "example",
    "text": "example\nType: Path / List of Path\nDefault: Empty\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_file\n  type: file\n  example: data.csv"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#info",
    "href": "reference/config/functionality/arguments/file.html#info",
    "title": "File",
    "section": "info",
    "text": "info\nType: Json\nDefault: Empty\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#multiple",
    "href": "reference/config/functionality/arguments/file.html#multiple",
    "title": "File",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nDefault: False\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_files\n  type: file\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_files=firstFile.csv:anotherFile.csv:yetAnother.csv"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#multiple_sep",
    "href": "reference/config/functionality/arguments/file.html#multiple_sep",
    "title": "File",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nDefault: :\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_files\n  type: file\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_files=firstFile.csv,anotherFile.csv,yetAnother.csv"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#must_exist",
    "href": "reference/config/functionality/arguments/file.html#must_exist",
    "title": "File",
    "section": "must_exist",
    "text": "must_exist\nType: Boolean\nDefault: True\nChecks whether the file or folder exists. For input files, this check will happen before the execution of the script, while for output files the check will happen afterwards.\nExample:\n- name: --my_file\n  type: file\n  must_exist: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#name",
    "href": "reference/config/functionality/arguments/file.html#name",
    "title": "File",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#required",
    "href": "reference/config/functionality/arguments/file.html#required",
    "title": "File",
    "section": "required",
    "text": "required\nType: Boolean\nDefault: False\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_file\n  type: file\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/file.html#type",
    "href": "reference/config/functionality/arguments/file.html#type",
    "title": "File",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html",
    "href": "reference/config/functionality/arguments/string.html",
    "title": "String",
    "section": "",
    "text": "A string type argument has a value made up of an ordered sequences of characters, like “Hello” or “I’m a string”.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#alternatives",
    "href": "reference/config/functionality/arguments/string.html#alternatives",
    "title": "String",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nDefault: Empty\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#choices",
    "href": "reference/config/functionality/arguments/string.html#choices",
    "title": "String",
    "section": "choices",
    "text": "choices\nType: List of String\nDefault: Empty\nLimit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.\nExample:\n- name: --language\n  type: string\n  choices: [\"python\", \"r\", \"javascript\"]"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#default",
    "href": "reference/config/functionality/arguments/string.html#default",
    "title": "String",
    "section": "default",
    "text": "default\nType: String / List of String\nDefault: Empty\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_string\n  type: string\n  default: \"The answer is 42\""
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#description",
    "href": "reference/config/functionality/arguments/string.html#description",
    "title": "String",
    "section": "description",
    "text": "description\nType: String\nDefault: Empty\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#example",
    "href": "reference/config/functionality/arguments/string.html#example",
    "title": "String",
    "section": "example",
    "text": "example\nType: String / List of String\nDefault: Empty\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_string\n  type: string\n  example: \"Hello World\""
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#info",
    "href": "reference/config/functionality/arguments/string.html#info",
    "title": "String",
    "section": "info",
    "text": "info\nType: Json\nDefault: Empty\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#multiple",
    "href": "reference/config/functionality/arguments/string.html#multiple",
    "title": "String",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nDefault: False\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_string\n  type: string\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_string=Marc:Susan:Paul"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#multiple_sep",
    "href": "reference/config/functionality/arguments/string.html#multiple_sep",
    "title": "String",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nDefault: :\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_string\n  type: string\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_string=Marc,Susan,Paul"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#name",
    "href": "reference/config/functionality/arguments/string.html#name",
    "title": "String",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#required",
    "href": "reference/config/functionality/arguments/string.html#required",
    "title": "String",
    "section": "required",
    "text": "required\nType: Boolean\nDefault: Empty\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_string\n  type: string\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/string.html#type",
    "href": "reference/config/functionality/arguments/string.html#type",
    "title": "String",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html",
    "href": "reference/config/functionality/arguments/boolean_true.html",
    "title": "Boolean True",
    "section": "",
    "text": "An argument of the boolean_true type acts like a boolean flag with a default value of false. When called as an argument it sets the boolean to true.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html#alternatives",
    "href": "reference/config/functionality/arguments/boolean_true.html#alternatives",
    "title": "Boolean True",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nDefault: Empty\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html#description",
    "href": "reference/config/functionality/arguments/boolean_true.html#description",
    "title": "Boolean True",
    "section": "description",
    "text": "description\nType: String\nDefault: Empty\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html#info",
    "href": "reference/config/functionality/arguments/boolean_true.html#info",
    "title": "Boolean True",
    "section": "info",
    "text": "info\nType: Json\nDefault: Empty\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html#name",
    "href": "reference/config/functionality/arguments/boolean_true.html#name",
    "title": "Boolean True",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --silent, -s or silent. The number of dashes determines how values can be passed:\n\n--silent is a long option, which can be passed with executable_name --silent\n-s is a short option, which can be passed with executable_name -s\nsilent is an argument, which can be passed with executable_name silent"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_true.html#type",
    "href": "reference/config/functionality/arguments/boolean_true.html#type",
    "title": "Boolean True",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/index.html",
    "href": "reference/config/index.html",
    "title": "Config",
    "section": "",
    "text": "A Viash configuration is a YAML file which contains metadata to describe the behaviour and build target(s) of a component.\nWe commonly name this file config.vsh.yaml in our examples, but you can name it however you choose.\nExample:"
  },
  {
    "objectID": "reference/config/index.html#merge__",
    "href": "reference/config/index.html#merge__",
    "title": "Config",
    "section": "__merge__",
    "text": "__merge__\nType: File\nDefault: Empty\nConfig inheritance by including YAML partials. This is useful for defining common APIs in separate files. __merge__ can be used in any level of the YAML. For example, not just in the config but also in the functionality or any of the platforms.\nExample:\n__merge__: ../api/common_interface.yaml"
  },
  {
    "objectID": "reference/config/index.html#functionality",
    "href": "reference/config/index.html#functionality",
    "title": "Config",
    "section": "functionality",
    "text": "functionality\nType: Functionality\nThe functionality describes the behaviour of the script in terms of arguments and resources. By specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you."
  },
  {
    "objectID": "reference/config/index.html#platforms",
    "href": "reference/config/index.html#platforms",
    "title": "Config",
    "section": "platforms",
    "text": "platforms\nType: List of Platform\nA list of platforms to generate target artifacts for.\n\nNative\nDocker\nNextflow"
  },
  {
    "objectID": "reference/config/environmentVariables.html",
    "href": "reference/config/environmentVariables.html",
    "title": "Environment Variables",
    "section": "",
    "text": "Viash checks several environment variables during operation."
  },
  {
    "objectID": "reference/config/environmentVariables.html#viash_home",
    "href": "reference/config/environmentVariables.html#viash_home",
    "title": "Environment Variables",
    "section": "VIASH_HOME",
    "text": "VIASH_HOME\nType: String\nIf VIASH_HOME is not defined, the fallback HOME/.viash is used.\nLocation where specific downloaded versions of Viash will be cached and run from."
  },
  {
    "objectID": "reference/config/environmentVariables.html#viash_version",
    "href": "reference/config/environmentVariables.html#viash_version",
    "title": "Environment Variables",
    "section": "VIASH_VERSION",
    "text": "VIASH_VERSION\nType: String\nDefault: Empty\nA specific Viash version can be set to run the commands with. If so required, the specific Viash version will be downloaded. This is useful when replicating older results or building Viash components that use outdated code.\nExample:\nVIASH_VERSION=0.7.0 viash ns build"
  },
  {
    "objectID": "reference/cli/ns_build.html",
    "href": "reference/cli/ns_build.html",
    "title": "Viash Ns Build",
    "section": "",
    "text": "Build a namespace from many viash config files.\nUsage:\nviash ns build [-n nmspc] [-s src] [-t target] [-p docker] [--setup] [--push] [--parallel] [--flatten]\n\n\n\nArgument\nDescription\nType\n\n\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--flatten, -f\nFlatten the target builds, handy for building one platform to a bin directory.\nBoolean\n\n\n--parallel, -l\nWhether or not to run the process in parallel.\nBoolean\n\n\n--platform, -p\nActs as a regular expression to filter the platform ids specified in the found config files. If this is not provided, all platforms will be used. If no platforms are defined in a config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--push\nWhether or not to push the container to a Docker registry [Docker Platform only].\nBoolean\n\n\n--query, -q\nFilter which components get selected by component and namespace name. Can be a regex. Example: “^mynamespace/component1$”.\nString\n\n\n--query_name\nFilter which components get selected by component name. Can be a regex. Example: “^component1”.\nString\n\n\n--query_namespace, -n\nFilter which namespaces get selected by namespace name. Can be a regex. Example: “^mynamespace$”.\nString\n\n\n--setup\nWhich setup strategy for creating the container to use [Docker Platform only].\nString\n\n\n--src, -s\nA source directory containing viash config files, possibly structured in a hierarchical folder structure. Default: src/.\nString\n\n\n--target, -t\nA target directory to build the executables into. Default: target/.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/ns_list.html",
    "href": "reference/cli/ns_list.html",
    "title": "Viash Ns List",
    "section": "",
    "text": "List a namespace containing many viash config files.\nUsage:\nviash ns list [-n nmspc] [-s src] [-p docker]\n\n\n\nArgument\nDescription\nType\n\n\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--format, -f\nWhich output format to use.\nString\n\n\n--parallel, -l\nWhether or not to run the process in parallel.\nBoolean\n\n\n--parse_argument_groups\nWhether or not to postprocess each component’s argument groups.\nBoolean\n\n\n--platform, -p\nActs as a regular expression to filter the platform ids specified in the found config files. If this is not provided, all platforms will be used. If no platforms are defined in a config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--query, -q\nFilter which components get selected by component and namespace name. Can be a regex. Example: “^mynamespace/component1$”.\nString\n\n\n--query_name\nFilter which components get selected by component name. Can be a regex. Example: “^component1”.\nString\n\n\n--query_namespace, -n\nFilter which namespaces get selected by namespace name. Can be a regex. Example: “^mynamespace$”.\nString\n\n\n--src, -s\nA source directory containing viash config files, possibly structured in a hierarchical folder structure. Default: src/.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/config_view.html",
    "href": "reference/cli/config_view.html",
    "title": "Viash Config View",
    "section": "",
    "text": "View the config file after parsing.\nUsage:\nviash config view config.vsh.yaml\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--format, -f\nWhich output format to use.\nString\n\n\n--parse_argument_groups\nWhether or not to postprocess each component’s argument groups.\nBoolean\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/config_inject.html",
    "href": "reference/cli/config_inject.html",
    "title": "Viash Config Inject",
    "section": "",
    "text": "Inject a Viash header into the main script of a Viash component.\nUsage:\nviash config inject config.vsh.yaml\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/ns_exec.html",
    "href": "reference/cli/ns_exec.html",
    "title": "Viash Ns Exec",
    "section": "",
    "text": "Execute a command for all found Viash components. The syntax of this command is inspired by find . -exec echo {} \\;.\nThe following fields are automatically replaced:\n\n{} | {path}: path to the config file\n{abs-path}: absolute path to the config file\n{dir}: path to the parent directory of the config file\n{abs-dir}: absolute path to the directory of the config file\n{main-script}: path to the main script (if any)\n{abs-main-script}: absolute path to the main script (if any)\n{functionality-name}: name of the component\n{namespace}: namespace of the component\n{platform}: selected platform id (only when –apply_platform is used)\n{output}: path to the destination directory when building the component\n{abs-output}: absolute path to the destination directory when building the component\n\nA command suffixed by \\; (or nothing) will execute one command for each of the Viash components, whereas a command suffixed by + will execute one command for all Viash components.\nUsage:\nviash ns exec 'echo {path} \\\\;'\nviash ns exec 'chmod +x {main-script} +'\n\n\n\nArgument\nDescription\nType\n\n\n\n\n--apply_platform, -a\nFills in the {platform} and {output} field by applying each platform to the config separately. Note that this results in the provided command being applied once for every platform that matches the –platform regex.\nBoolean\n\n\n--cmd\nThe command to execute for each viash config file in the namespace. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--dry_run, -d\nPerform a dry run.\nBoolean\n\n\n--parallel, -l\nWhether or not to run the process in parallel.\nBoolean\n\n\n--platform, -p\nActs as a regular expression to filter the platform ids specified in the found config files. If this is not provided, all platforms will be used. If no platforms are defined in a config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--query, -q\nFilter which components get selected by component and namespace name. Can be a regex. Example: “^mynamespace/component1$”.\nString\n\n\n--query_name\nFilter which components get selected by component name. Can be a regex. Example: “^component1”.\nString\n\n\n--query_namespace, -n\nFilter which namespaces get selected by namespace name. Can be a regex. Example: “^mynamespace$”.\nString\n\n\n--src, -s\nA source directory containing viash config files, possibly structured in a hierarchical folder structure. Default: src/.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/viash_code_block/index.html",
    "href": "reference/viash_code_block/index.html",
    "title": "Viash Code Block",
    "section": "",
    "text": "Example:\nWhen running a Viash component with viash run, Viash will wrap your script into a Bash executable. In doing so, it strips away the “Viash placeholder” code block and replaces it by a bit of code to your script for reading any parameter values at runtime."
  },
  {
    "objectID": "reference/viash_code_block/index.html#recognizing-the-viash-placeholder-code-block",
    "href": "reference/viash_code_block/index.html#recognizing-the-viash-placeholder-code-block",
    "title": "Viash Code Block",
    "section": "Recognizing the Viash placeholder code block",
    "text": "Recognizing the Viash placeholder code block\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=path/to/file.txt\npar_output=output.txt\n## VIASH END\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nusing System.IO;\n\n// VIASH START\nvar par = new {\n  input = \"path/to/file.txt\",\n  output = \"output.txt\"\n};\n// VIASH END\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nconst fs = require('fs');\n\n// VIASH START\nlet par = {\n  'input': 'path/to/file.txt',\n  'output': 'output.txt'\n};\n// VIASH END\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nimport shutil\n\n## VIASH START\npar = {\n  'input': 'file.txt',\n  'output': 'output.txt'\n}\n## VIASH END\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\n## VIASH START\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\n## VIASH END\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\ncase class ViashPar(input: String, output: String)\nval par = ViashPar(\n  \"path/to/file.txt\",\n  \"output.txt\"\n)\n// VIASH END\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)\n\n\n\nA “Viash placeholder” code block is the section between the VIASH START and VIASH END comments."
  },
  {
    "objectID": "reference/viash_code_block/index.html#what-happens-at-runtime",
    "href": "reference/viash_code_block/index.html#what-happens-at-runtime",
    "title": "Viash Code Block",
    "section": "What happens at runtime",
    "text": "What happens at runtime\nBy passing arguments to the component, Viash will add your parameter values to your script by replacing the Viash placeholder code block. If no such code block exists yet, the parameters are inserted at the top of the file.\nThe resulting code block will contain two maps (or dictionaries): par and meta. The par map contains the parameter values specified by the user, and meta contains additional information on the current runtime environment. Note that for Bash scripts, the par and meta maps are flattened into separate environment variables."
  },
  {
    "objectID": "reference/viash_code_block/index.html#previewing-the-par-and-meta-objects",
    "href": "reference/viash_code_block/index.html#previewing-the-par-and-meta-objects",
    "title": "Viash Code Block",
    "section": "Previewing the par and meta objects",
    "text": "Previewing the par and meta objects\nTo get insight into how par and meta are defined, you can run viash config inject to replace the current parameter placeholder with an auto-generated parameter placeholder.\n\n\n\n\n\n\nWarning\n\n\n\nThis will change the contents of your script!\n\n\n\nBashC#JavaScriptPythonRScala\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.sh now contains the following code:\n#!/bin/bash\n\n## VIASH START\n# The following code has been auto-generated by Viash.\npar_input='file.txt'\npar_output='output.txt'\nmeta_functionality_name='example_bash'\nmeta_resources_dir='/tmp/viash_inject_example_bash15987397342754230690'\nmeta_executable='/tmp/viash_inject_example_bash15987397342754230690/example_bash'\nmeta_config='/tmp/viash_inject_example_bash15987397342754230690/.config.vsh.yaml'\nmeta_temp_dir='/tmp'\nmeta_cpus='123'\nmeta_memory_b='123'\nmeta_memory_kb='123'\nmeta_memory_mb='123'\nmeta_memory_gb='123'\nmeta_memory_tb='123'\nmeta_memory_pb='123'\n\n## VIASH END\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.csx now contains the following code:\nusing System.IO;\n\n// VIASH START\n// The following code has been auto-generated by Viash.\nvar par = new {\n  input = @\"file.txt\",\n  output = @\"output.txt\"\n};\nvar meta = new {\n  functionality_name = @\"example_csharp\",\n  resources_dir = @\"/tmp/viash_inject_example_csharp3005823037017410886\",\n  executable = @\"/tmp/viash_inject_example_csharp3005823037017410886/example_csharp\",\n  config = @\"/tmp/viash_inject_example_csharp3005823037017410886/.config.vsh.yaml\",\n  temp_dir = @\"/tmp\",\n  cpus = Convert.ToInt32(@\"123\"),\n  memory_b = Convert.ToInt64(@\"123\"),\n  memory_kb = Convert.ToInt64(@\"123\"),\n  memory_mb = Convert.ToInt64(@\"123\"),\n  memory_gb = Convert.ToInt64(@\"123\"),\n  memory_tb = Convert.ToInt64(@\"123\"),\n  memory_pb = Convert.ToInt64(@\"123\")\n};\nvar dep = new {\n  \n};\n\n// VIASH END\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.js now contains the following code:\nconst fs = require('fs');\n\n// VIASH START\n// The following code has been auto-generated by Viash.\nlet par = {\n  'input': String.raw`file.txt`,\n  'output': String.raw`output.txt`\n};\nlet meta = {\n  'functionality_name': String.raw`example_js`,\n  'resources_dir': String.raw`/tmp/viash_inject_example_js12907692596527078068`,\n  'executable': String.raw`/tmp/viash_inject_example_js12907692596527078068/example_js`,\n  'config': String.raw`/tmp/viash_inject_example_js12907692596527078068/.config.vsh.yaml`,\n  'temp_dir': String.raw`/tmp`,\n  'cpus': parseInt(String.raw`123`),\n  'memory_b': parseInt(String.raw`123`),\n  'memory_kb': parseInt(String.raw`123`),\n  'memory_mb': parseInt(String.raw`123`),\n  'memory_gb': parseInt(String.raw`123`),\n  'memory_tb': parseInt(String.raw`123`),\n  'memory_pb': parseInt(String.raw`123`)\n};\nlet dep = {\n  \n};\n\n// VIASH END\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.py now contains the following code:\nimport shutil\n\n## VIASH START\n# The following code has been auto-generated by Viash.\npar = {\n  'input': r'file.txt',\n  'output': r'output.txt'\n}\nmeta = {\n  'functionality_name': r'example_python',\n  'resources_dir': r'/tmp/viash_inject_example_python5193487505880444155',\n  'executable': r'/tmp/viash_inject_example_python5193487505880444155/example_python',\n  'config': r'/tmp/viash_inject_example_python5193487505880444155/.config.vsh.yaml',\n  'temp_dir': r'/tmp',\n  'cpus': int(r'123'),\n  'memory_b': int(r'123'),\n  'memory_kb': int(r'123'),\n  'memory_mb': int(r'123'),\n  'memory_gb': int(r'123'),\n  'memory_tb': int(r'123'),\n  'memory_pb': int(r'123')\n}\ndep = {\n  \n}\n\n## VIASH END\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.R now contains the following code:\n## VIASH START\n# The following code has been auto-generated by Viash.\n# treat warnings as errors\n.viash_orig_warn &lt;- options(warn = 2)\n\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\nmeta &lt;- list(\n  \"functionality_name\" = 'example_r',\n  \"resources_dir\" = '/tmp/viash_inject_example_r10937607249552531433',\n  \"executable\" = '/tmp/viash_inject_example_r10937607249552531433/example_r',\n  \"config\" = '/tmp/viash_inject_example_r10937607249552531433/.config.vsh.yaml',\n  \"temp_dir\" = '/tmp',\n  \"cpus\" = as.integer('123'),\n  \"memory_b\" = bit64::as.integer64('123'),\n  \"memory_kb\" = bit64::as.integer64('123'),\n  \"memory_mb\" = bit64::as.integer64('123'),\n  \"memory_gb\" = bit64::as.integer64('123'),\n  \"memory_tb\" = bit64::as.integer64('123'),\n  \"memory_pb\" = bit64::as.integer64('123')\n)\ndep &lt;- list(\n  \n)\n\n\n# restore original warn setting\noptions(.viash_orig_warn)\nrm(.viash_orig_warn)\n\n## VIASH END\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.scala now contains the following code:\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\n// The following code has been auto-generated by Viash.\ncase class ViashPar(\n  input: Option[String],\n  output: Option[String]\n)\nval par = ViashPar(\n  Some(\"\"\"file.txt\"\"\"),\n  Some(\"\"\"output.txt\"\"\")\n)\ncase class ViashMeta(\n  functionality_name: Option[String],\n  resources_dir: Option[String],\n  executable: Option[String],\n  config: Option[String],\n  temp_dir: Option[String],\n  cpus: Option[Int],\n  memory_b: Option[Long],\n  memory_kb: Option[Long],\n  memory_mb: Option[Long],\n  memory_gb: Option[Long],\n  memory_tb: Option[Long],\n  memory_pb: Option[Long]\n)\nval meta = ViashMeta(\n  Some(\"\"\"example_scala\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala14048357499352927396\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala14048357499352927396/example_scala\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala14048357499352927396/.config.vsh.yaml\"\"\"),\n  Some(\"\"\"/tmp\"\"\"),\n  Some(\"\"\"123\"\"\".toInt),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong)\n)\ncase class ViashDep(\n  \n)\nval dep = ViashDep(\n  \n)\n\n// VIASH END\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)"
  },
  {
    "objectID": "reference/viash_code_block/index.html#runtime-parameters-in-par",
    "href": "reference/viash_code_block/index.html#runtime-parameters-in-par",
    "title": "Viash Code Block",
    "section": "Runtime parameters in par",
    "text": "Runtime parameters in par\nThe par object (or par_ environment variables in Bash) will contain argument values passed at runtime. For example, passing --input foo.txt will result in a par[\"input\"] being equal to \"foo.txt\".\n\n\n\n\n\n\nTip\n\n\n\nTry adding more arguments with different file types to see what effect this has on the resulting placeholder."
  },
  {
    "objectID": "reference/viash_code_block/index.html#meta-variables-in-meta",
    "href": "reference/viash_code_block/index.html#meta-variables-in-meta",
    "title": "Viash Code Block",
    "section": "Meta variables in meta",
    "text": "Meta variables in meta\nMeta-variables offer information on the runtime environment which you can use from within your script.\n\ncpus (integer): The maximum number of (logical) cpus a component is allowed to use. By default, this value will be undefined.\nconfig (string): Path to the processed Viash config YAML. This file is usually called .config.vsh.yaml and resides next to the wrapped executable (see below). This YAML file is useful for doing some runtime introspection of the component for writing generic unit tests.\nexecutable (string): The executable being used at runtime; that is, the wrapped script. This variable is used in unit tests.\nfunctionality_name (string): The name of the component, useful for logging.\nmemory_* (long): The maximum amount of memory a component is allowed to allocate. The following denominations are provided: memory_b, memory_kb, memory_mb, memory_gb, memory_tb, memory_pb. By default, this value will be undefined.\nresources_dir (string): Path to where the resources are stored.\ntemp_dir (string): A temporary directory in which your script is allowed to create new temporary files / directories. By default, this will be set to the VIASH_TEMP environment variable. When the VIASH_TEMP variable is undefined, POSIX TMPDIR or /tmp is used instead.\n\n\ncpus (integer)\nThis field specifies the maximum number of (logical) cpus a component is allowed to use. This is useful when parallellizing your component in such a way that integrates very nicely with pipeline frameworks such as Nextflow. Below is an example usage of the cpus meta-variable.\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=\"path/to/file.txt\"\npar_output=\"output.txt\"\nmeta_cpus=10\n## VIASH END\n\n# Pass number of cores to the popular_software_tool. Set the default to 1.\n./popular_software_tool --ncores ${meta_cpus:-1}\n\n\nNo example available yet.\n\n\nNo example available yet.\n\n\nfrom multiprocessing import Pool\n\n## VIASH START\npar = {}\nmeta = {\"cpus\": 1}\n## VIASH END\n\ndef my_fun(x):\n    return x + \"!\"\nmy_data = [\"hello\", \"world\"]\n\nwith Pool(processes=meta.get(\"cpus\", 1)) as pool:\n    out = pool.map(my_fun, my_data)\n\n\nlibrary(furrr)\n\n## VIASH START\npar &lt;- list()\nmeta &lt;- list(\n  cpus = 1L\n)\n## VIASH END\n\nif (is.null(meta$cpus)) meta$cpus &lt;- 1\nplan(multisession, workers = meta$cpus)\n\nmy_data &lt;- c(\"hello\", \"world\")\nout = future_map(\n  my_data, \n  function(x) {\n    paste0(x, \"!\")\n  }\n)\n\n\nimport scala.collection.parallel._\nimport java.util.concurrent.ForkJoinPool\n\n// VIASH START\n// ...\n// VIASH END\n\nval pc = mutable.ParArray(1, 2, 3)\nval numCores = meta.cores.getOrElse(1)\npc.tasksupport = new ForkJoinTaskSupport(new ForkJoinPool(numCores))\npc map { _ + 1 }\n\n\n\nYou can set the number of cores in your component using any of the following approaches:\n# as a parameter of viash run\nviash run config.vsh.yaml --cpus 10 -- &lt;my component arguments&gt;\n\n# as a parameter of viash test\nviash test config.vsh.yaml --cpus 10\n\n# or as a parameter of the executable\nviash build config.vsh.yaml -o output\noutput/my_executable ---cpus 10\n#                     ↑ notice the triple dash\n\n\nconfig (string)\nPath to the processed Viash config YAML. This file is usually called .config.vsh.yaml and resides next to the wrapped executable (see below). This YAML file is useful for doing some runtime introspection of the component for writing generic unit tests.\n\n\nexecutable (string)\nThe executable being used at runtime; that is, the wrapped script. This variable is used in unit tests.\n#!/usr/bin/env bash\nset -x\n\n\"$meta_executable\" --input input.txt &gt; output.txt\n\n[[ ! -f output.txt ]] && echo \"Output file could not be found!\" && exit 1\ncat output.txt\ngrep -q 'expected output' output.txt\n\necho Done\n\n\nfunctionality_name (string)\nThe name of the component, useful for logging.\n\n\nmemory_* (long)\nThe maximum amount of memory a component is allowed to allocate. The following denominations are provided: memory_b, memory_kb, memory_mb, memory_gb, memory_tb, memory_pb. By default, this value will be undefined.\nYou can set the amount of memory in your component using any of the following approaches:\n# as a parameter of viash run\nviash run config.vsh.yaml --memory 2GB -- &lt;my component arguments&gt;\n\n# as a parameter of viash test\nviash test config.vsh.yaml --memory 2GB\n\n# or as a parameter of the executable\nviash build config.vsh.yaml -o output\noutput/my_executable ---memory 2GB\n#                     ↑ notice the triple dash\n\n\nresources_dir (string)\nThis field specifies the absolute path to where the resources are stored. During the build phase resources are copied or fetched into this directory so they are ready to be read during execution of the script or test scripts.\n\n\ntemp_dir (string)\nA temporary directory in which your script is allowed to create new temporary files / directories. By default, this will be set to the VIASH_TEMP environment variable. When the VIASH_TEMP variable is undefined, the POSIX TMPDIR and other common misspellings will be checked and ultimately /tmp is used as fallback."
  },
  {
    "objectID": "reference/nextflow_vdsl3/run_module.html",
    "href": "reference/nextflow_vdsl3/run_module.html",
    "title": "Run a VDSL3 module",
    "section": "",
    "text": "Unlike typical Nextflow modules, VDSL3 modules can actually be used as a standalone pipeline.\nTo run a VDSL3 module as a standalone pipeline, you need to specify the input parameters and a --publish_dir parameter, as Nextflow will automatically choose the parameter names of the output files."
  },
  {
    "objectID": "reference/nextflow_vdsl3/run_module.html#viewing-the-help-message",
    "href": "reference/nextflow_vdsl3/run_module.html#viewing-the-help-message",
    "title": "Run a VDSL3 module",
    "section": "Viewing the help message",
    "text": "Viewing the help message\nMore information regarding a modules arguments can be shown by passing the --help parameter.\nExample:\nnextflow run target/nextflow/mycomponent/main.nf --help"
  },
  {
    "objectID": "reference/nextflow_vdsl3/run_module.html#running-a-module-as-a-standalone-pipeline",
    "href": "reference/nextflow_vdsl3/run_module.html#running-a-module-as-a-standalone-pipeline",
    "title": "Run a VDSL3 module",
    "section": "Running a module as a standalone pipeline",
    "text": "Running a module as a standalone pipeline\nYou can run the executable by providing a value for each of the required arguments and --publish_dir (where output files are published).\nExample:\nnextflow run target/nextflow/mycomponent/main.nf \\\n  --input config.vsh.yaml \\\n  --publish_dir output/"
  },
  {
    "objectID": "reference/nextflow_vdsl3/run_module.html#passing-a-parameter-list",
    "href": "reference/nextflow_vdsl3/run_module.html#passing-a-parameter-list",
    "title": "Run a VDSL3 module",
    "section": "Passing a parameter list",
    "text": "Passing a parameter list\nEvery VDSL3 can accept a list of parameters to populate a Nextflow channel with. Assuming we want to process a set of input files in parallel, we can create a yaml file params.yaml containing the following information.\nparam_list:\n  - id: sample1\n    input: data/sample1.txt\n  - id: sample2\n    input: data/sample2.txt\n  - id: sample3\n    input: data/sample3.txt\n  - id: sample4\n    input: data/sample4.txt\narg1: 10\narg2: 5\nYou can run the pipeline on the list of parameters using the -params-file parameter.\nnextflow run target/main.nf -params-file params.yaml --publish_dir output2\n\n\n\n\n\n\nTip\n\n\n\nYou can also pass a YAML, CSV or JSON file to the param_list parameter."
  },
  {
    "objectID": "guide/component/add-resources.html",
    "href": "guide/component/add-resources.html",
    "title": "Add resources",
    "section": "",
    "text": "If a script needs access to an external file, it needs to be added as a resource in the config.\nFirst, create a file called my_file.txt.\n\nBashC#JavaScriptPythonRScala\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\necho 'Here are the contents of my_file.txt' &gt; my_file.txt\n\n\n\n\nNext, the file needs to be added to the config as a resource. This will let Viash know to copy the new file inside a component’s resource directory.\n\nBashC#JavaScriptPythonRScala\n\n\nfunctionality:\n  name: example_bash\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: bash_script\n      path: script.sh\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: bash:4.0\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_csharp\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: csharp_script\n      path: script.csx\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: ghcr.io/data-intuitive/dotnet-script:1.3.1\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_js\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: javascript_script\n      path: script.js\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: node:19-bullseye-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_python\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: python_script\n      path: script.py\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: python:3.10-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_r\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: r_script\n      path: script.R\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: eddelbuettel/r2u:22.04\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_scala\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: scala_script\n      path: script.scala\n    - path: my_file.txt\nplatforms:\n  - type: docker\n    image: sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n  - type: native\n  - type: nextflow\n\n\n\nLastly, to access a resource from within the script, use the resources_dir meta-variable:\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=path/to/file.txt\npar_output=output.txt\n## VIASH END\n\n# view resource file\ncat \"$meta_resources_dir/my_file.txt\"\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nusing System.IO;\n\n// VIASH START\nvar par = new {\n  input = \"path/to/file.txt\",\n  output = \"output.txt\"\n};\n// VIASH END\n\n// view resource file\nstring myFile = $\"{meta.resources_dir}/my_file.txt\";\nstring text = File.ReadAllText(myFile);\nConsole.WriteLine(text);\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nconst fs = require('fs');\n\n// VIASH START\nlet par = {\n  'input': 'path/to/file.txt',\n  'output': 'output.txt'\n};\n// VIASH END\n\n// view resource file\nconst my_file = `${meta['resources_dir']}/my_file.txt`\nfs.readFile(my_file, 'utf8', (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nimport shutil\n\n## VIASH START\npar = {\n  'input': 'file.txt',\n  'output': 'output.txt'\n}\n## VIASH END\n\n# view resource file\nmy_file = f\"{meta['resources_dir']}/my_file.txt\"\nwith open(my_file, \"r\") as f:\n  print(f.read())\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\n## VIASH START\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\n## VIASH END\n\n# view resource file\nlines &lt;- readLines(paste0(meta$resources_dir, \"/my_file.txt\"))\ncat(lines, sep = \"\\n\")\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\ncase class ViashPar(input: String, output: String)\nval par = ViashPar(\n  \"path/to/file.txt\",\n  \"output.txt\"\n)\n// VIASH END\n\n// view resource file\nval myFile = s\"${meta.resources_dir}/my_file.txt\"\nval src = scala.io.Source.fromFile(myFile)\nsrc.getLines.foreach(println)\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)\n\n\n\nNow we can run the component as follows:\n\nBashC#JavaScriptPythonRScala\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_bash:latest'\n[warning] Could not pull from 'example_bash:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_bash:latest' with Dockerfile\nHere are the contents of my_file.txt\nCopying '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/bash/config.vsh.yaml' to '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/bash/foo.txt'.\n\n\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_csharp:latest'\n[warning] Could not pull from 'example_csharp:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_csharp:latest' with Dockerfile\nHere are the contents of my_file.txt\n\nCopying '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/csharp/config.vsh.yaml' to '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/csharp/foo.txt'.\n\n\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_js:latest'\n[warning] Could not pull from 'example_js:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_js:latest' with Dockerfile\nCopying '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/js/config.vsh.yaml' to '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/js/foo.txt'\nHere are the contents of my_file.txt\n\n\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_python:latest'\n[warning] Could not pull from 'example_python:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_python:latest' with Dockerfile\nHere are the contents of my_file.txt\n\nCopying '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/python/config.vsh.yaml' to '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/python/foo.txt'.\n\n\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_r:latest'\n[warning] Could not pull from 'example_r:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_r:latest' with Dockerfile\nHere are the contents of my_file.txt\nCopying '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/r/config.vsh.yaml' to '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/r/foo.txt'.\n[1] TRUE\n\n\n\n\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_scala:latest'\n[warning] Could not pull from 'example_scala:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_scala:latest' with Dockerfile\nwarning: 1 deprecation\nwarning: 1 deprecation (since 2.13.3)\nwarning: 2 deprecations in total; re-run with -deprecation for details\nHere are the contents of my_file.txt\nCopying '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/scala/config.vsh.yaml' to '/viash_automount/tmp/Rtmp7dGKA7/add-dependencies6dcc13481adb/scala/foo.txt'."
  },
  {
    "objectID": "guide/component/unit-testing.html",
    "href": "guide/component/unit-testing.html",
    "title": "Unit testing",
    "section": "",
    "text": "We recommend adding unit tests to all of your components in a project as soon as possible. Implementing unit tests not only ensures that your component works, but it also makes the project more maintainable in the long run as you will be notified when a component breaks.\nThis page describes how to add a unit test to your component."
  },
  {
    "objectID": "guide/component/unit-testing.html#create-unit-test",
    "href": "guide/component/unit-testing.html#create-unit-test",
    "title": "Unit testing",
    "section": "Create unit test",
    "text": "Create unit test\nBelow is an example of how to add a unit test to a Viash component.\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\nmeta_executable=\"target/example_bash\"\n## VIASH END\n\necho \"&gt;&gt;&gt; Create input test file\"\necho \"foo\" &gt; foo.txt\n\necho \"&gt;&gt;&gt; Run executable\"\n$meta_executable --input foo.txt --output bar.txt\n\necho \"&gt;&gt;&gt; Check whether output file exists\"\n[[ -f bar.txt ]] (echo \"Output file could not be found!\" && exit 1)\n\necho \"&gt;&gt;&gt; Check whether input and output file are the same\"\ncmp foo.txt bar.tx (echo \"Input and output files are different!\" && exit 1)\n\necho \"&gt;&gt;&gt; Test finished successfully\"\n\n\nusing System;\nusing System.IO;\nusing System.Diagnostics;\n\n// VIASH START\nvar meta = new {\n  executable = \"target/example_csharp\"\n};\n// VIASH END\n\nstring inputPath = \"foo.txt\";\nstring outputPath = \"bar.txt\";\nstring content = \"hello\\nthere\\n\";\n\nConsole.WriteLine(\"&gt;&gt;&gt; Create input test file\");\nFile.WriteAllText(inputPath, content);\n\nConsole.WriteLine(\"&gt;&gt;&gt; Run executable\");\n\nvar startInfo = new ProcessStartInfo(meta.executable)\n{\n    Arguments = $\"--input {inputPath} --output {outputPath}\",\n    UseShellExecute = false,\n    RedirectStandardOutput = true,\n    CreateNoWindow = true\n};\nusing(var cmd = Process.Start(startInfo))\n{\n    cmd.WaitForExit();\n}\n\n\nConsole.WriteLine(\"&gt;&gt;&gt; Check whether output file exists\");\nif (!File.Exists(outputPath)) {\n    Console.WriteLine(\"Output file was not found\");\n    Environment.Exit(1);\n}\n\nConsole.WriteLine(\"&gt;&gt;&gt; Check whether input and output file are the same\");\nvar outputLines = File.ReadAllText(outputPath);\nif (content != outputLines) {\n    Console.WriteLine(\n        \"Input and output should be the same\\n\" +\n        $\"expected content: {content}\\n\" +\n        $\"found: {outputLines}\\n\"\n    );\n    Environment.Exit(1);\n}\n\nConsole.WriteLine(\"&gt;&gt;&gt; Test finished successfully\");\n\n\nconst fs = require('fs');\nconst child_process = require('child_process');\n\n// VIASH START\nlet meta = {\n  'executable': 'target/example_js'\n};\n// VIASH END\n\nconst inputPath = 'foo.txt';\nconst outputPath = 'bar.txt';\nconst content = 'hello\\nthere\\n';\n\nconsole.log('&gt;&gt;&gt; Create input test file');\nfs.writeFileSync(inputPath, content, 'utf8');\n\nconsole.log('&gt;&gt;&gt; Run executable');\nconst cmdArgs = [\n  '--input', inputPath,\n  '--output', outputPath\n];\nconst child = child_process.spawnSync(meta[\"executable\"], cmdArgs);\nif (child.error) {\n  console.error(`Error: ${child.error}`);\n  process.exit(1);\n}\n\nconsole.log('&gt;&gt;&gt; Check whether output file exists');\nif (!fs.existsSync(outputPath)) {\n  console.error('Output file was not found');\n  process.exit(1);\n}\n\nconsole.log('&gt;&gt;&gt; Check whether input and output file are the same');\nconst outputLines = fs.readFileSync(outputPath, 'utf8');\nif (content !== outputLines) {\n  console.error(\n    `Input and output should be the same\\n` +\n    `expected content: ${content}\\n` +\n    `found: ${outputLines}\\n`\n  );\n  process.exit(1);\n}\n\nconsole.log('&gt;&gt;&gt; Test finished successfully');\n\n\nimport subprocess\nimport os\n\ninput_path = \"foo.txt\"\noutput_path = \"bar.txt\"\ncontent = \"hello\\nthere\\n\"\n\n## VIASH START\nmeta = {\n  \"executable\": \"target/example_python\"\n}\n## VIASH END\n\nprint(\"&gt;&gt;&gt; Create input test file\")\nwith open(input_path, \"w\") as file:\n  file.write(content)\n\nprint(\"&gt;&gt;&gt; Run executable\")\ncmd_args = [\n  meta[\"executable\"],\n  \"--input\", input_path,\n  \"--output\", output_path\n]\nsubprocess.run(cmd_args, check=True)\n\nprint(\"&gt;&gt;&gt; Check whether output file exists\")\nassert os.path.exists(output_path), \"Output file was not found\"\n\nprint(\"&gt;&gt;&gt; Check whether input and output file are the same\")\nwith open(output_path, \"r\", encoding=\"utf8\") as file:\n  output_lines = file.read()\n\nassert content == output_lines, \\\n  \"Input and output should be the same\" \\\n  f\"expected content: {content}\" \\\n  f\"found: {output_lines}\"\n\nprint(\"&gt;&gt;&gt; Test finished successfully\")\n\n\n## VIASH START\nmeta &lt;- list(\n  \"target/example_r\"\n)\n## VIASH END\n\ninput_path &lt;- \"foo.txt\"\noutput_path &lt;- \"bar.txt\"\ncontent &lt;- c(\"hello\", \"there\")\n\ncat(\"&gt;&gt;&gt; Create input test file\\n\")\nwriteLines(content, input_path)\n\ncat(\"&gt;&gt;&gt; Run executable\\n\")\nsystem2(\n  meta$executable,\n  c(\n    \"--input\", input_path,\n    \"--output\", output_path\n  )\n)\n\ncat(\"&gt;&gt;&gt; Check whether output file exists\\n\")\nif (!file.exists(output_path)) {\n  stop(\"Output file was not found\")\n}\n\ncat(\"&gt;&gt;&gt; Check whether input and output file are the same\\n\")\noutput_lines &lt;- readLines(output_path)\n\nif (!identical(content, output_lines)) {\n  stop(paste0(\n    \"Input and output should be the same\\n\",\n    \"expected content: \", content, \"\\n\",\n    \"found: \", output_lines, \"\\n\"\n  ))\n}\n\ncat(\"&gt;&gt;&gt; Test finished successfully\\n\")\n\n\nimport scala.sys.process._\nimport java.nio.file.{Files, Paths}\nimport scala.io.Source\n\n// VIASH START\ncase class ViashMeta(executable: String)\nval meta = ViashMeta(\n  \"target/example_scala\"\n)\n// VIASH END\nval inputPath = Paths.get(\"foo.txt\")\nval outputPath = Paths.get(\"bar.txt\")\nval content = \"hello\\nthere\"\n\nprintln(\"&gt;&gt;&gt; Create input test file\")\nFiles.write(inputPath, content.getBytes(\"UTF-8\"))\n\nprintln(\"&gt;&gt;&gt; Run executable\")\ns\"${meta.executable} --input $inputPath --output $outputPath\".!\n\nprintln(\"&gt;&gt;&gt; Check whether output file exists\")\nassert(Files.exists(outputPath), \"Output file not found\")\n\nprintln(\"&gt;&gt;&gt; Check whether input and output file are the same\")\nval outputLines = Source.fromFile(outputPath.toFile()).getLines.mkString(\"\\n\")\nassert(\n  content == outputLines, \n  s\"\"\"Output not the same\nexpected: '$content'\nfound: '$outputLines'\n\"\"\".stripMargin\n)\n\nprintln(\"&gt;&gt;&gt; Test finished successfully\")\n\n\n\n\nCreate an input file “foo.txt” with some sample content.\nRun an executable file specified in the “meta” dictionary with the arguments “–input foo.txt” and “–output bar.txt”.\nCheck whether the output file “bar.txt” exists.\nCheck whether the content of the output file is the same as the content of the input file.\nIf both checks pass, the script prints “Test finished successfully”.\n\n\n\n\n\n\n\nImportant\n\n\n\nA test script doesn’t need to be written in the same scripting language as the main script, as long as all of the required dependencies are available. This means the main script could be written in R, but the unit test could be written in Bash."
  },
  {
    "objectID": "guide/component/unit-testing.html#add-test-to-config",
    "href": "guide/component/unit-testing.html#add-test-to-config",
    "title": "Unit testing",
    "section": "Add test to config",
    "text": "Add test to config\nNext, we need to add the unit test to the test_resources section in the Viash config.\n\nBashC#JavaScriptPythonRScala\n\n\nfunctionality:\n  name: example_bash\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: bash_script\n      path: script.sh\n  test_resources:\n    - type: bash_script\n      path: test.sh\nplatforms:\n  - type: docker\n    image: bash:4.0\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_csharp\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: csharp_script\n      path: script.csx\n  test_resources:\n    - type: csharp_script\n      path: test.csx\nplatforms:\n  - type: docker\n    image: ghcr.io/data-intuitive/dotnet-script:1.3.1\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_js\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: javascript_script\n      path: script.js\n  test_resources:\n    - type: javascript_script\n      path: test.js\nplatforms:\n  - type: docker\n    image: node:19-bullseye-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_python\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: python_script\n      path: script.py\n  test_resources:\n    - type: python_script\n      path: test.py\nplatforms:\n  - type: docker\n    image: python:3.10-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_r\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: r_script\n      path: script.R\n  test_resources:\n    - type: r_script\n      path: test.R\nplatforms:\n  - type: docker\n    image: eddelbuettel/r2u:22.04\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_scala\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: scala_script\n      path: script.scala\n  test_resources:\n    - type: scala_script\n      path: test.scala\nplatforms:\n  - type: docker\n    image: sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n  - type: native\n  - type: nextflow\n\n\n\nNote that if you can add multiple unit tests to the test_resources section, they will all be evaluated. You can also add other resources, similar to what is described in the page on adding resources."
  },
  {
    "objectID": "guide/component/unit-testing.html#run-the-unit-test",
    "href": "guide/component/unit-testing.html#run-the-unit-test",
    "title": "Unit testing",
    "section": "Run the unit test",
    "text": "Run the unit test\nYou can run the unit test as follows:\n\nBashC#JavaScriptPythonRScala\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_bash1266212538460308393'\n====================================================================\n+/tmp/viash_test_example_bash1266212538460308393/build_executable/example_bash ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_bash:test' with Dockerfile\n[info] Running 'docker build -t example_bash:test /tmp/viash_test_example_bash1266212538460308393/build_executable -f /tmp/viash_test_example_bash1266212538460308393/build_executable/tmp/dockerbuild-example_bash-K1Rutk/Dockerfile'\n#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from Dockerfile\n#1 transferring dockerfile: 286B done\n#1 DONE 0.0s\n\n#2 [internal] load .dockerignore\n#2 transferring context: 2B done\n#2 DONE 0.0s\n\n#3 [auth] library/bash:pull token for registry-1.docker.io\n#3 DONE 0.0s\n\n#4 [internal] load metadata for docker.io/library/bash:4.0\n#4 DONE 0.8s\n\n#5 [1/2] FROM docker.io/library/bash:4.0@sha256:5e483ca9e210c365eb1d4bbfe9f14c61cea7dc2bd81e085b20d41c4c5260afbe\n#5 resolve docker.io/library/bash:4.0@sha256:5e483ca9e210c365eb1d4bbfe9f14c61cea7dc2bd81e085b20d41c4c5260afbe 0.0s done\n#5 sha256:f590bf8f18f0cf91b3af7ea0ecdf68babd10bf82ad96f35b8ce3a64993732bf1 5.77kB / 5.77kB done\n#5 sha256:96526aa774ef0126ad0fe9e9a95764c5fc37f409ab9e97021e7b4775d82bf6fa 3.40MB / 3.40MB 0.2s done\n#5 sha256:412b13212dbb29e675cd5ba7b8966d4676aacbbbf31e0965ab297590ff69309f 0B / 2.14MB 0.2s\n#5 sha256:d3273efce131af9492f68915e3f58471b1f60698fdc55bfa1357e76371e74be9 346B / 346B 0.1s done\n#5 sha256:5e483ca9e210c365eb1d4bbfe9f14c61cea7dc2bd81e085b20d41c4c5260afbe 1.64kB / 1.64kB done\n#5 sha256:a3f7c5309cd495e8258818118e94bfbf31ae89e543fd6c4bf3031940f60ff6b5 946B / 946B done\n#5 extracting sha256:96526aa774ef0126ad0fe9e9a95764c5fc37f409ab9e97021e7b4775d82bf6fa\n#5 sha256:412b13212dbb29e675cd5ba7b8966d4676aacbbbf31e0965ab297590ff69309f 2.14MB / 2.14MB 0.2s done\n#5 extracting sha256:96526aa774ef0126ad0fe9e9a95764c5fc37f409ab9e97021e7b4775d82bf6fa 0.1s done\n#5 extracting sha256:412b13212dbb29e675cd5ba7b8966d4676aacbbbf31e0965ab297590ff69309f\n#5 extracting sha256:412b13212dbb29e675cd5ba7b8966d4676aacbbbf31e0965ab297590ff69309f 0.1s done\n#5 extracting sha256:d3273efce131af9492f68915e3f58471b1f60698fdc55bfa1357e76371e74be9\n#5 extracting sha256:d3273efce131af9492f68915e3f58471b1f60698fdc55bfa1357e76371e74be9 done\n#5 DONE 0.5s\n\n#6 [2/2] RUN :\n#6 DONE 0.2s\n\n#7 exporting to image\n#7 exporting layers\n#7 exporting layers 0.8s done\n#7 writing image sha256:1b096654e4a6366b200fd1dec7f39f2618be39410a4fad6202378e46452960a7 done\n#7 naming to docker.io/library/example_bash:test done\n#7 DONE 0.8s\n====================================================================\n+/tmp/viash_test_example_bash1266212538460308393/test_test/test_executable\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\nCopying 'foo.txt' to 'bar.txt'.\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\nSUCCESS! All 1 out of 1 test scripts succeeded!\nCleaning up temporary directory\n\n\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_csharp13266273233637531667'\n====================================================================\n+/tmp/viash_test_example_csharp13266273233637531667/build_executable/example_csharp ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_csharp:test' with Dockerfile\n[info] Running 'docker build -t example_csharp:test /tmp/viash_test_example_csharp13266273233637531667/build_executable -f /tmp/viash_test_example_csharp13266273233637531667/build_executable/tmp/dockerbuild-example_csharp-dkmsZZ/Dockerfile'\n#0 building with \"default\" instance using docker driver\n\n#1 [internal] load build definition from Dockerfile\n#1 transferring dockerfile: 322B done\n#1 DONE 0.0s\n\n#2 [internal] load .dockerignore\n#2 transferring context: 2B done\n#2 DONE 0.0s\n\n#3 [internal] load metadata for ghcr.io/data-intuitive/dotnet-script:1.3.1\n#3 DONE 0.8s\n\n#4 [1/2] FROM ghcr.io/data-intuitive/dotnet-script:1.3.1@sha256:d95bf2a2b3e095e5b02960ab4ddd4674d798a1493ed0dc5cf427c77a5ed90ed3\n#4 resolve ghcr.io/data-intuitive/dotnet-script:1.3.1@sha256:d95bf2a2b3e095e5b02960ab4ddd4674d798a1493ed0dc5cf427c77a5ed90ed3 done\n#4 sha256:d95bf2a2b3e095e5b02960ab4ddd4674d798a1493ed0dc5cf427c77a5ed90ed3 856B / 856B done\n#4 sha256:ae4d45b87ee640aec6f031a1695c6d814e0026ea6fb3220e3daaad90b0f09bda 2.21kB / 2.21kB done\n#4 sha256:df9b9388f04ad6279a7410b85cedfdcb2208c0a003da7ab5613af71079148139 0B / 2.81MB 0.1s\n#4 sha256:1102243946aeba437ebb7c7ab5559d465d660ed57a1f13888c89692401cd5bb6 7.71kB / 7.71kB done\n#4 sha256:3ae3a38ed752842e75d1609c931b29e565b53c24229c87bf1ba64251b5f1f094 0B / 1.74MB 0.1s\n#4 sha256:d772c6b09cca24a6ec7cb06facff8b7be509b608330bd035f91b70388a94d3b4 0B / 31.26MB 0.1s\n#4 extracting sha256:df9b9388f04ad6279a7410b85cedfdcb2208c0a003da7ab5613af71079148139\n#4 sha256:df9b9388f04ad6279a7410b85cedfdcb2208c0a003da7ab5613af71079148139 2.81MB / 2.81MB 0.2s done\n#4 sha256:d772c6b09cca24a6ec7cb06facff8b7be509b608330bd035f91b70388a94d3b4 4.19MB / 31.26MB 0.3s\n#4 extracting sha256:df9b9388f04ad6279a7410b85cedfdcb2208c0a003da7ab5613af71079148139 0.1s done\n#4 sha256:2c56128c63bdf4a1d571ed930304f4eb77e8e2fde7ce03ddf6073e3df9abf8ad 0B / 8.65MB 0.3s\n#4 sha256:3ae3a38ed752842e75d1609c931b29e565b53c24229c87bf1ba64251b5f1f094 1.74MB / 1.74MB 0.3s done\n#4 sha256:2c56128c63bdf4a1d571ed930304f4eb77e8e2fde7ce03ddf6073e3df9abf8ad 4.19MB / 8.65MB 0.4s\n#4 extracting sha256:3ae3a38ed752842e75d1609c931b29e565b53c24229c87bf1ba64251b5f1f094 0.1s\n#4 sha256:6c2be99410893469a9e0d8f0ff537b22f651479bf64c5dcf269d2e5267e85749 0B / 20.91MB 0.4s\n#4 sha256:d772c6b09cca24a6ec7cb06facff8b7be509b608330bd035f91b70388a94d3b4 8.39MB / 31.26MB 0.5s\n#4 sha256:2c56128c63bdf4a1d571ed930304f4eb77e8e2fde7ce03ddf6073e3df9abf8ad 8.65MB / 8.65MB 0.5s done\n#4 extracting sha256:3ae3a38ed752842e75d1609c931b29e565b53c24229c87bf1ba64251b5f1f094 0.1s done\n#4 sha256:5a0c86bcd85d690fae1d36f59c4041c4142835310a431e3f1b00446763d7db73 0B / 105.91MB 0.5s\n#4 sha256:d772c6b09cca24a6ec7cb06facff8b7be509b608330bd035f91b70388a94d3b4 31.26MB / 31.26MB 0.7s\n#4 sha256:6c2be99410893469a9e0d8f0ff537b22f651479bf64c5dcf269d2e5267e85749 4.19MB / 20.91MB 0.7s\n#4 sha256:5a0c86bcd85d690fae1d36f59c4041c4142835310a431e3f1b00446763d7db73 9.44MB / 105.91MB 0.7s\n#4 sha256:d772c6b09cca24a6ec7cb06facff8b7be509b608330bd035f91b70388a94d3b4 31.26MB / 31.26MB 0.7s done\n#4 sha256:6c2be99410893469a9e0d8f0ff537b22f651479bf64c5dcf269d2e5267e85749 9.44MB / 20.91MB 0.8s\n#4 sha256:5a0c86bcd85d690fae1d36f59c4041c4142835310a431e3f1b00446763d7db73 18.15MB / 105.91MB 0.8s\n#4 extracting sha256:d772c6b09cca24a6ec7cb06facff8b7be509b608330bd035f91b70388a94d3b4\n#4 sha256:5e733ff9c30825005ec05ee10b784276e8034171be7eeaa10d6f876fc7bb5383 0B / 12.80MB 0.8s\n#4 sha256:6c2be99410893469a9e0d8f0ff537b22f651479bf64c5dcf269d2e5267e85749 20.91MB / 20.91MB 0.9s\n#4 sha256:5a0c86bcd85d690fae1d36f59c4041c4142835310a431e3f1b00446763d7db73 27.26MB / 105.91MB 0.9s\n#4 sha256:5e733ff9c30825005ec05ee10b784276e8034171be7eeaa10d6f876fc7bb5383 1.22MB / 12.80MB 0.9s\n#4 sha256:6c2be99410893469a9e0d8f0ff537b22f651479bf64c5dcf269d2e5267e85749 20.91MB / 20.91MB 0.9s done\n#4 sha256:5a0c86bcd85d690fae1d36f59c4041c4142835310a431e3f1b00446763d7db73 51.38MB / 105.91MB 1.1s\n#4 sha256:5e733ff9c30825005ec05ee10b784276e8034171be7eeaa10d6f876fc7bb5383 12.80MB / 12.80MB 1.0s done\n#4 sha256:4937da28ea60b32af53a8d507ea830228a05f22a7be2ae1ef0134bcd0e3bafba 0B / 68.90MB 1.1s\n#4 sha256:16def9f17d8d9988a074a1d3ae42cb041b261068b3a455c99141bb8df243e9a4 0B / 829.24kB 1.1s\n#4 sha256:5a0c86bcd85d690fae1d36f59c4041c4142835310a431e3f1b00446763d7db73 63.96MB / 105.91MB 1.2s\n#4 sha256:4937da28ea60b32af53a8d507ea830228a05f22a7be2ae1ef0134bcd0e3bafba 4.19MB / 68.90MB 1.2s\n#4 sha256:16def9f17d8d9988a074a1d3ae42cb041b261068b3a455c99141bb8df243e9a4 829.24kB / 829.24kB 1.2s done\n#4 sha256:5a0c86bcd85d690fae1d36f59c4041c4142835310a431e3f1b00446763d7db73 76.55MB / 105.91MB 1.3s\n#4 sha256:03ac08f8f1d3c646d8f456ad0e2307b56511e692bcef7a4d67ec194ba81f59e7 0B / 103B 1.3s\n#4 sha256:5a0c86bcd85d690fae1d36f59c4041c4142835310a431e3f1b00446763d7db73 104.86MB / 105.91MB 1.5s\n#4 sha256:4937da28ea60b32af53a8d507ea830228a05f22a7be2ae1ef0134bcd0e3bafba 19.92MB / 68.90MB 1.5s\n#4 sha256:03ac08f8f1d3c646d8f456ad0e2307b56511e692bcef7a4d67ec194ba81f59e7 103B / 103B 1.3s done\n#4 sha256:4937da28ea60b32af53a8d507ea830228a05f22a7be2ae1ef0134bcd0e3bafba 33.55MB / 68.90MB 1.6s\n#4 sha256:4937da28ea60b32af53a8d507ea830228a05f22a7be2ae1ef0134bcd0e3bafba 47.19MB / 68.90MB 1.7s\n#4 sha256:5a0c86bcd85d690fae1d36f59c4041c4142835310a431e3f1b00446763d7db73 105.91MB / 105.91MB 1.8s done\n#4 sha256:4937da28ea60b32af53a8d507ea830228a05f22a7be2ae1ef0134bcd0e3bafba 59.77MB / 68.90MB 1.8s\n#4 sha256:4937da28ea60b32af53a8d507ea830228a05f22a7be2ae1ef0134bcd0e3bafba 68.90MB / 68.90MB 1.9s\n#4 extracting sha256:d772c6b09cca24a6ec7cb06facff8b7be509b608330bd035f91b70388a94d3b4 1.3s done\n#4 sha256:4937da28ea60b32af53a8d507ea830228a05f22a7be2ae1ef0134bcd0e3bafba 68.90MB / 68.90MB 2.1s done\n#4 extracting sha256:2c56128c63bdf4a1d571ed930304f4eb77e8e2fde7ce03ddf6073e3df9abf8ad\n#4 extracting sha256:2c56128c63bdf4a1d571ed930304f4eb77e8e2fde7ce03ddf6073e3df9abf8ad 0.2s done\n#4 extracting sha256:6c2be99410893469a9e0d8f0ff537b22f651479bf64c5dcf269d2e5267e85749\n#4 extracting sha256:6c2be99410893469a9e0d8f0ff537b22f651479bf64c5dcf269d2e5267e85749 0.4s done\n#4 extracting sha256:5a0c86bcd85d690fae1d36f59c4041c4142835310a431e3f1b00446763d7db73\n#4 extracting sha256:5a0c86bcd85d690fae1d36f59c4041c4142835310a431e3f1b00446763d7db73 3.4s done\n#4 extracting sha256:5e733ff9c30825005ec05ee10b784276e8034171be7eeaa10d6f876fc7bb5383\n#4 extracting sha256:5e733ff9c30825005ec05ee10b784276e8034171be7eeaa10d6f876fc7bb5383 0.5s done\n#4 extracting sha256:4937da28ea60b32af53a8d507ea830228a05f22a7be2ae1ef0134bcd0e3bafba\n#4 extracting sha256:4937da28ea60b32af53a8d507ea830228a05f22a7be2ae1ef0134bcd0e3bafba 1.0s done\n#4 extracting sha256:16def9f17d8d9988a074a1d3ae42cb041b261068b3a455c99141bb8df243e9a4 0.1s done\n#4 extracting sha256:03ac08f8f1d3c646d8f456ad0e2307b56511e692bcef7a4d67ec194ba81f59e7 done\n#4 DONE 9.7s\n\n#5 [2/2] RUN :\n#5 DONE 0.2s\n\n#6 exporting to image\n#6 exporting layers\n#6 exporting layers 0.8s done\n#6 writing image sha256:01fa8979ab58f7ec46c0601bba692a1dd60cdde7c14af3dae5834c32ac4350b3 done\n#6 naming to docker.io/library/example_csharp:test done\n#6 DONE 0.8s\n====================================================================\n+/tmp/viash_test_example_csharp13266273233637531667/test_test/test_executable\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\nSUCCESS! All 1 out of 1 test scripts succeeded!\nCleaning up temporary directory\n\n\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_js14912678526642691167'\n====================================================================\n+/tmp/viash_test_example_js14912678526642691167/build_executable/example_js ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_js:test' with Dockerfile\n[info] Running 'docker build -t example_js:test /tmp/viash_test_example_js14912678526642691167/build_executable -f /tmp/viash_test_example_js14912678526642691167/build_executable/tmp/dockerbuild-example_js-gILYJ6/Dockerfile'\n#0 building with \"default\" instance using docker driver\n\n#1 [internal] load .dockerignore\n#1 transferring context: 2B done\n#1 DONE 0.0s\n\n#2 [internal] load build definition from Dockerfile\n#2 transferring dockerfile: 297B done\n#2 DONE 0.0s\n\n#3 [internal] load metadata for docker.io/library/node:19-bullseye-slim\n#3 ...\n\n#4 [auth] library/node:pull token for registry-1.docker.io\n#4 DONE 0.0s\n\n#3 [internal] load metadata for docker.io/library/node:19-bullseye-slim\n#3 DONE 0.7s\n\n#5 [1/2] FROM docker.io/library/node:19-bullseye-slim@sha256:f58f1fcf5c9ff9e3752993edb4ed6dbd35697124c85a43f3b97aa054500b0534\n#5 resolve docker.io/library/node:19-bullseye-slim@sha256:f58f1fcf5c9ff9e3752993edb4ed6dbd35697124c85a43f3b97aa054500b0534 done\n#5 sha256:f03b40093957615593f2ed142961afb6b540507e0b47e3f7626ba5e02efbbbf1 0B / 31.40MB 0.1s\n#5 sha256:0bfad7312c25e414fc3d0e3640a77bd4b5c74d2118595670999afef9758cb49b 4.19kB / 4.19kB 0.1s done\n#5 sha256:56db04c463e993ac037103947cd590d52fcddcb17ad04285a0ca4c3510c0738c 0B / 46.62MB 0.1s\n#5 sha256:477c7ebfb8500396b86c69952acb17b909a0a63da41e03dd4046e2c809722c6e 0B / 2.76MB 0.1s\n#5 sha256:f58f1fcf5c9ff9e3752993edb4ed6dbd35697124c85a43f3b97aa054500b0534 1.21kB / 1.21kB done\n#5 sha256:63b5ca0f90dbaf64465a83d46276e133eab30410f642808d158bf98928811999 1.37kB / 1.37kB done\n#5 sha256:adbc02574b521bb652d771c8ac0282c724b9fe90c001f3bab0825c32092c9036 6.84kB / 6.84kB done\n#5 sha256:56db04c463e993ac037103947cd590d52fcddcb17ad04285a0ca4c3510c0738c 5.24MB / 46.62MB 0.2s\n#5 sha256:56db04c463e993ac037103947cd590d52fcddcb17ad04285a0ca4c3510c0738c 17.83MB / 46.62MB 0.3s\n#5 sha256:477c7ebfb8500396b86c69952acb17b909a0a63da41e03dd4046e2c809722c6e 2.76MB / 2.76MB 0.3s done\n#5 sha256:8bb4aa3e51be63d4a2e5bd30ab9cd478a916ed3c5c0212a44b96fd743e0e0f2f 0B / 450B 0.3s\n#5 sha256:f03b40093957615593f2ed142961afb6b540507e0b47e3f7626ba5e02efbbbf1 9.44MB / 31.40MB 0.5s\n#5 sha256:56db04c463e993ac037103947cd590d52fcddcb17ad04285a0ca4c3510c0738c 46.62MB / 46.62MB 0.5s\n#5 sha256:8bb4aa3e51be63d4a2e5bd30ab9cd478a916ed3c5c0212a44b96fd743e0e0f2f 450B / 450B 0.4s done\n#5 sha256:f03b40093957615593f2ed142961afb6b540507e0b47e3f7626ba5e02efbbbf1 16.78MB / 31.40MB 0.6s\n#5 sha256:56db04c463e993ac037103947cd590d52fcddcb17ad04285a0ca4c3510c0738c 46.62MB / 46.62MB 0.5s done\n#5 sha256:f03b40093957615593f2ed142961afb6b540507e0b47e3f7626ba5e02efbbbf1 27.26MB / 31.40MB 0.7s\n#5 extracting sha256:f03b40093957615593f2ed142961afb6b540507e0b47e3f7626ba5e02efbbbf1\n#5 sha256:f03b40093957615593f2ed142961afb6b540507e0b47e3f7626ba5e02efbbbf1 31.40MB / 31.40MB 0.8s done\n#5 extracting sha256:f03b40093957615593f2ed142961afb6b540507e0b47e3f7626ba5e02efbbbf1 1.7s done\n#5 extracting sha256:0bfad7312c25e414fc3d0e3640a77bd4b5c74d2118595670999afef9758cb49b done\n#5 extracting sha256:56db04c463e993ac037103947cd590d52fcddcb17ad04285a0ca4c3510c0738c 0.1s\n#5 extracting sha256:56db04c463e993ac037103947cd590d52fcddcb17ad04285a0ca4c3510c0738c 2.7s done\n#5 extracting sha256:477c7ebfb8500396b86c69952acb17b909a0a63da41e03dd4046e2c809722c6e\n#5 extracting sha256:477c7ebfb8500396b86c69952acb17b909a0a63da41e03dd4046e2c809722c6e 0.1s done\n#5 extracting sha256:8bb4aa3e51be63d4a2e5bd30ab9cd478a916ed3c5c0212a44b96fd743e0e0f2f done\n#5 DONE 6.3s\n\n#6 [2/2] RUN :\n#6 DONE 0.2s\n\n#7 exporting to image\n#7 exporting layers\n#7 exporting layers 0.6s done\n#7 writing image sha256:1726d3191c26d16ea95133ce99ac4602f32705dabeb952610983374ee88fcfa9 done\n#7 naming to docker.io/library/example_js:test done\n#7 DONE 0.6s\n====================================================================\n+/tmp/viash_test_example_js14912678526642691167/test_test/test_executable\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\nSUCCESS! All 1 out of 1 test scripts succeeded!\nCleaning up temporary directory\n\n\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_python4678716221227574247'\n====================================================================\n+/tmp/viash_test_example_python4678716221227574247/build_executable/example_python ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_python:test' with Dockerfile\n[info] Running 'docker build -t example_python:test /tmp/viash_test_example_python4678716221227574247/build_executable -f /tmp/viash_test_example_python4678716221227574247/build_executable/tmp/dockerbuild-example_python-LLudw3/Dockerfile'\n#0 building with \"default\" instance using docker driver\n\n#1 [internal] load .dockerignore\n#1 transferring context: 2B done\n#1 DONE 0.0s\n\n#2 [internal] load build definition from Dockerfile\n#2 transferring dockerfile: 296B done\n#2 DONE 0.0s\n\n#3 [auth] library/python:pull token for registry-1.docker.io\n#3 DONE 0.0s\n\n#4 [internal] load metadata for docker.io/library/python:3.10-slim\n#4 DONE 0.8s\n\n#5 [1/2] FROM docker.io/library/python:3.10-slim@sha256:7b03387c44da8695400590becc6430d8a811b6e97838a740e56f58448f437ec0\n#5 CACHED\n\n#6 [2/2] RUN :\n#6 DONE 0.3s\n\n#7 exporting to image\n#7 exporting layers\n#7 exporting layers 0.4s done\n#7 writing image sha256:13402f15817d69fdd363de74166ff94bf58d706d51b4cf1f59cb483b7ee9eefd done\n#7 naming to docker.io/library/example_python:test done\n#7 DONE 0.4s\n====================================================================\n+/tmp/viash_test_example_python4678716221227574247/test_test/test_executable\nCopying 'foo.txt' to 'bar.txt'.\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\nSUCCESS! All 1 out of 1 test scripts succeeded!\nCleaning up temporary directory\n\n\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_r11773636084837468747'\n====================================================================\n+/tmp/viash_test_example_r11773636084837468747/build_executable/example_r ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_r:test' with Dockerfile\n[info] Running 'docker build -t example_r:test /tmp/viash_test_example_r11773636084837468747/build_executable -f /tmp/viash_test_example_r11773636084837468747/build_executable/tmp/dockerbuild-example_r-Wbw7tK/Dockerfile'\n#0 building with \"default\" instance using docker driver\n\n#1 [internal] load .dockerignore\n#1 transferring context: 2B done\n#1 DONE 0.0s\n\n#2 [internal] load build definition from Dockerfile\n#2 transferring dockerfile: 297B done\n#2 DONE 0.0s\n\n#3 [auth] eddelbuettel/r2u:pull token for registry-1.docker.io\n#3 DONE 0.0s\n\n#4 [internal] load metadata for docker.io/eddelbuettel/r2u:22.04\n#4 DONE 0.3s\n\n#5 [1/2] FROM docker.io/eddelbuettel/r2u:22.04@sha256:9cd35dcd5c3b1fbb4cecdf384ccb77c142410fac393e836662fbb7b5400dc614\n#5 DONE 0.0s\n\n#6 [2/2] RUN :\n#6 CACHED\n\n#7 exporting to image\n#7 exporting layers done\n#7 writing image sha256:b46b1d2669b0f7b4e4b1d9dc65e966f1dde8f9ec30c5de0d5ac8b73b40ac8959 done\n#7 naming to docker.io/library/example_r:test done\n#7 DONE 0.0s\n====================================================================\n+/tmp/viash_test_example_r11773636084837468747/test_test/test_executable\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\nCopying 'foo.txt' to 'bar.txt'.\n[1] TRUE\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\nSUCCESS! All 1 out of 1 test scripts succeeded!\nCleaning up temporary directory\n\n\n\n\n\nviash test config.vsh.yaml\n\nRunning tests in temporary directory: '/tmp/viash_test_example_scala16915914089555578173'\n====================================================================\n+/tmp/viash_test_example_scala16915914089555578173/build_executable/example_scala ---verbosity 6 ---setup cachedbuild\n[notice] Building container 'example_scala:test' with Dockerfile\n[info] Running 'docker build -t example_scala:test /tmp/viash_test_example_scala16915914089555578173/build_executable -f /tmp/viash_test_example_scala16915914089555578173/build_executable/tmp/dockerbuild-example_scala-Vkepke/Dockerfile'\n#0 building with \"default\" instance using docker driver\n\n#1 [internal] load .dockerignore\n#1 transferring context: 2B done\n#1 DONE 0.0s\n\n#2 [internal] load build definition from Dockerfile\n#2 transferring dockerfile: 333B done\n#2 DONE 0.0s\n\n#3 [auth] sbtscala/scala-sbt:pull token for registry-1.docker.io\n#3 DONE 0.0s\n\n#4 [internal] load metadata for docker.io/sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n#4 DONE 0.8s\n\n#5 [1/2] FROM docker.io/sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10@sha256:440234e283754375d5ab6bcb35e2d470f9dabeaaeb639d8c0708fac2d3707e0c\n#5 resolve docker.io/sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10@sha256:440234e283754375d5ab6bcb35e2d470f9dabeaaeb639d8c0708fac2d3707e0c done\n#5 sha256:76808e2ea8df2d9cac1d275426e51a2190369f706076c55ac2da3823bef0a019 10.89kB / 10.89kB done\n#5 sha256:301a8b74f71f85f3a31e9c7e7fedd5b001ead5bcf895bc2911c1d260e06bd987 0B / 30.43MB 0.1s\n#5 sha256:440234e283754375d5ab6bcb35e2d470f9dabeaaeb639d8c0708fac2d3707e0c 743B / 743B done\n#5 sha256:06478611ba16efc6663ccf5f22a29c990c53aed6848bc58c54c67dc32d8aef13 3.04kB / 3.04kB done\n#5 sha256:c5c735a83dbd58e1c83f8d52abdc51068e27c00405f53d59802d4954a6b5398a 0B / 16.99MB 0.1s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 0B / 200.85MB 0.1s\n#5 sha256:301a8b74f71f85f3a31e9c7e7fedd5b001ead5bcf895bc2911c1d260e06bd987 15.11MB / 30.43MB 0.2s\n#5 sha256:c5c735a83dbd58e1c83f8d52abdc51068e27c00405f53d59802d4954a6b5398a 1.05MB / 16.99MB 0.2s\n#5 sha256:301a8b74f71f85f3a31e9c7e7fedd5b001ead5bcf895bc2911c1d260e06bd987 30.43MB / 30.43MB 0.3s\n#5 sha256:c5c735a83dbd58e1c83f8d52abdc51068e27c00405f53d59802d4954a6b5398a 16.99MB / 16.99MB 0.3s\n#5 sha256:301a8b74f71f85f3a31e9c7e7fedd5b001ead5bcf895bc2911c1d260e06bd987 30.43MB / 30.43MB 0.3s done\n#5 sha256:c5c735a83dbd58e1c83f8d52abdc51068e27c00405f53d59802d4954a6b5398a 16.99MB / 16.99MB 0.4s done\n#5 sha256:2af8e2a543d81b57575a2e457bd1e98ffc061b15639dac3be5ff6c2702b9ea1a 0B / 175B 0.4s\n#5 sha256:14d68137d870fdc4bc849fbe5c5571ca3e6d9a7b2c5bf1c7e928ccf716dd3b4a 0B / 29.75MB 0.4s\n#5 sha256:2af8e2a543d81b57575a2e457bd1e98ffc061b15639dac3be5ff6c2702b9ea1a 175B / 175B 0.5s done\n#5 extracting sha256:301a8b74f71f85f3a31e9c7e7fedd5b001ead5bcf895bc2911c1d260e06bd987 0.1s\n#5 sha256:320659737461e071e3d809231861a7487daaa79805c57f97015ff020f34a939a 0B / 23.71MB 0.5s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 14.68MB / 200.85MB 0.7s\n#5 sha256:14d68137d870fdc4bc849fbe5c5571ca3e6d9a7b2c5bf1c7e928ccf716dd3b4a 3.15MB / 29.75MB 0.7s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 28.21MB / 200.85MB 0.9s\n#5 sha256:14d68137d870fdc4bc849fbe5c5571ca3e6d9a7b2c5bf1c7e928ccf716dd3b4a 18.87MB / 29.75MB 0.9s\n#5 sha256:320659737461e071e3d809231861a7487daaa79805c57f97015ff020f34a939a 10.49MB / 23.71MB 0.9s\n#5 sha256:14d68137d870fdc4bc849fbe5c5571ca3e6d9a7b2c5bf1c7e928ccf716dd3b4a 27.42MB / 29.75MB 1.0s\n#5 sha256:320659737461e071e3d809231861a7487daaa79805c57f97015ff020f34a939a 16.78MB / 23.71MB 1.0s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 41.28MB / 200.85MB 1.1s\n#5 sha256:14d68137d870fdc4bc849fbe5c5571ca3e6d9a7b2c5bf1c7e928ccf716dd3b4a 29.75MB / 29.75MB 1.1s done\n#5 sha256:320659737461e071e3d809231861a7487daaa79805c57f97015ff020f34a939a 22.02MB / 23.71MB 1.1s\n#5 sha256:1dea7716181a505cea41832dc84691b858a8f64471cb352d8c29cec06e428aeb 0B / 40.48MB 1.1s\n#5 sha256:320659737461e071e3d809231861a7487daaa79805c57f97015ff020f34a939a 23.71MB / 23.71MB 1.1s done\n#5 sha256:c9480a4b593fb5abc117a5e01c80d8495c9fd89e743757730c712545f425c9f3 0B / 183B 1.2s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 54.69MB / 200.85MB 1.3s\n#5 sha256:c9480a4b593fb5abc117a5e01c80d8495c9fd89e743757730c712545f425c9f3 183B / 183B 1.3s done\n#5 sha256:812216efaf878f5ff8086b6efdccec1cb090228107efd62db47d048c927c4f6a 0B / 4.33kB 1.3s\n#5 sha256:1dea7716181a505cea41832dc84691b858a8f64471cb352d8c29cec06e428aeb 7.34MB / 40.48MB 1.4s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 71.30MB / 200.85MB 1.5s\n#5 sha256:1dea7716181a505cea41832dc84691b858a8f64471cb352d8c29cec06e428aeb 16.78MB / 40.48MB 1.5s\n#5 sha256:812216efaf878f5ff8086b6efdccec1cb090228107efd62db47d048c927c4f6a 4.33kB / 4.33kB 1.4s done\n#5 sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 0B / 32B 1.5s\n#5 sha256:1dea7716181a505cea41832dc84691b858a8f64471cb352d8c29cec06e428aeb 25.83MB / 40.48MB 1.6s\n#5 sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 32B / 32B 1.5s done\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 0B / 214.15MB 1.6s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 87.03MB / 200.85MB 1.7s\n#5 sha256:1dea7716181a505cea41832dc84691b858a8f64471cb352d8c29cec06e428aeb 34.60MB / 40.48MB 1.7s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 104.86MB / 200.85MB 1.9s\n#5 sha256:1dea7716181a505cea41832dc84691b858a8f64471cb352d8c29cec06e428aeb 40.48MB / 40.48MB 1.8s done\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 16.78MB / 214.15MB 1.9s\n#5 sha256:2c0021742fe2b9491f62c3d89da10492c175081bd17d77efd0f22a298c37ad64 0B / 222B 1.9s\n#5 sha256:2c0021742fe2b9491f62c3d89da10492c175081bd17d77efd0f22a298c37ad64 222B / 222B 1.9s done\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 116.39MB / 200.85MB 2.1s\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 35.65MB / 214.15MB 2.1s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 136.31MB / 200.85MB 2.3s\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 61.87MB / 214.15MB 2.3s\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 77.59MB / 214.15MB 2.4s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 153.09MB / 200.85MB 2.5s\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 111.15MB / 214.15MB 2.7s\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 125.83MB / 214.15MB 2.8s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 188.74MB / 200.85MB 3.1s\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 159.38MB / 214.15MB 3.1s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 200.28MB / 200.85MB 3.2s\n#5 extracting sha256:301a8b74f71f85f3a31e9c7e7fedd5b001ead5bcf895bc2911c1d260e06bd987 2.7s done\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 176.16MB / 214.15MB 3.3s\n#5 extracting sha256:c5c735a83dbd58e1c83f8d52abdc51068e27c00405f53d59802d4954a6b5398a\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 192.94MB / 214.15MB 3.5s\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 214.15MB / 214.15MB 3.7s\n#5 sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 200.85MB / 200.85MB 3.8s done\n#5 extracting sha256:c5c735a83dbd58e1c83f8d52abdc51068e27c00405f53d59802d4954a6b5398a 1.4s done\n#5 sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 214.15MB / 214.15MB 4.9s done\n#5 extracting sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b\n#5 extracting sha256:5fb9fa7513e6a72bf7daf0a75e97c441f1ed7ff69c8609d1c429fdf3a6dc846b 3.0s done\n#5 extracting sha256:2af8e2a543d81b57575a2e457bd1e98ffc061b15639dac3be5ff6c2702b9ea1a\n#5 extracting sha256:2af8e2a543d81b57575a2e457bd1e98ffc061b15639dac3be5ff6c2702b9ea1a done\n#5 extracting sha256:14d68137d870fdc4bc849fbe5c5571ca3e6d9a7b2c5bf1c7e928ccf716dd3b4a 0.1s\n#5 extracting sha256:14d68137d870fdc4bc849fbe5c5571ca3e6d9a7b2c5bf1c7e928ccf716dd3b4a 0.7s done\n#5 extracting sha256:320659737461e071e3d809231861a7487daaa79805c57f97015ff020f34a939a 0.1s\n#5 extracting sha256:320659737461e071e3d809231861a7487daaa79805c57f97015ff020f34a939a 0.2s done\n#5 extracting sha256:1dea7716181a505cea41832dc84691b858a8f64471cb352d8c29cec06e428aeb\n#5 extracting sha256:1dea7716181a505cea41832dc84691b858a8f64471cb352d8c29cec06e428aeb 1.8s done\n#5 extracting sha256:c9480a4b593fb5abc117a5e01c80d8495c9fd89e743757730c712545f425c9f3\n#5 extracting sha256:c9480a4b593fb5abc117a5e01c80d8495c9fd89e743757730c712545f425c9f3 done\n#5 extracting sha256:812216efaf878f5ff8086b6efdccec1cb090228107efd62db47d048c927c4f6a done\n#5 extracting sha256:4f4fb700ef54461cfa02571ae0db9a0dc1e0cdb5577484a6d75e68dc38e8acc1 done\n#5 extracting sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c\n#5 extracting sha256:bb7a0c6ab9c129a399a3c8f034cd0de30406766d61a6694f150b4ab9e64c560c 2.4s done\n#5 extracting sha256:2c0021742fe2b9491f62c3d89da10492c175081bd17d77efd0f22a298c37ad64 done\n#5 DONE 16.8s\n\n#6 [2/2] RUN :\n#6 DONE 0.2s\n\n#7 exporting to image\n#7 exporting layers\n#7 exporting layers 0.5s done\n#7 writing image sha256:93e7053b64e2ea7421da50144ad2ebc73790e1a719704b8832e5e67b3eedd6e1 done\n#7 naming to docker.io/library/example_scala:test done\n#7 DONE 0.6s\n====================================================================\n+/tmp/viash_test_example_scala16915914089555578173/test_test/test_executable\nwarning: 1 deprecation\nwarning: 1 deprecation (since 2.13.3)\nwarning: 2 deprecations in total; re-run with -deprecation for details\n&gt;&gt;&gt; Create input test file\n&gt;&gt;&gt; Run executable\nwarning: 1 deprecation; re-run with -deprecation for details\nCopying 'foo.txt' to 'bar.txt'.\n&gt;&gt;&gt; Check whether output file exists\n&gt;&gt;&gt; Check whether input and output file are the same\n&gt;&gt;&gt; Test finished successfully\n====================================================================\nSUCCESS! All 1 out of 1 test scripts succeeded!\nCleaning up temporary directory\n\n\n\n\n\nWhen running viash test, Viash will follow the following steps:\n\nCreate a temporary directory\nBuild the component into the main executable\n(Re-)build the Docker image for the component\nIterate over all unit test scripts:\n\n\nBuild the unit test into an executable\nRun the unit test, passing the main executable as an argument\n\n\nReturn exit code 0 if all of the above steps succeed, otherwise 0"
  },
  {
    "objectID": "guide/component/unit-testing.html#bonus-unit-testing-all-of-the-components",
    "href": "guide/component/unit-testing.html#bonus-unit-testing-all-of-the-components",
    "title": "Unit testing",
    "section": "Bonus: unit testing all of the components",
    "text": "Bonus: unit testing all of the components\nIf you have multiple Viash components located in a directory called src/, what happens when you run the following?\nviash ns test --parallel --src src/"
  },
  {
    "objectID": "guide/project/batch-processing.html",
    "href": "guide/project/batch-processing.html",
    "title": "Batch processing",
    "section": "",
    "text": "Within this project it’s possible to do all of the same things mentioned in the “Component” guide such as build a target executable with viash build and test a component with viash test. However, doing this for all components in the repository can bet quite tedious.\nLuckily, Viash provides a set of commands for building, testing or inspecting all Viash components in the current namespace (ns)."
  },
  {
    "objectID": "guide/project/batch-processing.html#build-all-components",
    "href": "guide/project/batch-processing.html#build-all-components",
    "title": "Batch processing",
    "section": "Build all components",
    "text": "Build all components\nYou can generate your first full development build using the viash ns build command.\nviash ns build --setup cachedbuild\n\n\nOutput\n\n\n\nExporting combine_columns (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/combine_columns\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/combine_columns:dev' with Dockerfile\nExporting combine_columns (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/combine_columns\nExporting remove_comments (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/remove_comments\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/remove_comments:dev' with Dockerfile\nExporting remove_comments (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/remove_comments\nExporting take_column (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/take_column\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/take_column:dev' with Dockerfile\nExporting take_column (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/take_column\n\u001b[32mAll 6 configs built successfully\u001b[0m\n\n\n\nHere are some useful optional arguments:\n\n--parallel: Run multiple builds in parallel.\n--setup cachedbuild: Build Docker images using the cachedbuild strategy.\n--query demo: Only select components that have ‘demo’ in the namespace or name."
  },
  {
    "objectID": "guide/project/batch-processing.html#test-all-components",
    "href": "guide/project/batch-processing.html#test-all-components",
    "title": "Batch processing",
    "section": "Test all components",
    "text": "Test all components\nYou can run all of the component tests using the viash ns test command.\nviash ns test\n\n\nOutput\n\n\n\n           namespace        functionality             platform            test_name exit_code duration               result\u001b[0m\n                demo      combine_columns               docker                start                                        \u001b[0m\nThe working directory for the namespace tests is /tmp/viash_ns_test16910614375403911762\n\u001b[32m                demo      combine_columns               docker     build_executable         0        0              SUCCESS\u001b[0m\n\u001b[33m                demo      combine_columns               docker                tests        -1        0              MISSING\u001b[0m\nno tests found\n====================================================================\n                demo      remove_comments               docker                start                                        \u001b[0m\n\u001b[32m                demo      remove_comments               docker     build_executable         0        0              SUCCESS\u001b[0m\n\u001b[32m                demo      remove_comments               docker              test.sh         0        1              SUCCESS\u001b[0m\n                demo          take_column               docker                start                                        \u001b[0m\n\u001b[32m                demo          take_column               docker     build_executable         0        0              SUCCESS\u001b[0m\n\u001b[33m                demo          take_column               docker                tests        -1        0              MISSING\u001b[0m\nno tests found\n====================================================================\n\u001b[33mNot all configs built and tested successfully\u001b[0m\n  \u001b[33m2/6 tests missing\u001b[0m\n  \u001b[32m4/6 configs built and tested successfully\u001b[0m"
  },
  {
    "objectID": "guide/project/batch-processing.html#listing-components",
    "href": "guide/project/batch-processing.html#listing-components",
    "title": "Batch processing",
    "section": "Listing components",
    "text": "Listing components\nYou can run list all components using the viash ns list command.\nviash ns list\n\n\nOutput\n\n\n\n- functionality:\n    name: \"combine_columns\"\n    namespace: \"demo\"\n    version: \"dev\"\n    authors: []\n    arguments:\n    - type: \"file\"\n      name: \"--input\"\n      alternatives:\n      - \"-i\"\n      example: []\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"input\"\n      multiple: true\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"file\"\n      name: \"--output\"\n      alternatives:\n      - \"-o\"\n      example: []\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"output\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"string\"\n      name: \"--id\"\n      alternatives: []\n      example: []\n      default:\n      - \"combine_columns\"\n      required: false\n      choices: []\n      direction: \"input\"\n      multiple: false\n\u001b[32mAll 3 configs parsed successfully\u001b[0m\n      multiple_sep: \":\"\n      dest: \"par\"\n    argument_groups: []\n    resources:\n    - type: \"r_script\"\n      path: \"script.R\"\n      is_executable: true\n      parent: \"file:/home/runner/work/website/website/guide/_viash_project_template/src/demo/combine_columns/config.vsh.yaml\"\n    test_resources: []\n    status: \"enabled\"\n    requirements:\n      commands: []\n    set_wd_to_resources_dir: false\n  platforms:\n  - type: \"docker\"\n    id: \"docker\"\n    image: \"eddelbuettel/r2u:22.04\"\n    target_organization: \"viash-io/viash_project_template\"\n    target_registry: \"ghcr.io\"\n    namespace_separator: \"/\"\n    resolve_volume: \"Automatic\"\n    chown: true\n    port: []\n    setup_strategy: \"ifneedbepullelsecachedbuild\"\n    run_args: []\n    target_image_source: \"https://github.com/viash-io/viash_project_template\"\n    setup: []\n    test_setup: []\n  - type: \"nextflow\"\n    id: \"nextflow\"\n    variant: \"vdsl3\"\n    directives:\n      accelerator: {}\n      conda: []\n      containerOptions: []\n      label: []\n      module: []\n      pod: []\n      publishDir: []\n      queue: []\n      tag: \"$id\"\n    auto:\n      simplifyInput: true\n      simplifyOutput: true\n      transcript: false\n      publish: false\n    debug: false\n    container: \"docker\"\n  info:\n    config: \"/home/runner/work/website/website/guide/_viash_project_template/src/demo/combine_columns/config.vsh.yaml\"\n    viash_version: \"0.7.1\"\n    git_commit: \"ffa7b1bee3fb192bec568a772b44c6b527cd941b\"\n    git_remote: \"https://github.com/viash-io/viash_project_template.git\"\n- functionality:\n    name: \"remove_comments\"\n    namespace: \"demo\"\n    version: \"dev\"\n    authors: []\n    arguments:\n    - type: \"file\"\n      name: \"--input\"\n      alternatives:\n      - \"-i\"\n      example:\n      - \"file.tsv\"\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"file\"\n      name: \"--output\"\n      alternatives:\n      - \"-o\"\n      example:\n      - \"file.tsv\"\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"output\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"string\"\n      name: \"--id\"\n      alternatives: []\n      example: []\n      default:\n      - \"remove_comments\"\n      required: false\n      choices: []\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    argument_groups: []\n    resources:\n    - type: \"bash_script\"\n      path: \"script.sh\"\n      is_executable: true\n      parent: \"file:/home/runner/work/website/website/guide/_viash_project_template/src/demo/remove_comments/config.vsh.yaml\"\n    test_resources:\n    - type: \"bash_script\"\n      path: \"test.sh\"\n      is_executable: true\n      parent: \"file:/home/runner/work/website/website/guide/_viash_project_template/src/demo/remove_comments/config.vsh.yaml\"\n    status: \"enabled\"\n    requirements:\n      commands: []\n    set_wd_to_resources_dir: false\n  platforms:\n  - type: \"docker\"\n    id: \"docker\"\n    image: \"ubuntu:20.04\"\n    target_organization: \"viash-io/viash_project_template\"\n    target_registry: \"ghcr.io\"\n    namespace_separator: \"/\"\n    resolve_volume: \"Automatic\"\n    chown: true\n    port: []\n    setup_strategy: \"ifneedbepullelsecachedbuild\"\n    run_args: []\n    target_image_source: \"https://github.com/viash-io/viash_project_template\"\n    setup: []\n    test_setup: []\n  - type: \"nextflow\"\n    id: \"nextflow\"\n    variant: \"vdsl3\"\n    directives:\n      accelerator: {}\n      conda: []\n      containerOptions: []\n      label: []\n      module: []\n      pod: []\n      publishDir: []\n      queue: []\n      tag: \"$id\"\n    auto:\n      simplifyInput: true\n      simplifyOutput: true\n      transcript: false\n      publish: false\n    debug: false\n    container: \"docker\"\n  info:\n    config: \"/home/runner/work/website/website/guide/_viash_project_template/src/demo/remove_comments/config.vsh.yaml\"\n    viash_version: \"0.7.1\"\n    git_commit: \"ffa7b1bee3fb192bec568a772b44c6b527cd941b\"\n    git_remote: \"https://github.com/viash-io/viash_project_template.git\"\n- functionality:\n    name: \"take_column\"\n    namespace: \"demo\"\n    version: \"dev\"\n    authors: []\n    arguments:\n    - type: \"file\"\n      name: \"--input\"\n      alternatives:\n      - \"-i\"\n      example: []\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"file\"\n      name: \"--output\"\n      alternatives:\n      - \"-o\"\n      example: []\n      default: []\n      must_exist: true\n      create_parent: true\n      required: true\n      direction: \"output\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"integer\"\n      name: \"--column\"\n      alternatives: []\n      example: []\n      default:\n      - 2\n      required: false\n      choices: []\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    - type: \"string\"\n      name: \"--id\"\n      alternatives: []\n      example: []\n      default:\n      - \"take_column\"\n      required: false\n      choices: []\n      direction: \"input\"\n      multiple: false\n      multiple_sep: \":\"\n      dest: \"par\"\n    argument_groups: []\n    resources:\n    - type: \"python_script\"\n      path: \"script.py\"\n      is_executable: true\n      parent: \"file:/home/runner/work/website/website/guide/_viash_project_template/src/demo/take_column/config.vsh.yaml\"\n    test_resources: []\n    status: \"enabled\"\n    requirements:\n      commands: []\n    set_wd_to_resources_dir: false\n  platforms:\n  - type: \"docker\"\n    id: \"docker\"\n    image: \"python:3.10-slim\"\n    target_organization: \"viash-io/viash_project_template\"\n    target_registry: \"ghcr.io\"\n    namespace_separator: \"/\"\n    resolve_volume: \"Automatic\"\n    chown: true\n    port: []\n    setup_strategy: \"ifneedbepullelsecachedbuild\"\n    run_args: []\n    target_image_source: \"https://github.com/viash-io/viash_project_template\"\n    setup:\n    - type: \"python\"\n      user: false\n      packages:\n      - \"pandas\"\n      pip: []\n      pypi: []\n      git: []\n      github: []\n      gitlab: []\n      mercurial: []\n      svn: []\n      bazaar: []\n      url: []\n      script: []\n      upgrade: true\n    test_setup: []\n  - type: \"nextflow\"\n    id: \"nextflow\"\n    variant: \"vdsl3\"\n    directives:\n      accelerator: {}\n      conda: []\n      containerOptions: []\n      label: []\n      module: []\n      pod: []\n      publishDir: []\n      queue: []\n      tag: \"$id\"\n    auto:\n      simplifyInput: true\n      simplifyOutput: true\n      transcript: false\n      publish: false\n    debug: false\n    container: \"docker\"\n  info:\n    config: \"/home/runner/work/website/website/guide/_viash_project_template/src/demo/take_column/config.vsh.yaml\"\n    viash_version: \"0.7.1\"\n    git_commit: \"ffa7b1bee3fb192bec568a772b44c6b527cd941b\"\n    git_remote: \"https://github.com/viash-io/viash_project_template.git\""
  },
  {
    "objectID": "guide/project/batch-processing.html#custom-batch-processing",
    "href": "guide/project/batch-processing.html#custom-batch-processing",
    "title": "Batch processing",
    "section": "Custom batch processing",
    "text": "Custom batch processing\nThe viash ns exec command can be used to run a command on every component.\nviash ns exec \"echo Hello {}\"\n\n\nOutput\n\n\n\n+ echo Hello /home/runner/work/website/website/guide/_viash_project_template/src/demo/combine_columns/config.vsh.yaml\n  Exit code: 0\n\n  Output:\n+ echo Hello /home/runner/work/website/website/guide/_viash_project_template/src/demo/remove_comments/config.vsh.yaml\nHello /home/runner/work/website/website/guide/_viash_project_template/src/demo/combine_columns/config.vsh.yaml\n\nHello /home/runner/work/website/website/guide/_viash_project_template/src/demo/remove_comments/config.vsh.yaml\n\n  Exit code: 0\n\n  Output:\n+ echo Hello /home/runner/work/website/website/guide/_viash_project_template/src/demo/take_column/config.vsh.yaml\n  Exit code: 0\nHello /home/runner/work/website/website/guide/_viash_project_template/src/demo/take_column/config.vsh.yaml\n\n\n  Output:"
  },
  {
    "objectID": "guide/project/batch-processing.html#tips",
    "href": "guide/project/batch-processing.html#tips",
    "title": "Batch processing",
    "section": "Tips",
    "text": "Tips\n\nParallel builds\nSome commands shown above can be optimized by adding the --parallel option:\n\nviash ns build --parallel will build in parallel\nviash ns test --parallel will test in parallel\n\nFor example:\nviash ns test --parallel\n\n\nOutput\n\n\n\n           namespace        functionality             platform            test_name exit_code duration               result\u001b[0m\nThe working directory for the namespace tests is /tmp/viash_ns_test1076537017941049380\n                demo      combine_columns               docker                start                                        \u001b[0m\n                demo      remove_comments               docker                start                                        \u001b[0m\n\u001b[32m                demo      combine_columns               docker     build_executable         0        0              SUCCESS\u001b[0m\n\u001b[33m                demo      combine_columns               docker                tests        -1        0              MISSING\u001b[0m\nno tests found\n====================================================================\n                demo          take_column               docker                start                                        \u001b[0m\n\u001b[32m                demo          take_column               docker     build_executable         0        1              SUCCESS\u001b[0m\n\u001b[33m                demo          take_column               docker                tests        -1        0              MISSING\u001b[0m\nno tests found\n====================================================================\n\u001b[32m                demo      remove_comments               docker     build_executable         0        1              SUCCESS\u001b[0m\n\u001b[32m                demo      remove_comments               docker              test.sh         0        1              SUCCESS\u001b[0m\n\u001b[33mNot all configs built and tested successfully\u001b[0m\n  \u001b[33m2/6 tests missing\u001b[0m\n  \u001b[32m4/6 configs built and tested successfully\u001b[0m\n\n\n\n\n\nSubset to components or namespaces\nIn a development context, one often needs to rebuild one or a few components rather than the full repository. For this situation, viash ns has the option to specify query arguments: --query, query_name and query_namespace. We refer to the reference documentation for details and illustrate the use using an example:\nviash ns build --query \"^.*columns$\"\n\n\nOutput\n\n\n\nExporting combine_columns (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/combine_columns\nExporting combine_columns (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/combine_columns\n\u001b[33mNot all configs built successfully\u001b[0m\n  \u001b[33m2/4 configs were disabled\u001b[0m\n  \u001b[32m2/4 configs built successfully\u001b[0m\n\n\n\nAs shown here, the query arguments accept regular expressions."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-and-use-a-module.html",
    "href": "guide/nextflow_vdsl3/create-and-use-a-module.html",
    "title": "Create and use a module",
    "section": "",
    "text": "Creating a VDSL3 module is as simple as adding { type: nextflow } to the platforms section in the Viash config. Luckily, our previous example already contained such an entry:"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-and-use-a-module.html#generate-module",
    "href": "guide/nextflow_vdsl3/create-and-use-a-module.html#generate-module",
    "title": "Create and use a module",
    "section": "Generating a VDSL3 module",
    "text": "Generating a VDSL3 module\nWe will now turn the Viash component into a VDSL3 module. By default, the viash build command will select the first platform in the list of platforms. To select the nextflow platform, use the --platform nextflow argument, or -p nextflow for short.\n\nviash build config.vsh.yaml -o target -p nextflow\n\nThis will generate a Nextflow module in the target/ directory:\n\ntree target\n\ntarget\n├── main.nf\n└── nextflow.config\n\n0 directories, 2 files\n\n\nThis main.nf file is both a standalone Nextflow pipeline and a module which can be imported as part of another pipeline.\n\n\n\n\n\n\nTip\n\n\n\nIn larger projects it’s recommended to use the viash ns build command to build all of the components in one go. Give it a try!"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-and-use-a-module.html#run-module",
    "href": "guide/nextflow_vdsl3/create-and-use-a-module.html#run-module",
    "title": "Create and use a module",
    "section": "Running a module as a standalone pipeline",
    "text": "Running a module as a standalone pipeline\nUnlike typical Nextflow modules, VDSL3 modules can actually be used as a standalone pipeline.\nTo run a VDSL3 module as a standalone pipeline, you need to specify the input parameters and a --publish_dir parameter, as Nextflow will automatically choose the parameter names of the output files.\nYou can run the executable by providing a value for --input and --publish_dir:\n\nnextflow run target/main.nf --input config.vsh.yaml --publish_dir output/\n\nN E X T F L O W  ~  version 23.10.0\nLaunching `target/main.nf` [pensive_lamarr] DSL2 - revision: 61bd91894e\n[-        ] process &gt; example_bash:processWf:exam... -\n\n[-        ] process &gt; example_bash:processWf:exam... -\n[-        ] process &gt; example_bash:publishStatesS... -\n\nexecutor &gt;  local (1)\n[23/c1b630] process &gt; example_bash:processWf:exam... [  0%] 0 of 1\n[-        ] process &gt; example_bash:publishStatesS... -\n\nexecutor &gt;  local (2)\n[23/c1b630] process &gt; example_bash:processWf:exam... [100%] 1 of 1 ✔\n[40/81e58b] process &gt; example_bash:publishStatesS... [  0%] 0 of 1\n\nexecutor &gt;  local (2)\n[23/c1b630] process &gt; example_bash:processWf:exam... [100%] 1 of 1 ✔\n[40/81e58b] process &gt; example_bash:publishStatesS... [100%] 1 of 1 ✔\n\n\nThis results in the following output:\n\ntree output\n\noutput\n├── run.example_bash.output.txt\n└── run.example_bash.state.yaml\n\n0 directories, 2 files\n\n\nThe pipeline help can be shown by passing the --help parameter (Output not shown).\nnextflow run target/main.nf --help"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-and-use-a-module.html#param-list",
    "href": "guide/nextflow_vdsl3/create-and-use-a-module.html#param-list",
    "title": "Create and use a module",
    "section": "Passing a parameter list",
    "text": "Passing a parameter list\nEvery VDSL3 can accept a list of parameters to populate a Nextflow channel with.\nFor example, we create a set of input files which we want to process in parallel.\n\ntouch sample1.txt sample2.txt sample3.txt sample4.txt\n\nNext, we create a YAML file param_list.yaml containing an id and an input value for each parameter entry.\n- id: sample1\n  input: /tmp/Rtmp8LmNIJ/create-a-module29f8784fa6da/bash/sample1.txt\n- id: sample2\n  input: /tmp/Rtmp8LmNIJ/create-a-module29f8784fa6da/bash/sample2.txt\n- id: sample3\n  input: /tmp/Rtmp8LmNIJ/create-a-module29f8784fa6da/bash/sample3.txt\n- id: sample4\n  input: /tmp/Rtmp8LmNIJ/create-a-module29f8784fa6da/bash/sample4.txt\nYou can run the pipeline on the list of parameters using the --param_list parameter.\n\nnextflow run target/main.nf --param_list param_list.yaml --publish_dir output2\n\nN E X T F L O W  ~  version 23.10.0\nLaunching `target/main.nf` [golden_poincare] DSL2 - revision: 61bd91894e\n[-        ] process &gt; example_bash:processWf:exam... -\n\n[-        ] process &gt; example_bash:processWf:exam... -\n[-        ] process &gt; example_bash:publishStatesS... -\n\nexecutor &gt;  local (2)\n[6d/6f7028] process &gt; example_bash:processWf:exam... [  0%] 0 of 4\n[-        ] process &gt; example_bash:publishStatesS... -\n\nexecutor &gt;  local (4)\n[74/1e7ed1] process &gt; example_bash:processWf:exam... [ 50%] 2 of 4\n[-        ] process &gt; example_bash:publishStatesS... [  0%] 0 of 2\n\nexecutor &gt;  local (8)\n[74/1e7ed1] process &gt; example_bash:processWf:exam... [100%] 4 of 4 ✔\n[03/43d9ee] process &gt; example_bash:publishStatesS... [ 50%] 2 of 4\n\nexecutor &gt;  local (8)\n[74/1e7ed1] process &gt; example_bash:processWf:exam... [100%] 4 of 4 ✔\n[f9/264f79] process &gt; example_bash:publishStatesS... [100%] 4 of 4 ✔\n\nexecutor &gt;  local (8)\n[74/1e7ed1] process &gt; example_bash:processWf:exam... [100%] 4 of 4 ✔\n[f9/264f79] process &gt; example_bash:publishStatesS... [100%] 4 of 4 ✔\n\n\nThis results in the following outputs:\n\ntree output2\n\noutput2\n├── sample1.example_bash.output.txt\n├── sample1.example_bash.state.yaml\n├── sample2.example_bash.output.txt\n├── sample2.example_bash.state.yaml\n├── sample3.example_bash.output.txt\n├── sample3.example_bash.state.yaml\n├── sample4.example_bash.output.txt\n└── sample4.example_bash.state.yaml\n\n0 directories, 8 files\n\n\n\n\n\n\n\n\nTip\n\n\n\nInstead of a YAML, you can also pass a JSON or a CSV to the --param_list parameter."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-and-use-a-module.html#include-module",
    "href": "guide/nextflow_vdsl3/create-and-use-a-module.html#include-module",
    "title": "Create and use a module",
    "section": "Module as part of a pipeline",
    "text": "Module as part of a pipeline\nThis module can also be used as part of a Nextflow pipeline. Below is a short preview of what this looks like.\ninclude { mymodule1 } from 'target/nextflow/mymodule1/main.nf'\ninclude { mymodule2 } from 'target/nextflow/mymodule2/main.nf'\n\nworkflow {\n  Channel.fromList([\n    [\n      // a unique identifier for this tuple\n      \"myid\", \n      // the state for this tuple\n      [\n        input: file(\"in.txt\"),\n        module1_k: 10,\n        module2_k: 4\n      ]\n    ]\n  ])\n    | mymodule1.run(\n      // use a hashmap to define which part of the state is used to run mymodule1\n      fromState: [\n        input: \"input\",\n        k: \"module1_k\"\n      ],\n      // use a hashmap to define how the output of mymodule1 is stored back into the state\n      toState: [\n        module1_output: \"output\"\n      ]\n    )\n    | mymodule2.run(\n      // use a closure to define which data is used to run mymodule2\n      fromState: { id, state -&gt; \n        [\n          input: state.module1_output,\n          k: state.module2_k\n        ]\n      },\n      // use a closure to return only the output of module2 as a new state\n      toState: { id, output, state -&gt;\n        output\n      },\n      auto: [\n        publish: true\n      ]\n    )\n}\nWe will discuss building pipelines with VDSL3 modules in more detail in Create a pipeline."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html",
    "title": "Create a pipeline",
    "section": "",
    "text": "This guide explains how to create an example pipeline that’s closer to a typical use-case of a Nextflow bioinformatics pipeline."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#get-the-template-project",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#get-the-template-project",
    "title": "Create a pipeline",
    "section": "Get the template project",
    "text": "Get the template project\nTo get started with building a pipeline, we provide a template project which already contains a few components. First create a new repository by clicking the “Use this template” button in the viash_project_template repository or clicking the button below.\nUse project template\nThen clone the repository using the following command.\ngit clone https://github.com/youruser/my_first_pipeline.git\nThe pipeline already contains three components with which we will build the following pipeline:\n\n\n\n\ngraph LR\n   A(file?.tsv) --&gt; B[/remove_comments/]\n   B --&gt; C[/take_column/]\n   C --&gt; D[/combine_columns/]\n   D --&gt; E(output)\n\n\n\n\n\n\nremove_comments is a Bash script which removes all lines starting with a # from a file.\ntake_column is a Python script which extracts one of the columns in a TSV file.\ncombine_columns is an R script which combines multiple files into a TSV."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#build-the-vdsl3-modules",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#build-the-vdsl3-modules",
    "title": "Create a pipeline",
    "section": "Build the VDSL3 modules",
    "text": "Build the VDSL3 modules\nFirst, we need to build the components into VDSL3 modules.\n\nviash ns build --setup cachedbuild --parallel\n\nExporting combine_columns (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/combine_columns\nExporting remove_comments (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/remove_comments\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/combine_columns:dev' with Dockerfile\nExporting take_column (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/take_column\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/take_column:dev' with Dockerfile\nExporting combine_columns (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/combine_columns\nExporting remove_comments (demo) =docker=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/docker/demo/remove_comments\n[notice] Building container 'ghcr.io/viash-io/viash_project_template/demo/remove_comments:dev' with Dockerfile\nExporting take_column (demo) =nextflow=&gt; /home/runner/work/website/website/guide/_viash_project_template/target/nextflow/demo/take_column\n\u001b[32mAll 6 configs built successfully\u001b[0m\n\n\nOnce everything is built, a new target directory has been created containing the executables and modules grouped per platform:\n\ntree target\n\ntarget\n├── docker\n│   └── demo\n│       ├── combine_columns\n│       │   └── combine_columns\n│       ├── remove_comments\n│       │   └── remove_comments\n│       └── take_column\n│           └── take_column\n└── nextflow\n    └── demo\n        ├── combine_columns\n        │   ├── main.nf\n        │   └── nextflow.config\n        ├── remove_comments\n        │   ├── main.nf\n        │   └── nextflow.config\n        └── take_column\n            ├── main.nf\n            └── nextflow.config\n\n10 directories, 9 files"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#importing-a-vdsl3-module",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#importing-a-vdsl3-module",
    "title": "Create a pipeline",
    "section": "Importing a VDSL3 module",
    "text": "Importing a VDSL3 module\nAfter building a VDSL3 module from A VDSL3 module can be imported just like any other Nextflow module.\nExample:\ninclude { mymodule } from 'target/nextflow/mymodule/main.nf'"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#vdsl3-module-interface",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#vdsl3-module-interface",
    "title": "Create a pipeline",
    "section": "VDSL3 module interface",
    "text": "VDSL3 module interface\nVDSL3 modules are actually workflows which take one channel and emit one channel. It expects the channel events to be tuples containing an ‘id’ and a ‘state’: [id, state], where id is a unique String and state is a Map[String, Object]. The resulting channel then consists of tuples [id, new_state].\nExample:\nworkflow {\n  Channel.fromList([\n    [\"myid\", [input: file(\"in.txt\")]]\n  ])\n    | mymodule\n}\n\n\n\n\n\n\nNote\n\n\n\nIf the input tuple has more than two elements, the elements after the second element are passed through to the output tuple. That is, an input tuple [id, input, ...] will result in a tuple [id, output, ...] after running the module. For example, an input tuple [\"foo\", [input: file(\"in.txt\")], \"bar\"] will result in an output tuple [\"foo\", [output: file(\"out.txt\")], \"bar\"]."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#create-a-pipeline",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#create-a-pipeline",
    "title": "Create a pipeline",
    "section": "Create a pipeline",
    "text": "Create a pipeline\nBelow is a first Nextflow pipeline which uses just one VDSL3 module and with hard-coded input parameters (file1 and file2).\nnextflow.enable.dsl=2\n\ninclude { remove_comments } from \"./target/nextflow/demo/remove_comments/main.nf\"\n\nworkflow {\n  // Create a channel with two events\n  // Each event contains a string (an identifier) and a file (input)\n  Channel.fromList([\n    [\"file1\", file(\"resources_test/file1.tsv\")],\n    [\"file2\", file(\"resources_test/file2.tsv\")]\n  ])\n\n    // View channel contents\n    | view { tup -&gt; \"Input: $tup\" }\n    \n    // Process the input file using the 'remove_comments' module.\n    // This removes comment lines from the input TSV.\n    | remove_comments.run(\n      directives: [\n        publishDir: \"output/\"\n      ]\n    )\n\n    // View channel contents\n    | view { tup -&gt; \"Output: $tup\" }\n}"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#customizing-vdsl3-modules-on-the-fly",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#customizing-vdsl3-modules-on-the-fly",
    "title": "Create a pipeline",
    "section": "Customizing VDSL3 modules on the fly",
    "text": "Customizing VDSL3 modules on the fly\nUsually, Nextflow processes are quite static objects. For example, changing its directives can be quite tricky.\nThe un() function is a unique feature for every VDSL3 module which allows dynamically altering the behaviour of a module from within the pipeline. For example, we use it to set the publishDir directive to \"output/\" so the output of that step in the pipeline will be stored as output.\nSee the reference documentation for a complete list of arguments of .run()."
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#run-the-pipeline",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#run-the-pipeline",
    "title": "Create a pipeline",
    "section": "Run the pipeline",
    "text": "Run the pipeline\nNow run the pipeline with Nextflow:\n\nnextflow run . \\\n  -main-script main.nf\n\nN E X T F L O W  ~  version 23.10.0\nLaunching `main.nf` [deadly_hypatia] DSL2 - revision: 111508427e\n[-        ] process &gt; remove_comments:remove_comm... -\nInput: [file1, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file1.tsv]\nInput: [file2, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file2.tsv]\n\n[-        ] process &gt; remove_comments:remove_comm... [  0%] 0 of 2\nInput: [file1, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file1.tsv]\nInput: [file2, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file2.tsv]\n\nexecutor &gt;  local (2)\n[00/adceb1] process &gt; remove_comments:remove_comm... [ 50%] 1 of 2\nInput: [file1, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file1.tsv]\nInput: [file2, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file2.tsv]\nOutput: [file1, /home/runner/work/website/website/guide/_viash_project_template/work/00/adceb1bb0774c348a258b57834576f/file1.remove_comments.output.tsv]\n\nexecutor &gt;  local (2)\n[d7/a13e0d] process &gt; remove_comments:remove_comm... [100%] 2 of 2 ✔\nInput: [file1, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file1.tsv]\nInput: [file2, /home/runner/work/website/website/guide/_viash_project_template/resources_test/file2.tsv]\nOutput: [file1, /home/runner/work/website/website/guide/_viash_project_template/work/00/adceb1bb0774c348a258b57834576f/file1.remove_comments.output.tsv]\nOutput: [file2, /home/runner/work/website/website/guide/_viash_project_template/work/d7/a13e0dd0b05378c773013aa8a595a4/file2.remove_comments.output.tsv]\n\n\n\ntree output\n\noutput\n├── file1.remove_comments.output.tsv -&gt; /home/runner/work/website/website/guide/_viash_project_template/work/00/adceb1bb0774c348a258b57834576f/file1.remove_comments.output.tsv\n└── file2.remove_comments.output.tsv -&gt; /home/runner/work/website/website/guide/_viash_project_template/work/d7/a13e0dd0b05378c773013aa8a595a4/file2.remove_comments.output.tsv\n\n0 directories, 2 files\n\n\n\ncat output/*\n\none 0.11    123\ntwo 0.23    456\nthree   0.35    789\nfour    0.47    123\neins    0.111   234\nzwei    0.222   234\ndrei    0.333   123\nvier    0.444   123"
  },
  {
    "objectID": "guide/nextflow_vdsl3/create-a-pipeline.html#discussion",
    "href": "guide/nextflow_vdsl3/create-a-pipeline.html#discussion",
    "title": "Create a pipeline",
    "section": "Discussion",
    "text": "Discussion\nThe above example pipeline serves as the backbone for creating more advanced pipelines. However, for the sake of simplicity it contained several hardcoded elements:\n\nInput parameters\nOutput directory\nVDSL3 module directory"
  },
  {
    "objectID": "privacy.html",
    "href": "privacy.html",
    "title": "Privacy Policy",
    "section": "",
    "text": "TL;DR: We do not use cookies and we do not collect any personal data.\n\nWebsite visitors\n\nNo personal information is collected.\nNo information is stored in the browser.\nNo information is shared with, sent to or sold to third-parties.\nNo information is shared with advertising companies.\nNo information is mined and harvested for personal and behavioral trends.\nNo information is monetized.\n\n\n\nInformation we collect and what we use it for\nWe run Google Analytics analytics on viash.io. The following information is collected:\n\nPage URL. We track the page URL of each page view on this website. We use this to understand which pages have been viewed and how many times a particular page has been viewed. For example: https://viash.io/.\nHTTP Referrer. We use the referrer string to understand the number of visitors referred to this website from links on other sites. For example: https://github.com/.\nBrowser. We use this to understand what browsers people use when visiting this website. This is derived from the User-Agent HTTP header. The full User-Agent is discarded. For example: Chrome.\nOperating system. We use this to understand what operating systems people use when visiting this website. We only use the brand of the operating system and don’t include the version number or any other details. This is derived from the User-Agent HTTP header. The full User-Agent is discarded. For example: GNU/Linux.\nDevice type. We use this to understand what devices people use when visiting this website. This is derived from window.innerWidth. The actual width of the browser in pixels is discarded. For example: Desktop.\nVisitor Country. We look up the visitor’s country using the IP address. We do not track anything more granular than the country of origin and the IP address of the visitor is discarded. We never store IP addresses in our database or logs. For example: Canada.\n\n\n\nContact us\nContact us if you have any questions."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Viash",
    "section": "",
    "text": "Viash is developed and maintained by Data Intuitive.\nYou can find out more information about Viash in our preprint.\nFor more information or support contact us at info@data-intuitive.com."
  },
  {
    "objectID": "about.html#logos",
    "href": "about.html#logos",
    "title": "About Viash",
    "section": "Logos",
    "text": "Logos"
  },
  {
    "objectID": "guide/nextflow_vdsl3/index.html",
    "href": "guide/nextflow_vdsl3/index.html",
    "title": "Nextflow VDSL3",
    "section": "",
    "text": "Nextflow is a highly popular and widely-used workflow manager in computational biology, featuring outstanding portability, reproducibility and scalability. However, while Nextflow’s advantages are impressive, developing a Nextflow pipeline can be challenging, requiring significant domain knowledge and verbose code that is labour-intensive. Fortunately, Viash provides a solution to the barriers of Nextflow pipeline development.\nViash can help developers wrap their code into a state-of-the-art Nextflow script called a VDSL3 module. As we will demonstrate in the remainder of this guide, VDSL3 is effectively a separate DSL layer on top of Nextflow enabled by Viash, hence it is called Viash + Nextflow DSL 3, or VDSL3 for short. VDSL3’s benefits extend beyond Nextflow pipeline development, including reusability, test-driven development, separation of concerns, and continuous testing.\nYou can use Viash to speed up or replace your pipeline development processes in the following steps:"
  },
  {
    "objectID": "guide/nextflow_vdsl3/index.html#improvements-of-vdsl3-modules-over-standard-nextflow-modules",
    "href": "guide/nextflow_vdsl3/index.html#improvements-of-vdsl3-modules-over-standard-nextflow-modules",
    "title": "Nextflow VDSL3",
    "section": "Improvements of VDSL3 modules over standard Nextflow modules",
    "text": "Improvements of VDSL3 modules over standard Nextflow modules\n\nNo need to write any Nextflow Groovy code, just your script and the Viash config.\nVDSL3 module are also standalone pipelines.\nHelp documentation is automatically generated.\nStandardized interface for passing parameter lists.\nAutomatically uses the Docker platform’s container."
  },
  {
    "objectID": "guide/project/project-config.html",
    "href": "guide/project/project-config.html",
    "title": "Project config",
    "section": "",
    "text": "A _viash.yaml file in the root of the project repository is called a Viash project config. It allows defining project-wide settings such as the location of the Viash components and which Viash version to use."
  },
  {
    "objectID": "guide/project/project-config.html#example-project-config",
    "href": "guide/project/project-config.html#example-project-config",
    "title": "Project config",
    "section": "Example project config",
    "text": "Example project config\nviash_version: 0.7.1\n\nsource: src\ntarget: target\n\nconfig_mods: |\n  .functionality.version := 'dev'\n  .platforms[.type == 'docker'].target_registry := 'ghcr.io'\n  .platforms[.type == 'docker'].target_organization := 'viash-io/viash_project_template'\n  .platforms[.type == 'docker'].target_image_source := 'https://github.com/viash-io/viash_project_template'\n  .platforms[.type == 'nextflow'].directives.tag := '$id'"
  },
  {
    "objectID": "guide/project/project-config.html#viash-version",
    "href": "guide/project/project-config.html#viash-version",
    "title": "Project config",
    "section": "Viash version",
    "text": "Viash version\nPinning the version of Viash used in your project is essential to ensure reproducibility thereof across multiple systems. In doing so, all Viash commands will be run using that version of Viash.\nExample:\n\necho 'viash_version: \"0.6.0\"' &gt; _viash.yaml\n\nviash --version\n\nviash 0.6.0 (c) 2020 Data Intuitive"
  },
  {
    "objectID": "guide/project/project-config.html#source-directory",
    "href": "guide/project/project-config.html#source-directory",
    "title": "Project config",
    "section": "Source directory",
    "text": "Source directory\nOverrides the --src parameter of any viash ns command. This is useful in case the directory containing the Viash component source code is in a directory different from src/."
  },
  {
    "objectID": "guide/project/project-config.html#destination-directory",
    "href": "guide/project/project-config.html#destination-directory",
    "title": "Project config",
    "section": "Destination directory",
    "text": "Destination directory\nOverrides the --target parameter of any viash ns command. This is useful in case the artifacts generated by Viash should be stored in a directory different from target/."
  },
  {
    "objectID": "guide/project/project-config.html#advanced-configuration",
    "href": "guide/project/project-config.html#advanced-configuration",
    "title": "Project config",
    "section": "Advanced configuration",
    "text": "Advanced configuration\nViash allows for rewriting component configuration files using config mods. Config mods allow making changes to the config mods on the fly.\nThe template project contains these default config mods:\nconfig_mods: |\n  .functionality.version := 'dev'\n  .platforms[.type == 'docker'].target_registry := 'ghcr.io'\n  .platforms[.type == 'docker'].target_organization := 'viash-io/viash_project_template'\n  .platforms[.type == 'docker'].target_image_source := 'https://github.com/viash-io/viash_project_template'\n  .platforms[.type == 'nextflow'].directives.tag := '$id'\nThis has the following effects:\n\nSet the version of any components to 'dev'.\nFills the registry, organisation and image sources fields of the Docker platform.\nAdds a default directive to the Nextflow platform."
  },
  {
    "objectID": "guide/project/ide-setup.html",
    "href": "guide/project/ide-setup.html",
    "title": "IDE setup",
    "section": "",
    "text": "Since a Viash components consists of a script in one of the supported languages and a YAML file, you can use any editor of your choosing to create these files.\nWhen building a Nextflow pipeline built from Viash components written in Bash, R, and Python, we highly recommend using Visual Studio Code."
  },
  {
    "objectID": "guide/project/ide-setup.html#what-is-visual-studio-code",
    "href": "guide/project/ide-setup.html#what-is-visual-studio-code",
    "title": "IDE setup",
    "section": "What is Visual Studio Code?",
    "text": "What is Visual Studio Code?\nVisual Studio Code is an open source code-editor developed by Microsoft for Windows, Linux and macOS. As of 2021, it’s the #1 most popular developer environment tool, and for good reason. It’s lightweight, supports many languages and has a ton of features. Some of its most prominent features include:\n\nSyntax highlighting\nIntelligent code completion\nCode refactoring\nEmbedded Git\nSnippets\nExtensions and themes"
  },
  {
    "objectID": "guide/project/ide-setup.html#installation",
    "href": "guide/project/ide-setup.html#installation",
    "title": "IDE setup",
    "section": "Installation",
    "text": "Installation\nVS Code can be downloaded from this page:\nhttps://code.visualstudio.com/Download\nThere are installers available for all major operating systems, so simply download and install the version for your system."
  },
  {
    "objectID": "guide/project/ide-setup.html#recommended-extensions",
    "href": "guide/project/ide-setup.html#recommended-extensions",
    "title": "IDE setup",
    "section": "Recommended extensions",
    "text": "Recommended extensions\nVisual Studio Code supports installing extensions that extend the capabilities and introduce quality of life changes. The lists below are our recommendations for use with Viash.\n\nGeneral\nThese extensions are useful for most languages:\n\nCode Runner: This allows you to easily run any selected code and output the results to the built-in terminal. Make sure to take a look at the Configuration section of the page to set it up for the languages you’ll work with.\nCode Spell Checker: A quality of life extension that prevents you from making common spelling mistakes in your code by showing squiggly underlines below typos.\nError Lens: This extension makes errors and warnings more prominent by highlighting the entire line and adding the message at the end. This can speed up the writing of scripts tremendously.\nPrettier code formatter: Integrates the prettier code formatter into VS Code, which makes formatting your code extremely easy.\n\n\n\nYAML\nViash config files are written in YAML, so it makes sense to have an extension for that language:\n\nYAML: This extension provides YAML validation, syntax highlighting, auto completion and document outlining for YAML. A must have for writing and editing Viash config files!"
  },
  {
    "objectID": "guide/project/ide-setup.html#markdown",
    "href": "guide/project/ide-setup.html#markdown",
    "title": "IDE setup",
    "section": "Markdown",
    "text": "Markdown\nIf you’re planning on writing documentation for components you write, can supplement the description and the CLI with a Markdown document. VS Code has Markdown support built-in, but the extension below makes writing markdown documents even easier!\n\nMarkdown All in One: Some of the features include keyboard shortcuts for text formatting, list editing, GitHub flavored Markdown and auto completion for Markdown."
  },
  {
    "objectID": "guide/project/ide-setup.html#bash",
    "href": "guide/project/ide-setup.html#bash",
    "title": "IDE setup",
    "section": "Bash",
    "text": "Bash\n\nshell-format: By installing this extension, you get syntax highlighting and code formatting for shell scripts."
  },
  {
    "objectID": "guide/project/ide-setup.html#c",
    "href": "guide/project/ide-setup.html#c",
    "title": "IDE setup",
    "section": "C#",
    "text": "C#\n\nC#: Adds syntax highlighting, IntelliSense and debugging capabilities to VS Code for C#."
  },
  {
    "objectID": "guide/project/ide-setup.html#python",
    "href": "guide/project/ide-setup.html#python",
    "title": "IDE setup",
    "section": "Python",
    "text": "Python\nPython: Adds syntax highlighting, IntelliSense, debugging and code formatting. This extension also installs the PyLance language server and Jupyter for Jupyter Notebook support."
  },
  {
    "objectID": "guide/project/ide-setup.html#javascript",
    "href": "guide/project/ide-setup.html#javascript",
    "title": "IDE setup",
    "section": "Javascript",
    "text": "Javascript\nNode.js Extension Pack: VS Code actually already has a lot of Node.js features out of the box, but this extension pack adds adds even more. The extensions adds JS code hints, module search, code snippets and IntelliSense for NPM and paths just to name a few features."
  },
  {
    "objectID": "guide/project/ide-setup.html#r",
    "href": "guide/project/ide-setup.html#r",
    "title": "IDE setup",
    "section": "R",
    "text": "R\nR: This extension adds syntax highlighting, code analysis, keyboard shortcuts, package management and a lot more for the R language.\n\nNote: This extension requires you to install R and the languageserver CRAN package which depends on libxml2-dev, libcurl4-openssl-dev and libssl-dev before the extension will work."
  },
  {
    "objectID": "guide/project/ide-setup.html#scala",
    "href": "guide/project/ide-setup.html#scala",
    "title": "IDE setup",
    "section": "Scala",
    "text": "Scala\n\nScala Syntax (official): Adds syntax highlighting for Scala 2 and 3.\nScala (Metals): Adds code completion, debugging, formatting, renaming and much more for Scala."
  },
  {
    "objectID": "guide/project/ide-setup.html#wsl2",
    "href": "guide/project/ide-setup.html#wsl2",
    "title": "IDE setup",
    "section": "WSL2",
    "text": "WSL2\nIf you’re using WSL2, you’ll probably want to install the Remote - WSL extension. This extension lets you use your Windows version of VS Code in WSL2, as if it was running native.\nThe commands, extensions and the terminal will run on WSL, which makes for an ideal hybrid environment.\nOnce installed, you can connect to WSL2 by clicking the green remote button at the bottom left and choosing New WSL Window in the list that pops up. Alternatively, you can use the command code FOLDER/FILE (e.g. code .) on the WSL2 side to open that file or folder in a remote VS Code session."
  },
  {
    "objectID": "guide/project/structure.html",
    "href": "guide/project/structure.html",
    "title": "Structure",
    "section": "",
    "text": "The project already contains three components which are used to create a Nextflow pipeline with the following topology:\n\n\n\n\ngraph LR\n   A(file?.tsv) --&gt; B[/remove_comments/]\n   B --&gt; C[/take_column/]\n   C --&gt; D[/combine_columns/]\n   D --&gt; E(output)\n\n\nDiagram of the pipeline topology\n\n\n\n\nremove_comments is a Bash script which removes all lines starting with a # from a file.\ntake_column is a Python script which extracts one of the columns in a TSV file.\ncombine_columns is an R script which combines multiple files into a TSV."
  },
  {
    "objectID": "guide/project/structure.html#demo-pipeline",
    "href": "guide/project/structure.html#demo-pipeline",
    "title": "Structure",
    "section": "",
    "text": "The project already contains three components which are used to create a Nextflow pipeline with the following topology:\n\n\n\n\ngraph LR\n   A(file?.tsv) --&gt; B[/remove_comments/]\n   B --&gt; C[/take_column/]\n   C --&gt; D[/combine_columns/]\n   D --&gt; E(output)\n\n\nDiagram of the pipeline topology\n\n\n\n\nremove_comments is a Bash script which removes all lines starting with a # from a file.\ntake_column is a Python script which extracts one of the columns in a TSV file.\ncombine_columns is an R script which combines multiple files into a TSV."
  },
  {
    "objectID": "guide/project/structure.html#grouping-components-in-namespaces",
    "href": "guide/project/structure.html#grouping-components-in-namespaces",
    "title": "Structure",
    "section": "Grouping components in namespaces",
    "text": "Grouping components in namespaces\nA namespace is effectively a hierarchical grouping of the components in the src/ directory. Here are some benefits of grouping your components:\n\nGrouping components in namespaces allows for categorizing components.\nEach teams of developers can work on a different set of components in parallel, which improves the separation of concerns.\nGenerating build targets and unit testing can be done in bulk, with optional filtering by namespace using the viash ns commands.\n\nThis guide will cover how to define a namespace and use it with Viash."
  },
  {
    "objectID": "guide/project/structure.html#namespace-property",
    "href": "guide/project/structure.html#namespace-property",
    "title": "Structure",
    "section": "Namespace property",
    "text": "Namespace property\nYou can assign a component to a namespace by defining its namespace attribute in the Viash config file:\nfunctionality:\n  name: some_component\n  namespace: some_namespace/subnamespace\n...\nTypically, the Viash config for this component will be located at src/some_namespace/subnamespace/some_component/config.vsh.yaml."
  },
  {
    "objectID": "guide/component/variables.html",
    "href": "guide/component/variables.html",
    "title": "Par and meta variables",
    "section": "",
    "text": "When running a Viash component with viash run, Viash will wrap your script into a Bash executable. In doing so, it strips away the “Viash placeholder” code block and replaces it by a bit of code to your script for reading any parameter values at runtime."
  },
  {
    "objectID": "guide/component/variables.html#recognizing-the-viash-placeholder-code-block",
    "href": "guide/component/variables.html#recognizing-the-viash-placeholder-code-block",
    "title": "Par and meta variables",
    "section": "Recognizing the Viash placeholder code block",
    "text": "Recognizing the Viash placeholder code block\nRecall what the script of the previous example looks like:\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=path/to/file.txt\npar_output=output.txt\n## VIASH END\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nusing System.IO;\n\n// VIASH START\nvar par = new {\n  input = \"path/to/file.txt\",\n  output = \"output.txt\"\n};\n// VIASH END\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nconst fs = require('fs');\n\n// VIASH START\nlet par = {\n  'input': 'path/to/file.txt',\n  'output': 'output.txt'\n};\n// VIASH END\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nimport shutil\n\n## VIASH START\npar = {\n  'input': 'file.txt',\n  'output': 'output.txt'\n}\n## VIASH END\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\n## VIASH START\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\n## VIASH END\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\ncase class ViashPar(input: String, output: String)\nval par = ViashPar(\n  \"path/to/file.txt\",\n  \"output.txt\"\n)\n// VIASH END\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)\n\n\n\nA “Viash placeholder” code block is the section between the VIASH START and VIASH END comments."
  },
  {
    "objectID": "guide/component/variables.html#what-happens-at-runtime",
    "href": "guide/component/variables.html#what-happens-at-runtime",
    "title": "Par and meta variables",
    "section": "What happens at runtime",
    "text": "What happens at runtime\nBy passing arguments to the component, Viash will add your parameter values to your script by replacing the Viash placeholder code block. If no such code block exists yet, the parameters are inserted at the top of the file.\nThe resulting code block will contain two maps (or dictionaries): par and meta. The par map contains the parameter values specified by the user, and meta contains additional information on the current runtime environment. Note that for Bash scripts, the par and meta maps are flattened into separate environment variables."
  },
  {
    "objectID": "guide/component/variables.html#previewing-the-par-and-meta-objects",
    "href": "guide/component/variables.html#previewing-the-par-and-meta-objects",
    "title": "Par and meta variables",
    "section": "Previewing the par and meta objects",
    "text": "Previewing the par and meta objects\nTo get insight into how par and meta are defined, you can run viash config inject to replace the current parameter placeholder with an auto-generated parameter placeholder.\n\n\n\n\n\n\nWarning\n\n\n\nThis will change the contents of your script!\n\n\n\nBashC#JavaScriptPythonRScala\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.sh now contains the following code:\n#!/bin/bash\n\n## VIASH START\n# The following code has been auto-generated by Viash.\npar_input='file.txt'\npar_output='output.txt'\nmeta_functionality_name='example_bash'\nmeta_resources_dir='/tmp/viash_inject_example_bash432052684615777967'\nmeta_executable='/tmp/viash_inject_example_bash432052684615777967/example_bash'\nmeta_config='/tmp/viash_inject_example_bash432052684615777967/.config.vsh.yaml'\nmeta_temp_dir='/tmp'\nmeta_cpus='123'\nmeta_memory_b='123'\nmeta_memory_kb='123'\nmeta_memory_mb='123'\nmeta_memory_gb='123'\nmeta_memory_tb='123'\nmeta_memory_pb='123'\n\n## VIASH END\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.csx now contains the following code:\nusing System.IO;\n\n// VIASH START\n// The following code has been auto-generated by Viash.\nvar par = new {\n  input = @\"file.txt\",\n  output = @\"output.txt\"\n};\nvar meta = new {\n  functionality_name = @\"example_csharp\",\n  resources_dir = @\"/tmp/viash_inject_example_csharp5575231482939493351\",\n  executable = @\"/tmp/viash_inject_example_csharp5575231482939493351/example_csharp\",\n  config = @\"/tmp/viash_inject_example_csharp5575231482939493351/.config.vsh.yaml\",\n  temp_dir = @\"/tmp\",\n  cpus = Convert.ToInt32(@\"123\"),\n  memory_b = Convert.ToInt64(@\"123\"),\n  memory_kb = Convert.ToInt64(@\"123\"),\n  memory_mb = Convert.ToInt64(@\"123\"),\n  memory_gb = Convert.ToInt64(@\"123\"),\n  memory_tb = Convert.ToInt64(@\"123\"),\n  memory_pb = Convert.ToInt64(@\"123\")\n};\nvar dep = new {\n  \n};\n\n// VIASH END\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.js now contains the following code:\nconst fs = require('fs');\n\n// VIASH START\n// The following code has been auto-generated by Viash.\nlet par = {\n  'input': String.raw`file.txt`,\n  'output': String.raw`output.txt`\n};\nlet meta = {\n  'functionality_name': String.raw`example_js`,\n  'resources_dir': String.raw`/tmp/viash_inject_example_js16094678217076314011`,\n  'executable': String.raw`/tmp/viash_inject_example_js16094678217076314011/example_js`,\n  'config': String.raw`/tmp/viash_inject_example_js16094678217076314011/.config.vsh.yaml`,\n  'temp_dir': String.raw`/tmp`,\n  'cpus': parseInt(String.raw`123`),\n  'memory_b': parseInt(String.raw`123`),\n  'memory_kb': parseInt(String.raw`123`),\n  'memory_mb': parseInt(String.raw`123`),\n  'memory_gb': parseInt(String.raw`123`),\n  'memory_tb': parseInt(String.raw`123`),\n  'memory_pb': parseInt(String.raw`123`)\n};\nlet dep = {\n  \n};\n\n// VIASH END\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.py now contains the following code:\nimport shutil\n\n## VIASH START\n# The following code has been auto-generated by Viash.\npar = {\n  'input': r'file.txt',\n  'output': r'output.txt'\n}\nmeta = {\n  'functionality_name': r'example_python',\n  'resources_dir': r'/tmp/viash_inject_example_python3742570064871457401',\n  'executable': r'/tmp/viash_inject_example_python3742570064871457401/example_python',\n  'config': r'/tmp/viash_inject_example_python3742570064871457401/.config.vsh.yaml',\n  'temp_dir': r'/tmp',\n  'cpus': int(r'123'),\n  'memory_b': int(r'123'),\n  'memory_kb': int(r'123'),\n  'memory_mb': int(r'123'),\n  'memory_gb': int(r'123'),\n  'memory_tb': int(r'123'),\n  'memory_pb': int(r'123')\n}\ndep = {\n  \n}\n\n## VIASH END\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.R now contains the following code:\n## VIASH START\n# The following code has been auto-generated by Viash.\n# treat warnings as errors\n.viash_orig_warn &lt;- options(warn = 2)\n\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\nmeta &lt;- list(\n  \"functionality_name\" = 'example_r',\n  \"resources_dir\" = '/tmp/viash_inject_example_r8562920193862603762',\n  \"executable\" = '/tmp/viash_inject_example_r8562920193862603762/example_r',\n  \"config\" = '/tmp/viash_inject_example_r8562920193862603762/.config.vsh.yaml',\n  \"temp_dir\" = '/tmp',\n  \"cpus\" = as.integer('123'),\n  \"memory_b\" = bit64::as.integer64('123'),\n  \"memory_kb\" = bit64::as.integer64('123'),\n  \"memory_mb\" = bit64::as.integer64('123'),\n  \"memory_gb\" = bit64::as.integer64('123'),\n  \"memory_tb\" = bit64::as.integer64('123'),\n  \"memory_pb\" = bit64::as.integer64('123')\n)\ndep &lt;- list(\n  \n)\n\n\n# restore original warn setting\noptions(.viash_orig_warn)\nrm(.viash_orig_warn)\n\n## VIASH END\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nRunning viash config inject effectively changes the contents of the script.\n\nviash config inject config.vsh.yaml\n\nThe updated script.scala now contains the following code:\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\n// The following code has been auto-generated by Viash.\ncase class ViashPar(\n  input: Option[String],\n  output: Option[String]\n)\nval par = ViashPar(\n  Some(\"\"\"file.txt\"\"\"),\n  Some(\"\"\"output.txt\"\"\")\n)\ncase class ViashMeta(\n  functionality_name: Option[String],\n  resources_dir: Option[String],\n  executable: Option[String],\n  config: Option[String],\n  temp_dir: Option[String],\n  cpus: Option[Int],\n  memory_b: Option[Long],\n  memory_kb: Option[Long],\n  memory_mb: Option[Long],\n  memory_gb: Option[Long],\n  memory_tb: Option[Long],\n  memory_pb: Option[Long]\n)\nval meta = ViashMeta(\n  Some(\"\"\"example_scala\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala12819073464463733236\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala12819073464463733236/example_scala\"\"\"),\n  Some(\"\"\"/tmp/viash_inject_example_scala12819073464463733236/.config.vsh.yaml\"\"\"),\n  Some(\"\"\"/tmp\"\"\"),\n  Some(\"\"\"123\"\"\".toInt),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong),\n  Some(\"\"\"123\"\"\".toLong)\n)\ncase class ViashDep(\n  \n)\nval dep = ViashDep(\n  \n)\n\n// VIASH END\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)"
  },
  {
    "objectID": "guide/component/variables.html#runtime-parameters-in-par",
    "href": "guide/component/variables.html#runtime-parameters-in-par",
    "title": "Par and meta variables",
    "section": "Runtime parameters in par",
    "text": "Runtime parameters in par\nThe par object (or par_ environment variables in Bash) will contain argument values passed at runtime. For example, passing --input foo.txt will result in a par[\"input\"] being equal to \"foo.txt\".\n\n\n\n\n\n\nTip\n\n\n\nTry adding more arguments with different file types to see what effect this has on the resulting placeholder."
  },
  {
    "objectID": "guide/component/variables.html#meta-variables-in-meta",
    "href": "guide/component/variables.html#meta-variables-in-meta",
    "title": "Par and meta variables",
    "section": "Meta variables in meta",
    "text": "Meta variables in meta\nMeta-variables offer information on the runtime environment which you can use from within your script.\n\ncpus (integer): The maximum number of (logical) cpus a component is allowed to use. By default, this value will be undefined.\nconfig (string): Path to the processed Viash config YAML. This file is usually called .config.vsh.yaml and resides next to the wrapped executable (see below). This YAML file is useful for doing some runtime introspection of the component for writing generic unit tests.\nexecutable (string): The executable being used at runtime; that is, the wrapped script. This variable is used in unit tests.\nfunctionality_name (string): The name of the component, useful for logging.\nmemory_* (long): The maximum amount of memory a component is allowed to allocate. The following denominations are provided: memory_b, memory_kb, memory_mb, memory_gb, memory_tb, memory_pb. By default, this value will be undefined.\nresources_dir (string): Path to where the resources are stored. See the previous section on how to define resources.\ntemp_dir (string): A temporary directory in which your script is allowed to create new temporary files / directories. By default, this will be set to the VIASH_TEMP environment variable. When the VIASH_TEMP variable is undefined, /tmp is used instead.\n\n\n\ncpus (integer)\nThis field specifies the maximum number of (logical) cpus a component is allowed to use. This is useful when parallellizing your component in such a way that integrates very nicely with pipeline frameworks such as Nextflow. Below is an example usage of the cpus meta-variable.\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=\"path/to/file.txt\"\npar_output=\"output.txt\"\nmeta_cpus=10\n## VIASH END\n\n# Pass number of cores to the popular_software_tool. Set the default to 1.\n./popular_software_tool --ncores ${meta_cpus:-1}\n\n\nNo example available yet.\n\n\nNo example available yet.\n\n\nfrom multiprocessing import Pool\n\n## VIASH START\npar = {}\nmeta = {\"cpus\": 1}\n## VIASH END\n\ndef my_fun(x):\n    return x + \"!\"\nmy_data = [\"hello\", \"world\"]\n\nwith Pool(processes=meta.get(\"cpus\", 1)) as pool:\n    out = pool.map(my_fun, my_data)\n\n\nlibrary(furrr)\n\n## VIASH START\npar &lt;- list()\nmeta &lt;- list(\n  cpus = 1L\n)\n## VIASH END\n\nif (is.null(meta$cpus)) meta$cpus &lt;- 1\nplan(multisession, workers = meta$cpus)\n\nmy_data &lt;- c(\"hello\", \"world\")\nout = future_map(\n  my_data, \n  function(x) {\n    paste0(x, \"!\")\n  }\n)\n\n\nimport scala.collection.parallel._\nimport java.util.concurrent.ForkJoinPool\n\n// VIASH START\n// ...\n// VIASH END\n\nval pc = mutable.ParArray(1, 2, 3)\nval numCores = meta.cores.getOrElse(1)\npc.tasksupport = new ForkJoinTaskSupport(new ForkJoinPool(numCores))\npc map { _ + 1 }\n\n\n\nYou can set the number of cores in your component using any of the following approaches:\n# as a parameter of viash run\nviash run config.vsh.yaml --cpus 10 -- &lt;my component arguments&gt;\n\n# as a parameter of viash test\nviash test config.vsh.yaml --cpus 10\n\n# or as a parameter of the executable\nviash build config.vsh.yaml -o output\noutput/my_executable ---cpus 10\n#                     ↑ notice the triple dash"
  },
  {
    "objectID": "guide/component/add-dependencies.html",
    "href": "guide/component/add-dependencies.html",
    "title": "Add dependencies",
    "section": "",
    "text": "In the previous section, reproducibility of our Viash component was ensured by a predefined Docker image such as bash:4.0 and python:3.10. However, your script might require other software dependencies, such as command-line tools or Python and R packages.\nBy default, Viash will build component-specific Docker images. This means that every Viash component can have its own set of dependencies."
  },
  {
    "objectID": "guide/component/add-dependencies.html#extended-example",
    "href": "guide/component/add-dependencies.html#extended-example",
    "title": "Add dependencies",
    "section": "Extended example",
    "text": "Extended example\nBelow is an example where additional software is added to a base Docker image using the setup section of a Docker platform.\n\nBashC#JavaScriptPythonRScala\n\n\nfunctionality:\n  name: example_bash_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: bash_script\n      path: script.sh\nplatforms:\n  - type: docker\n    image: bash:4.0\n    setup:\n      - type: apk\n        packages:\n          - curl\n          - wget\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_csharp_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: csharp_script\n      path: script.csx\nplatforms:\n  - type: docker\n    image: ghcr.io/data-intuitive/dotnet-script:1.3.1\n    setup:\n      - type: apk\n        packages:\n          - curl\n          - wget\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_js_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: javascript_script\n      path: script.js\nplatforms:\n  - type: docker\n    image: node:19-bullseye-slim\n    setup:\n      - type: apt\n        packages:\n          - curl\n          - wget\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_python_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: python_script\n      path: script.py\nplatforms:\n  - type: docker\n    image: python:3.10-slim\n    setup:\n      - type: apt\n        packages:\n          - curl\n          - wget\n      - type: python\n        packages: anndata\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_r_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: r_script\n      path: script.R\nplatforms:\n  - type: docker\n    image: eddelbuettel/r2u:22.04\n    setup:\n      - type: apt\n        packages:\n          - curl\n          - wget\n      - type: r\n        packages: tidyverse\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_scala_with_setup\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: scala_script\n      path: script.scala\nplatforms:\n  - type: docker\n    image: sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n    setup:\n      - type: apt\n        packages:\n          - curl\n          - wget\n  - type: native\n  - type: nextflow\n\n\n\nYou can (re)build a component’s Docker image by passing the ---setup flag to the executable:\n\nBashC#JavaScriptPythonRScala\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_bash_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_bash_with_setup:latest' with Dockerfile\n\n\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_csharp_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_csharp_with_setup:latest' with Dockerfile\n\n\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_js_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_js_with_setup:latest' with Dockerfile\n\n\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_python_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_python_with_setup:latest' with Dockerfile\n\n\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_r_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_r_with_setup:latest' with Dockerfile\n\n\n\n\nBuild the executable:\n\nviash build config.vsh.yaml --platform docker --output target\n\nBuild the Docker image:\n\ntarget/example_scala_with_setup ---setup cachedbuild\n\n[notice] Building container 'example_scala_with_setup:latest' with Dockerfile\n\n\n\n\n\nAlternatively, you can also build the executable and it’s corresponding Docker image in one go:\n\nBashC#JavaScriptPythonRScala\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild\n\n\nviash build config.vsh.yaml --platform docker --output target --setup cachedbuild"
  },
  {
    "objectID": "guide/component/add-dependencies.html#steps-for-creating-a-custom-docker-platform",
    "href": "guide/component/add-dependencies.html#steps-for-creating-a-custom-docker-platform",
    "title": "Add dependencies",
    "section": "Steps for creating a custom Docker platform",
    "text": "Steps for creating a custom Docker platform\nHere is a series of steps you can follow to add a Docker platform to your Viash component from scratch.\n\nStep 1: Choose a base image\nTo start off, you’ll need to choose a base Docker image to start working with. In deciding which base image to use, it’s important to consider the size of the image and how trustworthy the source image is.\n\n\n\n\n\n\nTip\n\n\n\nIf the container does not have Bash installed, don’t forget to install this in Step 2.\n\n\nHere is a list of base images we commonly use:\n\nBash: bash, ubuntu\nC#: ghcr.io/data-intuitive/dotnet-script\nJavaScript: node\nPython: python, nvcr.io/nvidia/pytorch\nR: eddelbuettel/r2u, rocker/tidyverse\nScala: sbtscala/scala-sbt\n\nSee the section on ‘minimum requirements’ when building a custom base image.\n\n\nStep 2: Installing additional dependencies\nYou can use the setup section to many different types of layers. Here are some examples:\n\nApk requirements:\nsetup:\n  - type: apk\n    packages: [ curl ]\nApt requirements:\nsetup:\n  - type: apt\n    packages: [ curl ]\nDocker requirements:\nsetup:\n  - type: docker\n    build_args: \"R_VERSION=hello_world\"\n    run: |\n      echo 'Run a custom command'\n      echo 'Foo' &gt; /path/to/file.txt\nJavascript requirements:\nsetup:\n  - type: javascript\n    packages: [ express ]\n    github: [ \"expressjs/express\" ]\nPython requirements:\nsetup:\n  - type: python\n    packages: [ anndata ]\n  github: [ jkbr/httpie ]\nR requirements:\nsetup:\n  - type: r\n    packages: [ anndata ]\n    bioc: [ AnnotationDbi, SingleCellExperiment ]\n    github: rcannood/SCORPIUS\nRuby requirements:\nsetup:\n  - type: ruby\n    packages: [ pry ]\nYum requirements:\nsetup:\n  - type: ruby\n    packages: [ pry ]\n    github: [ \"pry/pry\" ]\n\nFor more information on the possible setup entries, check out the reference documentation.\n\n\n\n\n\n\nImportant\n\n\n\nDon’t forget to rebuild the Docker image after making changes to the setup section of your Docker platform (see next step).\n\n\n\n\nStep 3: Rebuild Docker image\nAfter adding additional setup entries, it’s important to rerun ---setup cachedbuild to rebuild the Docker image, as Viash will not rebuild the Docker image when it already exists.\n\nBashC#JavaScriptPythonRScala\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\nviash build config.vsh.yaml \n  --platform docker \n  --output target \n  --setup cachedbuild\n\n\n\nYou can choose what strategy to build an executable with when using a Docker backend by passing the --setup option followed by one of the strategies below.\nBuilding an image:\n\nalwaysbuild / build / b: Always build the image from the dockerfile. This is the default setup strategy.\nalwayscachedbuild / cachedbuild / cb: Always build the image from the dockerfile, with caching enabled.\nifneedbebuild: Build the image if it does not exist locally.\nifneedbecachedbuild: Build the image with caching enabled if it does not exist locally.\n\nPulling an image:\n\nalwayspull / pull / p: Try to pull the container from Docker Hub or the specified docker registry.\nalwayspullelsebuild / pullelsebuild: Try to pull the image from a registry and build it if it doesn’t exist.\nalwayspullelsecachedbuild / pullelsecachedbuild: Try to pull the image from a registry and build it with caching if it doesn’t exist.\nifneedbepull: If the image does not exist locally, pull the image.\nifneedbepullelsebuild If the image does not exist locally, pull the image. If the image does exist, build it.\nifneedbepullelsecachedbuild: If the image does not exist locally, pull the image. If the image does exist, build it with caching enabled.\n\nPushing an image:\n\npush: Push the container to Docker Hub or the specified docker registry.\npushifnotpresent Push the container to Docker Hub or the specified docker registry if the specified tag does not exist yet.\n\nDoing nothing:\n\ndonothing / meh: Do not build or pull anything."
  },
  {
    "objectID": "guide/component/add-dependencies.html#troubleshooting",
    "href": "guide/component/add-dependencies.html#troubleshooting",
    "title": "Add dependencies",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nBelow are several steps that might help you troubleshoot the image when the setup fails.\n\nView Dockerfile\nYou can view the actual Dockerfile used by Viash by passing the ---dockerfile flag:\n\nBashC#JavaScriptPythonRScala\n\n\n\ntarget/example_bash_with_setup ---dockerfile\n\nFROM bash:4.0\n\nENTRYPOINT []\n\n\nRUN apk add --no-cache curl wget\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_bash_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-10-23T09:04:27Z\"\n\n\n\n\n\ntarget/example_csharp_with_setup ---dockerfile\n\nFROM ghcr.io/data-intuitive/dotnet-script:1.3.1\n\nENTRYPOINT []\n\n\nRUN apk add --no-cache curl wget\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_csharp_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-10-23T09:04:36Z\"\n\n\n\n\n\ntarget/example_js_with_setup ---dockerfile\n\nFROM node:19-bullseye-slim\n\nENTRYPOINT []\n\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y curl wget && \\\n  rm -rf /var/lib/apt/lists/*\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_js_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-10-23T09:04:55Z\"\n\n\n\n\n\ntarget/example_python_with_setup ---dockerfile\n\nFROM python:3.10-slim\n\nENTRYPOINT []\n\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y curl wget && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN pip install --upgrade pip && \\\n  pip install --upgrade --no-cache-dir \"anndata\"\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_python_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-10-23T09:05:14Z\"\n\n\n\n\n\ntarget/example_r_with_setup ---dockerfile\n\nFROM eddelbuettel/r2u:22.04\n\nENTRYPOINT []\n\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y curl wget && \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN Rscript -e 'if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"remotes\")' && \\\n  Rscript -e 'remotes::install_cran(c(\"tidyverse\"), repos = \"https://cran.rstudio.com\")'\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_r_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-10-23T09:05:52Z\"\n\n\n\n\n\ntarget/example_scala_with_setup ---dockerfile\n\nFROM sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n\nENTRYPOINT []\n\n\nRUN apt-get update && \\\n  DEBIAN_FRONTEND=noninteractive apt-get install -y curl wget && \\\n  rm -rf /var/lib/apt/lists/*\n\nLABEL org.opencontainers.image.description=\"Companion container for running component example_scala_with_setup\"\nLABEL org.opencontainers.image.created=\"2023-10-23T09:06:41Z\"\n\n\n\n\n\n\n\nEnter debugging session\nYou can also hop in a Bash session inside the Docker image using the ---debug flag:\n\nBashC#JavaScriptPythonRScala\n\n\ntarget/example_bash_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_bash_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\ntarget/example_csharp_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_csharp_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\ntarget/example_js_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_js_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\ntarget/example_python_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_python_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\ntarget/example_r_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_r_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\ntarget/example_scala_with_setup ---debug\n[notice] + docker run --entrypoint=bash -i --rm -v `pwd`:/pwd --workdir /pwd -t 'example_scala_with_setup:latest'\nroot@93c38006a124:/pwd#\n\n\n\nThis is useful for interactively debugging issues inside the container. For example, for figuring out whether you need to use apk, apt or yum to install software and to search for the exact name of packages like libcurl4-openssl-dev."
  },
  {
    "objectID": "guide/component/add-dependencies.html#alternative-solutions",
    "href": "guide/component/add-dependencies.html#alternative-solutions",
    "title": "Add dependencies",
    "section": "Alternative solutions",
    "text": "Alternative solutions\nThere are multiple ways you might try to find a Docker image which contains the right set of dependencies for your component:\n\nBrowse Docker Hub: Look a Docker image on Docker Hub or other Docker registries which has the right set of dependencies.\n\nThis is generally not recommended because it might take a long time to find a pre-existing image with the right set of dependencies\nPoses a serious security risk.\n\nWrite a custom Dockerfile: You can write a custom Dockerfile to build your own Docker image and store it in a Docker registry, effectively creating a new ‘trusted’ base image.\n\nRequires manual bookkeeping of which Docker images are used in which components.\nNot difficult but requires more know-how on how to build custom Docker images.\n\nUse Viash setup to build component-specific images: The methodology described above.\n\nEasier to add / change dependencies to one component without breaking another\nStore images in a centralized container registry"
  },
  {
    "objectID": "guide/component/add-dependencies.html#behind-the-scenes",
    "href": "guide/component/add-dependencies.html#behind-the-scenes",
    "title": "Add dependencies",
    "section": "Behind the scenes",
    "text": "Behind the scenes\n\nAuto-mount\nAny executable built by Viash with a Docker platform will automatically mount the directories of files passed to the executable as arguments. For example, when running:\n./my_executable --input /foo/bar/file.txt --output /dest/path\nThe executable will automatically mount the /foo/bar and /dest folder to /viash_automount/foo/bar/ and /viash_automount/dest inside the Docker container.\n\n\nAuto-chown\nBy default, files created and modified by a Docker container are owned by root. By default, Viash automatically changes the owner of any files defined in the config file to the user running the executable. This behaviour can be overridden by setting the chown setting to false in your config file.\nExample with standard Docker:\ndocker run -v `pwd`:/pwd bash:4.0 touch /pwd/file.txt\nls -l\n-rw-r--r--. 1 root     root         0 Jan 26 16:03 file.txt\nExample with a Viash executable:\n/my_executable --output file.txt\n-rw-r--r--. 1 myuser   myuser        Jan 26 16:03 file.txt\n\n\nMinimum requirements for custom Docker images\nViash components only require a minimal set of dependencies which need to be available inside the Docker image:\n\nBash: bash.\nC#: bash and dotnet-script.\nJavaScript: bash and node (Node.js).\nPython: bash, python and pip.\nR: bash and R.\nScala: bash, openjdk-devel and sbt."
  },
  {
    "objectID": "guide/component/use-helper-functions.html",
    "href": "guide/component/use-helper-functions.html",
    "title": "Use helper functions",
    "section": "",
    "text": "This documentation will walk you through the process of importing and using functions defined in an external file in your Viash component.\nThis can be useful for organizing and reusing code across multiple components or even within a single component.\nWe’ll cover the steps to set up the external file, import the functions, and use them within your Viash component. By the end of this guide, you’ll have a better understanding of how to leverage external files to improve your Viash development workflow."
  },
  {
    "objectID": "guide/component/use-helper-functions.html#create-helper-script",
    "href": "guide/component/use-helper-functions.html#create-helper-script",
    "title": "Use helper functions",
    "section": "Create helper script",
    "text": "Create helper script\nWhen you want to reuse a function multiple times, it might make sense to store them in a separate file. For example, your helper file could contain the following helper function:\n\nBashC#JavaScriptPythonRScala\n\n\nfunction copy_file {\n  echo \"Copying '$1' to '$2'.\"\n  cp -r \"$1\" \"$2\"\n}\n\n\n// No example available yet.\n\n\nconst fs = require('fs');\n\nfunction copy_file(source, dest) {\n  console.log(`Copying '${source}' to '${dest}'`)\n  fs.copyFile(source, dest, (err) =&gt; {\n    if (err) throw err;\n  });\n}\n\nmodule.exports = {\n  copy_file\n}\n\n\nimport shutil\n\ndef copy_file(source, dest):\n  print(f\"Copying '{source}' to '{dest}'.\")\n  shutil.copyfile(source, dest)\n\n\ncopy_file &lt;- function(source, dest) {\n  cat(\"Copying '\", source, \"' to '\", dest, \"'.\\n\", sep = \"\")\n  file.copy(source, dest)\n}\n\n\n// No example available yet."
  },
  {
    "objectID": "guide/component/use-helper-functions.html#add-resource-to-component",
    "href": "guide/component/use-helper-functions.html#add-resource-to-component",
    "title": "Use helper functions",
    "section": "Add resource to component",
    "text": "Add resource to component\nTo add a helper script as an external resource in a Viash component, you can use the resources section of the component’s config file. Not only does your resources section contain the main script, but it’s also used to specify external resources such as helper scripts and other files that the component needs to function.\nHere is an example of what the config file might look after adding the helper script:\n\nBashC#JavaScriptPythonRScala\n\n\nfunctionality:\n  name: example_bash\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: bash_script\n      path: script.sh\n    - path: helper.sh\nplatforms:\n  - type: docker\n    image: bash:4.0\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_csharp\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: csharp_script\n      path: script.csx\n    - path: helper.csx\nplatforms:\n  - type: docker\n    image: ghcr.io/data-intuitive/dotnet-script:1.3.1\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_js\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: javascript_script\n      path: script.js\n    - path: helper.js\nplatforms:\n  - type: docker\n    image: node:19-bullseye-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_python\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: python_script\n      path: script.py\n    - path: helper.py\nplatforms:\n  - type: docker\n    image: python:3.10-slim\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_r\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: r_script\n      path: script.R\n    - path: helper.R\nplatforms:\n  - type: docker\n    image: eddelbuettel/r2u:22.04\n  - type: native\n  - type: nextflow\n\n\nfunctionality:\n  name: example_scala\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: scala_script\n      path: script.scala\n    - path: helper.scala\nplatforms:\n  - type: docker\n    image: sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\n  - type: native\n  - type: nextflow"
  },
  {
    "objectID": "guide/component/use-helper-functions.html#import-helper-functions",
    "href": "guide/component/use-helper-functions.html#import-helper-functions",
    "title": "Use helper functions",
    "section": "Import helper functions",
    "text": "Import helper functions\nFinally, you need to import the helper functions in your script. The procedure will differ depending on the scripting language used. Below is an example of what the main script might look like after importing the helper file.\n\nBashC#JavaScriptPythonRScala\n\n\n#!/bin/bash\n\n## VIASH START\npar_input=path/to/file.txt\npar_output=output.txt\n## VIASH END\n\n# view resource file\nsource \"$meta_resources_dir/helper.sh\"\n\n# copy file\ncopy_file \"$par_input\" \"$par_output\"\n\n\n// No example available yet.\n\n\n// VIASH START\nlet par = {\n  'input': 'path/to/file.txt',\n  'output': 'output.txt'\n};\n// VIASH END\n\n// import helper function\nconst helper = require(`${meta['resources_dir']}/helper.js`);\n\n// copy file\nhelper.copy_file(par['input'], par['output'])\n\n\nimport sys\n\n## VIASH START\npar = {\n  'input': 'file.txt',\n  'output': 'output.txt'\n}\n## VIASH END\n\n# import helper function\nsys.path.append(meta['resources_dir'])\nfrom helper import copy_file\n\n# copy file\ncopy_file(par['input'], par['output'])\n\n\n## VIASH START\npar &lt;- list(\n  \"input\" = \"file.txt\",\n  \"output\" = \"output.txt\"\n)\n## VIASH END\n\n# import helper function\nsource(paste0(meta$resources_dir, \"/helper.R\"))\n\n# copy file\ncopy_file(par$input, par$output)\n\n\n// No example available yet."
  },
  {
    "objectID": "guide/component/create-component.html",
    "href": "guide/component/create-component.html",
    "title": "Create a new component",
    "section": "",
    "text": "A Viash component can be translated into one or more platforms: Native, Docker, Nextflow. Each of these platforms result in a different artifact:\nBelow we will create our first Viash component using any of the languages natively supported by Viash."
  },
  {
    "objectID": "guide/component/create-component.html#create-a-script",
    "href": "guide/component/create-component.html#create-a-script",
    "title": "Create a new component",
    "section": "Create a script",
    "text": "Create a script\nWhen creating a new Viash component, you can write a new script or use a pre-existing script. Below is a script that simply copies an input file to an output destination.\n\nBashC#JavaScriptPythonRScala\n\n\nCreate a new file named script.sh and copy the following content inside of it. This script will copy an input file to an output destination.\n#!/bin/bash\n\n## VIASH START\npar_input=path/to/file.txt\npar_output=output.txt\n## VIASH END\n\n# copy file\necho \"Copying '$par_input' to '$par_output'.\"\ncp -r \"$par_input\" \"$par_output\"\n\n\nCreate a new file named script.csx and copy the following content inside of it. This script will copy an input file to an output destination.\nusing System.IO;\n\n// VIASH START\nvar par = new {\n  input = \"path/to/file.txt\",\n  output = \"output.txt\"\n};\n// VIASH END\n\n// copy file\nConsole.WriteLine($\"Copying '{par.input}' to '{par.output}'.\");\nFile.Copy(par.input, par.output, true);\n\n\nCreate a new file named script.js and copy the following content inside of it. This script will copy an input file to an output destination.\nconst fs = require('fs');\n\n// VIASH START\nlet par = {\n  'input': 'path/to/file.txt',\n  'output': 'output.txt'\n};\n// VIASH END\n\n// copy file\nconsole.log(`Copying '${par['input']}' to '${par['output']}'`)\nfs.copyFile(par['input'], par['output'], (err) =&gt; {\n  if (err) throw err;\n});\n\n\nCreate a new file named script.py and copy the following content inside of it. This script will copy an input file to an output destination.\nimport shutil\n\n## VIASH START\npar = {\n  'input': 'file.txt',\n  'output': 'output.txt'\n}\n## VIASH END\n\n# copy file\nprint(f\"Copying '{par['input']}' to '{par['output']}'.\")\nshutil.copyfile(par['input'], par['output'])\n\n\nCreate a new file named script.R and copy the following content inside of it. This script will copy an input file to an output destination.\n## VIASH START\npar &lt;- list(\n  \"input\" = 'file.txt',\n  \"output\" = 'output.txt'\n)\n## VIASH END\n\n# copy file\ncat(\"Copying '\", par$input, \"' to '\", par$output, \"'.\\n\", sep = \"\")\nfile.copy(par$input, par$output)\n\n\nCreate a new file named script.scala and copy the following content inside of it. This script will copy an input file to an output destination.\nimport java.nio.file.StandardCopyOption.REPLACE_EXISTING\nimport java.nio.file.Files\nimport java.nio.file.Paths\n\n// VIASH START\ncase class ViashPar(input: String, output: String)\nval par = ViashPar(\n  \"path/to/file.txt\",\n  \"output.txt\"\n)\n// VIASH END\n\n// copy file\nprintln(s\"Copying '${par.input}' to '${par.output}'.\")\nval fileIn = Paths.get(par.input)\nval fileOut = Paths.get(par.output)\nFiles.copy(fileIn, fileOut, REPLACE_EXISTING)\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe par variable(s) appear to be hard coded, but they’re not! When running this script with Viash, Viash will strip away the section between VIASH START and VIASH END, and replace it with parameter values at runtime. The values included in this script are thus entirely for development and debugging purposes. More information on how this works will be given in Variables and meta-variables."
  },
  {
    "objectID": "guide/component/create-component.html#create-a-config",
    "href": "guide/component/create-component.html#create-a-config",
    "title": "Create a new component",
    "section": "Create a config",
    "text": "Create a config\nA Viash config file is a YAML file that describes the functionality of a component and the platform(s) it targets.\n\nBashC#JavaScriptPythonRScala\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_bash\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: bash_script\n      path: script.sh\nplatforms:\n  - type: docker\n    image: \"bash:4.0\"\n  - type: native\n  - type: nextflow\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_csharp\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: csharp_script\n      path: script.csx\nplatforms:\n  - type: docker\n    image: \"ghcr.io/data-intuitive/dotnet-script:1.3.1\"\n  - type: native\n  - type: nextflow\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_js\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: javascript_script\n      path: script.js\nplatforms:\n  - type: docker\n    image: \"node:19-bullseye-slim\"\n  - type: native\n  - type: nextflow\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_python\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: python_script\n      path: script.py\nplatforms:\n  - type: docker\n    image: \"python:3.10-slim\"\n  - type: native\n  - type: nextflow\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_r\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: r_script\n      path: script.R\nplatforms:\n  - type: docker\n    image: \"eddelbuettel/r2u:22.04\"\n  - type: native\n  - type: nextflow\n\n\nCreate a file named config.vsh.yaml and add the contents below based on your chosen scripting language.\nfunctionality:\n  name: example_scala\n  description: A minimal example component.\n  arguments:\n    - type: file\n      name: --input\n      example: file.txt\n      required: true\n    - type: file\n      name: --output\n      direction: output\n      example: output.txt\n      required: true\n  resources:\n    - type: scala_script\n      path: script.scala\nplatforms:\n  - type: docker\n    image: \"sbtscala/scala-sbt:eclipse-temurin-19_36_1.7.2_2.13.10\"\n  - type: native\n  - type: nextflow\n\n\n\nHere’s a breakdown of the different sections:\n\nfunctionality: A description of what the component does.\n\nname: The name of the component.\narguments: The input and output parameters of the script.\nresources: References to all necessary files and folders to make the component work.\n\nplatforms: Lists which platforms a component can target (i.e. Native, Docker or Nextflow)."
  },
  {
    "objectID": "guide/component/create-component.html#run-the-component",
    "href": "guide/component/create-component.html#run-the-component",
    "title": "Create a new component",
    "section": "Run the component",
    "text": "Run the component\nThat’s it! With these two steps, you created your first component. Next, you can use the viash run command to test whether it actually works as intended.\n\nBashC#JavaScriptPythonRScala\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_bash\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_bash:latest'\n[warning] Could not pull from 'example_bash:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_bash:latest' with Dockerfile\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/bash/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/bash/foo.txt'.\n\n\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_csharp\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_csharp:latest'\n[warning] Could not pull from 'example_csharp:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_csharp:latest' with Dockerfile\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/csharp/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/csharp/foo.txt'.\n\n\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_js\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_js:latest'\n[warning] Could not pull from 'example_js:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_js:latest' with Dockerfile\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/js/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/js/foo.txt'\n\n\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_python\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_python:latest'\n[warning] Could not pull from 'example_python:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_python:latest' with Dockerfile\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/python/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/python/foo.txt'.\n\n\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_r\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_r:latest'\n[warning] Could not pull from 'example_r:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_r:latest' with Dockerfile\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/r/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/r/foo.txt'.\n[1] TRUE\n\n\n\n\nYou can call use the component’s --help functionality to get an overview its parameters and descriptions.\n\nviash run config.vsh.yaml -- --help\n\nexample_scala\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\nAs expected, this component has an --input and --output parameter. You can execute the component by providing values for these parameters.\n\nviash run config.vsh.yaml -- --input config.vsh.yaml --output foo.txt\n\n[notice] Checking if Docker image is available at 'example_scala:latest'\n[warning] Could not pull from 'example_scala:latest'. Docker image doesn't exist or is not accessible.\n[notice] Building container 'example_scala:latest' with Dockerfile\nwarning: 1 deprecation; re-run with -deprecation for details\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/scala/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/scala/foo.txt'.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe double dash (--) between the viash command and the arguments is used to signify the end of the arguments passed to Viash and the start of those passed to the script. If you forgot to add these, you’ll get an error similar to this:\n\nviash run config.vsh.yaml \\\n  --input foo.txt \\\n  --output bar.txt\n\n[scallop] Error: Unknown option 'input'"
  },
  {
    "objectID": "guide/component/create-component.html#build-an-executable",
    "href": "guide/component/create-component.html#build-an-executable",
    "title": "Create a new component",
    "section": "Build an executable",
    "text": "Build an executable\nWe will now turn the Viash component into an executable.\n\nBashC#JavaScriptPythonRScala\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.sh\n└── target\n    └── example_bash\n\n1 directory, 4 files\n\n\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.csx\n└── target\n    └── example_csharp\n\n1 directory, 4 files\n\n\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.js\n└── target\n    └── example_js\n\n1 directory, 4 files\n\n\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.py\n└── target\n    └── example_python\n\n1 directory, 4 files\n\n\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.R\n└── target\n    └── example_r\n\n1 directory, 4 files\n\n\n\n\nUse the viash build command to generate an executable:\n\nviash build config.vsh.yaml --output target\n\nThis will generate an executable in the target/ directory:\n\ntree\n\n.\n├── config.vsh.yaml\n├── foo.txt\n├── script.scala\n└── target\n    └── example_scala\n\n1 directory, 4 files"
  },
  {
    "objectID": "guide/component/create-component.html#displaying-the-help-text",
    "href": "guide/component/create-component.html#displaying-the-help-text",
    "title": "Create a new component",
    "section": "Displaying the help text",
    "text": "Displaying the help text\nIt’s often useful to know what arguments an executable expects before trying to run it.\n\nBashC#JavaScriptPythonRScala\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_bash --help\n\nexample_bash\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_csharp --help\n\nexample_csharp\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_js --help\n\nexample_js\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_python --help\n\nexample_python\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_r --help\n\nexample_r\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\nTo display its documentation, run the executable with just the --help argument:\n\ntarget/example_scala --help\n\nexample_scala\n\nA minimal example component.\n\nArguments:\n    --input\n        type: file, required parameter, file must exist\n        example: file.txt\n\n    --output\n        type: file, required parameter, output, file must exist\n        example: output.txt\n\n\n\n\n\nThis executable takes a file as input and will create an output file."
  },
  {
    "objectID": "guide/component/create-component.html#running-the-executable",
    "href": "guide/component/create-component.html#running-the-executable",
    "title": "Create a new component",
    "section": "Running the executable",
    "text": "Running the executable\nRunning an executable is the same as any other executable on your system.\n\nBashC#JavaScriptPythonRScala\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_bash --input config.vsh.yaml --output output.txt\n\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/bash/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/bash/output.txt'.\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  428 Oct 23 09:10 config.vsh.yaml\n-rw-r--r-- 1 runner docker  428 Oct 23 09:10 foo.txt\n-rw-r--r-- 1 runner docker  428 Oct 23 09:14 output.txt\n-rwxr-xr-x 1 runner docker  181 Oct 23 09:10 script.sh\ndrwxr-xr-x 2 runner docker 4096 Oct 23 09:13 target\n\n\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_csharp --input config.vsh.yaml --output output.txt\n\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/csharp/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/csharp/output.txt'.\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  467 Oct 23 09:10 config.vsh.yaml\n-rw-r--r-- 1 runner docker  467 Oct 23 09:10 foo.txt\n-rw-r--r-- 1 runner docker  467 Oct 23 09:10 output.txt\n-rw-r--r-- 1 runner docker  237 Oct 23 09:10 script.csx\ndrwxr-xr-x 2 runner docker 4096 Oct 23 09:13 target\n\n\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_js --input config.vsh.yaml --output output.txt\n\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/js/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/js/output.txt'\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  445 Oct 23 09:10 config.vsh.yaml\n-rw-r--r-- 1 runner docker  445 Oct 23 09:11 foo.txt\n-rw-r--r-- 1 runner docker  445 Oct 23 09:14 output.txt\n-rwxr-xr-x 1 runner docker  282 Oct 23 09:10 script.js\ndrwxr-xr-x 2 runner docker 4096 Oct 23 09:13 target\n\n\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_python --input config.vsh.yaml --output output.txt\n\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/python/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/python/output.txt'.\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  440 Oct 23 09:10 config.vsh.yaml\n-rw-r--r-- 1 runner docker  440 Oct 23 09:12 foo.txt\n-rw-r--r-- 1 runner docker  440 Oct 23 09:14 output.txt\n-rwxr-xr-x 1 runner docker  216 Oct 23 09:10 script.py\ndrwxr-xr-x 2 runner docker 4096 Oct 23 09:13 target\n\n\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_r --input config.vsh.yaml --output output.txt\n\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/r/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/r/output.txt'.\n[1] TRUE\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  435 Oct 23 09:10 config.vsh.yaml\n-rw-r--r-- 1 runner docker  435 Oct 23 09:12 foo.txt\n-rw-r--r-- 1 runner docker  435 Oct 23 09:14 output.txt\n-rwxr-xr-x 1 runner docker  207 Oct 23 09:10 script.R\ndrwxr-xr-x 2 runner docker 4096 Oct 23 09:13 target\n\n\n\n\nYou can run the executable by providing a value for --input and --output:\n\ntarget/example_scala --input config.vsh.yaml --output output.txt\n\nwarning: 1 deprecation; re-run with -deprecation for details\nCopying '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/scala/config.vsh.yaml' to '/viash_automount/tmp/RtmpN2W7b5/create_new_component83c1791206fd/scala/output.txt'.\n\n\nThis results in the following output:\n\nls -l\n\ntotal 20\n-rw-r--r-- 1 runner docker  479 Oct 23 09:10 config.vsh.yaml\n-rw-r--r-- 1 runner docker  479 Oct 23 09:13 foo.txt\n-rw-r--r-- 1 runner docker  479 Oct 23 09:14 output.txt\n-rw-r--r-- 1 runner docker  435 Oct 23 09:10 script.scala\ndrwxr-xr-x 2 runner docker 4096 Oct 23 09:13 target"
  },
  {
    "objectID": "reference/nextflow_vdsl3/import_module.html",
    "href": "reference/nextflow_vdsl3/import_module.html",
    "title": "Import a VDSL3 module",
    "section": "",
    "text": "A VDSL3 module is a Nextflow module generated by Viash. See the guide for a more in-depth explanation on how to create Nextflow workflows with VDSL3 modules."
  },
  {
    "objectID": "reference/nextflow_vdsl3/import_module.html#importing-a-vdsl3-module",
    "href": "reference/nextflow_vdsl3/import_module.html#importing-a-vdsl3-module",
    "title": "Import a VDSL3 module",
    "section": "Importing a VDSL3 module",
    "text": "Importing a VDSL3 module\nAfter building a VDSL3 module from a component, the VDSL3 module can be imported just like any other Nextflow module.\nExample:\ninclude { mymodule } from 'target/nextflow/mymodule/main.nf'"
  },
  {
    "objectID": "reference/nextflow_vdsl3/import_module.html#vdsl3-module-interface",
    "href": "reference/nextflow_vdsl3/import_module.html#vdsl3-module-interface",
    "title": "Import a VDSL3 module",
    "section": "VDSL3 module interface",
    "text": "VDSL3 module interface\nVDSL3 modules are actually workflows which take one channel and emit one channel. It expects the channel events to be tuples containing an ‘id’ and a ‘state’: [id, state], where id is a unique String and state is a Map[String, Object]. The resulting channel then consists of tuples [id, new_state].\nExample:\nworkflow {\n  Channel.fromList([\n    [\"myid\", [input: file(\"in.txt\")]]\n  ])\n    | mymodule\n}\n\n\n\n\n\n\nNote\n\n\n\nIf the input tuple has more than two elements, the elements after the second element are passed through to the output tuple. That is, an input tuple [id, input, ...] will result in a tuple [id, output, ...] after running the module. For example, an input tuple [\"foo\", [input: file(\"in.txt\")], \"bar\"] will result in an output tuple [\"foo\", [output: file(\"out.txt\")], \"bar\"]."
  },
  {
    "objectID": "reference/nextflow_vdsl3/import_module.html#customizing-vdsl3-modules-on-the-fly",
    "href": "reference/nextflow_vdsl3/import_module.html#customizing-vdsl3-modules-on-the-fly",
    "title": "Import a VDSL3 module",
    "section": "Customizing VDSL3 modules on the fly",
    "text": "Customizing VDSL3 modules on the fly\nUsually, Nextflow processes are quite static objects. For example, changing its directives can be quite tricky.\nThe .run() function is a unique feature for every VDSL3 module which allows dynamically altering the behaviour of a module from within the pipeline. For example, we use it to set the publishDir directive to \"output/\" so the output of that step in the pipeline will be stored as output.\nExample:\nworkflow {\n  Channel.fromList([\n    [\"myid\", [input: file(\"in.txt\")]]\n  ])\n    | mymodule.run(\n      args: [k: 10],\n      directives: [cpus: 4, memory: \"16 GB\"]\n    )\n}\n\nArguments of .run()\n\nkey (String): A unique key used to trace the process and help make names of output files unique. Default: the name of the Viash component.\nargs (Map[String, Object]): Argument overrides to be passed to the module.\ndirectives (Map[String, Object]): Custom directives overrides. See the Nextflow documentation for a list of available directives.\nauto (Map[String, Boolean]): Whether to apply certain automated processing steps. Default values are inherited from the Viash config.\nauto.simplifyInput: If true, if the input tuple is a single file and if the module only has a single input file, the input file will be passed the module accordingly. Default: true (inherited from Viash config).\nauto.simplifyOutput: If true, if the output tuple is a single file and if the module only has a single output file, the output map will be transformed into a single file. Default: true (inherited from Viash config).\nauto.publish: If true, the output files will be published to the params.publishDir folder. Default: false (inherited from Viash config).\nauto.transcript: If true, the module’s transcript will be published to the params.transcriptDir folder. Default: false (inherited from Viash config).\nmap (Function): Apply a map over the incoming tuple. Example: { tup -&gt; [ tup[0], [input: tup[1].output] ] + tup.drop(2) }. Default: null.\nmapId (Function): Apply a map over the ID element of a tuple (i.e. the first element). Example: { id -&gt; id + \"_foo\" }. Default: null.\nmapData (Function): Apply a map over the data element of a tuple (i.e. the second element). Example: { data -&gt; [ input: data.output ] }. Default: null.\nmapPassthrough (Function): Apply a map over the passthrough elements of a tuple (i.e. the tuple excl. the first two elements). Example: { pt -&gt; pt.drop(1) }. Default: null.\nfilter (Function): Filter the channel. Example: { tup -&gt; tup[0] == \"foo\" }. Default: null.\nfromState: Fetch data from the state and pass it to the module without altering the current state. fromState should be null, List[String], Map[String, String] or a function.\n\nIf it is null, the state will be passed to the module as is.\nIf it is a List[String], the data will be the values of the state at the given keys.\nIf it is a Map[String, String], the data will be the values of the state at the given keys, with the keys renamed according to the map.\nIf it is a function, the tuple ([id, state]) in the channel will be passed to the function, and the result will be used as the data.\n\nExample: { id, state -&gt; [input: state.fastq_file] } Default: null\ntoState: Determine how the state should be updated after the module has been run. toState should be null, List[String], Map[String, String] or a function.\n\nIf it is null, the state will be replaced with the output of the module.\nIf it is a List[String], the state will be updated with the values of the data at the given keys.\nIf it is a Map[String, String], the state will be updated with the values of the data at the given keys, with the keys renamed according to the map.\nIf it is a function, a tuple ([id, output, state]) will be passed to the function, and the result will be used as the new state.\n\nExample: { id, output, state -&gt; state + [counts: state.output] } Default: { id, output, state -&gt; output }\ndebug: Whether or not to print debug messages. Default: false."
  },
  {
    "objectID": "reference/nextflow_vdsl3/index.html",
    "href": "reference/nextflow_vdsl3/index.html",
    "title": "Nextflow VDSL3",
    "section": "",
    "text": "Viash supports creating Nextflow workflows in multiple ways.\n\nRun a module as a standalone pipeline\nImport a VDSL3 module\nCreate a Nextflow workflow with dependencies"
  },
  {
    "objectID": "reference/cli/build.html",
    "href": "reference/cli/build.html",
    "title": "Viash Build",
    "section": "",
    "text": "Build an executable from the provided viash config file.\nUsage:\nviash build config.vsh.yaml -o output [-p docker] [-m] [-s]\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--output, -o\nPath to directory in which the executable and any resources is built to. Default: “output/”. This is a required argument.\nString\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--push\nWhether or not to push the container to a Docker registry [Docker Platform only].\nBoolean\n\n\n--setup, -s\nWhich setup strategy for creating the container to use [Docker Platform only].\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/test.html",
    "href": "reference/cli/test.html",
    "title": "Viash Test",
    "section": "",
    "text": "Test the component using the tests defined in the viash config file.\nUsage:\nviash test config.vsh.yaml [-p docker] [-k true/false] [--setup cachedbuild]\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--cpus\nThe maximum number of (logical) cpus a component is allowed to use.\nInt\n\n\n--keep, -k\nWhether or not to keep temporary files. By default, files will be deleted if all goes well but remain when an error occurs. By specifying –keep true, the temporary files will always be retained, whereas –keep false will always delete them. The temporary directory can be overwritten by setting defining a VIASH_TEMP directory.\nString\n\n\n--memory\nThe maximum amount of memory a component is allowed to allocate. Unit must be one of B, KB, MB, GB, TB or PB.\nString\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--setup, -s\nWhich setup strategy for creating the container to use [Docker Platform only].\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/run.html",
    "href": "reference/cli/run.html",
    "title": "Viash Run",
    "section": "",
    "text": "Executes a viash component from the provided viash config file. viash generates a temporary executable and immediately executes it with the given parameters.\nUsage:\nviash run config.vsh.yaml [-p docker] [-k true/false]  -- [arguments for script]\n\n\n\nArgument\nDescription\nType\n\n\n\n\nconfig\nA viash config file (example: config.vsh.yaml). This argument can also be a script with the config as a header. This is a required argument.\nString\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--cpus\nThe maximum number of (logical) cpus a component is allowed to use.\nInt\n\n\n--keep, -k\nWhether or not to keep temporary files. By default, files will be deleted if all goes well but remain when an error occurs. By specifying –keep true, the temporary files will always be retained, whereas –keep false will always delete them. The temporary directory can be overwritten by setting defining a VIASH_TEMP directory.\nString\n\n\n--memory\nThe maximum amount of memory a component is allowed to allocate. Unit must be one of B, KB, MB, GB, TB or PB.\nString\n\n\n--platform, -p\nSpecifies which platform amongst those specified in the config to use. If this is not provided, the first platform will be used. If no platforms are defined in the config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/ns_test.html",
    "href": "reference/cli/ns_test.html",
    "title": "Viash Ns Test",
    "section": "",
    "text": "Test a namespace containing many viash config files.\nUsage:\nviash ns test [-n nmspc] [-s src] [-p docker] [--parallel] [--tsv file.tsv] [--setup cachedbuild] [--append]\n\n\n\nArgument\nDescription\nType\n\n\n\n\n--append, -a\nAppend to tsv instead of overwrite\nBoolean\n\n\n--config_mod, -c\nModify a viash config at runtime using dynamic config modding.\nList[String]\n\n\n--cpus\nThe maximum number of (logical) cpus a component is allowed to use.\nInt\n\n\n--keep, -k\nWhether or not to keep temporary files. By default, files will be deleted if all goes well but remain when an error occurs. By specifying –keep true, the temporary files will always be retained, whereas –keep false will always delete them. The temporary directory can be overwritten by setting defining a VIASH_TEMP directory.\nString\n\n\n--memory\nThe maximum amount of memory a component is allowed to allocate. Unit must be one of B, KB, MB, GB, TB or PB.\nString\n\n\n--parallel, -l\nWhether or not to run the process in parallel.\nBoolean\n\n\n--platform, -p\nActs as a regular expression to filter the platform ids specified in the found config files. If this is not provided, all platforms will be used. If no platforms are defined in a config, the native platform will be used. In addition, the path to a platform yaml file can also be specified.\nString\n\n\n--query, -q\nFilter which components get selected by component and namespace name. Can be a regex. Example: “^mynamespace/component1$”.\nString\n\n\n--query_name\nFilter which components get selected by component name. Can be a regex. Example: “^component1”.\nString\n\n\n--query_namespace, -n\nFilter which namespaces get selected by namespace name. Can be a regex. Example: “^mynamespace$”.\nString\n\n\n--setup\nWhich setup strategy for creating the container to use [Docker Platform only].\nString\n\n\n--src, -s\nA source directory containing viash config files, possibly structured in a hierarchical folder structure. Default: src/.\nString\n\n\n--tsv, -t\nPath to write a summary of the test results to.\nString\n\n\n--help, -h\nShow help message"
  },
  {
    "objectID": "reference/cli/index.html",
    "href": "reference/cli/index.html",
    "title": "CLI",
    "section": "",
    "text": "These are the available commands available on the Command Line Interface:\n\n\n  \n    Viash Build: \n  \n  \n    Viash Config Inject: \n  \n  \n    Viash Config View: \n  \n  \n    Viash Ns Build: \n  \n  \n    Viash Ns Exec: \n  \n  \n    Viash Ns List: \n  \n  \n    Viash Ns Test: \n  \n  \n    Viash Run: \n  \n  \n    Viash Test: \n  \n\n\nNo matching items"
  },
  {
    "objectID": "reference/project/index.html",
    "href": "reference/project/index.html",
    "title": "Project",
    "section": "",
    "text": "A Viash project configuration file. It’s name should be _viash.yaml.\nExample:"
  },
  {
    "objectID": "reference/project/index.html#config_mods",
    "href": "reference/project/index.html#config_mods",
    "title": "Project",
    "section": "config_mods",
    "text": "config_mods\nType: String / List of String\nDefault: Empty\nWhich config mods to apply.\nExample:\nconfig_mods: \".functionality.name := 'foo'\""
  },
  {
    "objectID": "reference/project/index.html#source",
    "href": "reference/project/index.html#source",
    "title": "Project",
    "section": "source",
    "text": "source\nType: String\nDefault: Empty\nWhich source directory to use for the viash ns commands.\nExample:\nsource: src"
  },
  {
    "objectID": "reference/project/index.html#target",
    "href": "reference/project/index.html#target",
    "title": "Project",
    "section": "target",
    "text": "target\nType: String\nDefault: Empty\nWhich target directory to use for viash ns build.\nExample:\ntarget: target"
  },
  {
    "objectID": "reference/project/index.html#viash_version",
    "href": "reference/project/index.html#viash_version",
    "title": "Project",
    "section": "viash_version",
    "text": "viash_version\nType: String\nDefault: Empty\nWhich version of Viash to use.\nExample:\nviash_versions: 0.6.4"
  },
  {
    "objectID": "reference/config/info.html",
    "href": "reference/config/info.html",
    "title": "Info",
    "section": "",
    "text": "Meta information fields filled in by Viash during build."
  },
  {
    "objectID": "reference/config/info.html#config",
    "href": "reference/config/info.html#config",
    "title": "Info",
    "section": "config",
    "text": "config\nType: String\nPath to the config used during build."
  },
  {
    "objectID": "reference/config/info.html#executable",
    "href": "reference/config/info.html#executable",
    "title": "Info",
    "section": "executable",
    "text": "executable\nType: String\nDefault: Empty\nOutput folder with main executable path."
  },
  {
    "objectID": "reference/config/info.html#git_commit",
    "href": "reference/config/info.html#git_commit",
    "title": "Info",
    "section": "git_commit",
    "text": "git_commit\nType: String\nDefault: Empty\nGit commit hash."
  },
  {
    "objectID": "reference/config/info.html#git_remote",
    "href": "reference/config/info.html#git_remote",
    "title": "Info",
    "section": "git_remote",
    "text": "git_remote\nType: String\nDefault: Empty\nGit remote name."
  },
  {
    "objectID": "reference/config/info.html#git_tag",
    "href": "reference/config/info.html#git_tag",
    "title": "Info",
    "section": "git_tag",
    "text": "git_tag\nType: String\nDefault: Empty\nGit tag."
  },
  {
    "objectID": "reference/config/info.html#output",
    "href": "reference/config/info.html#output",
    "title": "Info",
    "section": "output",
    "text": "output\nType: String\nDefault: Empty\nFolder path to the build artifacts."
  },
  {
    "objectID": "reference/config/info.html#platform",
    "href": "reference/config/info.html#platform",
    "title": "Info",
    "section": "platform",
    "text": "platform\nType: String\nDefault: Empty\nThe platform id used during build."
  },
  {
    "objectID": "reference/config/info.html#viash_version",
    "href": "reference/config/info.html#viash_version",
    "title": "Info",
    "section": "viash_version",
    "text": "viash_version\nType: String\nDefault: Empty\nThe Viash version that was used to build the component."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html",
    "href": "reference/config/functionality/arguments/boolean.html",
    "title": "Boolean",
    "section": "",
    "text": "A boolean type argument has two possible values: true or false.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#alternatives",
    "href": "reference/config/functionality/arguments/boolean.html#alternatives",
    "title": "Boolean",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nDefault: Empty\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#default",
    "href": "reference/config/functionality/arguments/boolean.html#default",
    "title": "Boolean",
    "section": "default",
    "text": "default\nType: Boolean / List of Boolean\nDefault: Empty\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_boolean\n  type: boolean\n  default: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#description",
    "href": "reference/config/functionality/arguments/boolean.html#description",
    "title": "Boolean",
    "section": "description",
    "text": "description\nType: String\nDefault: Empty\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#example",
    "href": "reference/config/functionality/arguments/boolean.html#example",
    "title": "Boolean",
    "section": "example",
    "text": "example\nType: Boolean / List of Boolean\nDefault: Empty\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_boolean\n  type: boolean\n  example: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#info",
    "href": "reference/config/functionality/arguments/boolean.html#info",
    "title": "Boolean",
    "section": "info",
    "text": "info\nType: Json\nDefault: Empty\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#multiple",
    "href": "reference/config/functionality/arguments/boolean.html#multiple",
    "title": "Boolean",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nDefault: False\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_boolean\n  type: boolean\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_boolean=true:true:false"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#multiple_sep",
    "href": "reference/config/functionality/arguments/boolean.html#multiple_sep",
    "title": "Boolean",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nDefault: :\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_boolean\n  type: boolean\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_boolean=true,true,false"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#name",
    "href": "reference/config/functionality/arguments/boolean.html#name",
    "title": "Boolean",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --trim, -t or trim. The number of dashes determines how values can be passed:\n\n--trim is a long option, which can be passed with executable_name --trim\n-t is a short option, which can be passed with executable_name -t\ntrim is an argument, which can be passed with executable_name trim"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#required",
    "href": "reference/config/functionality/arguments/boolean.html#required",
    "title": "Boolean",
    "section": "required",
    "text": "required\nType: Boolean\nDefault: False\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_boolean\n  type: boolean\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean.html#type",
    "href": "reference/config/functionality/arguments/boolean.html#type",
    "title": "Boolean",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html",
    "href": "reference/config/functionality/arguments/boolean_false.html",
    "title": "Boolean False",
    "section": "",
    "text": "An argument of the boolean_false type acts like an inverted boolean flag with a default value of true. When called as an argument it sets the boolean to false.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html#alternatives",
    "href": "reference/config/functionality/arguments/boolean_false.html#alternatives",
    "title": "Boolean False",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nDefault: Empty\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html#description",
    "href": "reference/config/functionality/arguments/boolean_false.html#description",
    "title": "Boolean False",
    "section": "description",
    "text": "description\nType: String\nDefault: Empty\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html#info",
    "href": "reference/config/functionality/arguments/boolean_false.html#info",
    "title": "Boolean False",
    "section": "info",
    "text": "info\nType: Json\nDefault: Empty\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html#name",
    "href": "reference/config/functionality/arguments/boolean_false.html#name",
    "title": "Boolean False",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --no-log, -n or no-log. The number of dashes determines how values can be passed:\n\n--no-log is a long option, which can be passed with executable_name --no-log\n-n is a short option, which can be passed with executable_name -n\nno-log is an argument, which can be passed with executable_name no-log"
  },
  {
    "objectID": "reference/config/functionality/arguments/boolean_false.html#type",
    "href": "reference/config/functionality/arguments/boolean_false.html#type",
    "title": "Boolean False",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html",
    "href": "reference/config/functionality/arguments/double.html",
    "title": "Double",
    "section": "",
    "text": "A double type argument has a numeric value with decimal points\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#alternatives",
    "href": "reference/config/functionality/arguments/double.html#alternatives",
    "title": "Double",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nDefault: Empty\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#default",
    "href": "reference/config/functionality/arguments/double.html#default",
    "title": "Double",
    "section": "default",
    "text": "default\nType: Double / List of Double\nDefault: Empty\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_double\n  type: double\n  default: 5.8"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#description",
    "href": "reference/config/functionality/arguments/double.html#description",
    "title": "Double",
    "section": "description",
    "text": "description\nType: String\nDefault: Empty\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#example",
    "href": "reference/config/functionality/arguments/double.html#example",
    "title": "Double",
    "section": "example",
    "text": "example\nType: Double / List of Double\nDefault: Empty\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_double\n  type: double\n  example: 5.8"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#info",
    "href": "reference/config/functionality/arguments/double.html#info",
    "title": "Double",
    "section": "info",
    "text": "info\nType: Json\nDefault: Empty\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#max",
    "href": "reference/config/functionality/arguments/double.html#max",
    "title": "Double",
    "section": "max",
    "text": "max\nType: Double\nDefault: Empty\nMaximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with min to clamp values.\nExample:\n- name: --my_double\n  type: double\n  max: 80.4"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#min",
    "href": "reference/config/functionality/arguments/double.html#min",
    "title": "Double",
    "section": "min",
    "text": "min\nType: Double\nDefault: Empty\nMinimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with max to clamp values.\nExample:\n- name: --my_double\n  type: double\n  min: 25.5"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#multiple",
    "href": "reference/config/functionality/arguments/double.html#multiple",
    "title": "Double",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nDefault: False\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_double\n  type: double\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_double=5.8:22.6:200.4"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#multiple_sep",
    "href": "reference/config/functionality/arguments/double.html#multiple_sep",
    "title": "Double",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nDefault: :\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_double\n  type: double\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_double=5.8,22.6,200.4"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#name",
    "href": "reference/config/functionality/arguments/double.html#name",
    "title": "Double",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#required",
    "href": "reference/config/functionality/arguments/double.html#required",
    "title": "Double",
    "section": "required",
    "text": "required\nType: Boolean\nDefault: False\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_double\n  type: double\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/double.html#type",
    "href": "reference/config/functionality/arguments/double.html#type",
    "title": "Double",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html",
    "href": "reference/config/functionality/arguments/long.html",
    "title": "Long",
    "section": "",
    "text": "An long type argument has a numeric value without decimal points.\nExample:"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#alternatives",
    "href": "reference/config/functionality/arguments/long.html#alternatives",
    "title": "Long",
    "section": "alternatives",
    "text": "alternatives\nType: String / List of String\nDefault: Empty\nList of alternative format variations for this argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#choices",
    "href": "reference/config/functionality/arguments/long.html#choices",
    "title": "Long",
    "section": "choices",
    "text": "choices\nType: List of Long\nDefault: Empty\nLimit the amount of valid values for this argument to those set in this list. When set and a value not present in the list is provided, an error will be produced.\nExample:\n- name: --values\n  type: long\n  choices: [1024, 2048, 4096]"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#default",
    "href": "reference/config/functionality/arguments/long.html#default",
    "title": "Long",
    "section": "default",
    "text": "default\nType: Long / List of Long\nDefault: Empty\nThe default value when no argument value is provided. This will not work if the required property is enabled.\nExample:\n- name: --my_long\n  type: long\n  default: 100"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#description",
    "href": "reference/config/functionality/arguments/long.html#description",
    "title": "Long",
    "section": "description",
    "text": "description\nType: String\nDefault: Empty\nA description of the argument. This will be displayed with --help."
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#example",
    "href": "reference/config/functionality/arguments/long.html#example",
    "title": "Long",
    "section": "example",
    "text": "example\nType: Long / List of Long\nDefault: Empty\nAn example value for this argument. If no default property was specified, this will be used for that purpose.\nExample:\n- name: --my_long\n  type: long\n  example: 100"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#info",
    "href": "reference/config/functionality/arguments/long.html#info",
    "title": "Long",
    "section": "info",
    "text": "info\nType: Json\nDefault: Empty\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  category: cat1\n  labels: [one, two, three]"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#max",
    "href": "reference/config/functionality/arguments/long.html#max",
    "title": "Long",
    "section": "max",
    "text": "max\nType: Long\nDefault: Empty\nMaximum allowed value for this argument. If set and the provided value is higher than the maximum, an error will be produced. Can be combined with min to clamp values.\nExample:\n- name: --my_long\n  type: long\n  max: 150"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#min",
    "href": "reference/config/functionality/arguments/long.html#min",
    "title": "Long",
    "section": "min",
    "text": "min\nType: Long\nDefault: Empty\nMinimum allowed value for this argument. If set and the provided value is lower than the minimum, an error will be produced. Can be combined with max to clamp values.\nExample:\n- name: --my_long\n  type: long\n  min: 50"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#multiple",
    "href": "reference/config/functionality/arguments/long.html#multiple",
    "title": "Long",
    "section": "multiple",
    "text": "multiple\nType: Boolean\nDefault: False\nTreat the argument value as an array. Arrays can be passed using the delimiter --foo=1:2:3 or by providing the same argument multiple times --foo 1 --foo 2. You can use a custom delimiter by using the multiple_sep property. false by default.\nExamples:\n- name: --my_long\n  type: long\n  multiple: true\nHere’s an example of how to use this:\nmy_component --my_long=10:80:152"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#multiple_sep",
    "href": "reference/config/functionality/arguments/long.html#multiple_sep",
    "title": "Long",
    "section": "multiple_sep",
    "text": "multiple_sep\nType: String\nDefault: :\nThe delimiter character for providing multiple values. : by default.\nExamples:\n- name: --my_long\n  type: long\n  multiple: true\n  multiple_sep: \",\"\nHere’s an example of how to use this:\nmy_component --my_long=10:80:152"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#name",
    "href": "reference/config/functionality/arguments/long.html#name",
    "title": "Long",
    "section": "name",
    "text": "name\nType: String\nThe name of the argument. Can be in the formats --foo, -f or foo. The number of dashes determines how values can be passed:\n\n--foo is a long option, which can be passed with executable_name --foo=value or executable_name --foo value\n-f is a short option, which can be passed with executable_name -f value\nfoo is an argument, which can be passed with executable_name value"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#required",
    "href": "reference/config/functionality/arguments/long.html#required",
    "title": "Long",
    "section": "required",
    "text": "required\nType: Boolean\nDefault: False\nMake the value for this argument required. If set to true, an error will be produced if no value was provided. false by default.\nExample:\n- name: --my_long\n  type: long\n  required: true"
  },
  {
    "objectID": "reference/config/functionality/arguments/long.html#type",
    "href": "reference/config/functionality/arguments/long.html#type",
    "title": "Long",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the argument."
  },
  {
    "objectID": "reference/config/functionality/arguments/index.html",
    "href": "reference/config/functionality/arguments/index.html",
    "title": "Argument",
    "section": "",
    "text": "For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. See these reference pages per type for more information:\n\nstring\nfile\ninteger\ndouble\nboolean\nboolean_true\nboolean_false\n\nExample:\narguments:\n  - name: --foo\n    type: file\n    alternatives: [-f]\n    description: Description of foo\n    default: \"/foo/bar\"\n    must_exist: true\n    direction: output\n    required: false\n    multiple: true\n    multiple_sep: \",\"\n  - name: --bar\n    type: string"
  },
  {
    "objectID": "reference/config/functionality/dependencies/gitRepository.html",
    "href": "reference/config/functionality/dependencies/gitRepository.html",
    "title": "Git Repository",
    "section": "",
    "text": "A Git repository where remote dependency components can be found.\nExamples:"
  },
  {
    "objectID": "reference/config/functionality/dependencies/gitRepository.html#name",
    "href": "reference/config/functionality/dependencies/gitRepository.html#name",
    "title": "Git Repository",
    "section": "name",
    "text": "name\nType: String\nThe identifier used to refer to this repository from dependencies."
  },
  {
    "objectID": "reference/config/functionality/dependencies/gitRepository.html#path",
    "href": "reference/config/functionality/dependencies/gitRepository.html#path",
    "title": "Git Repository",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nDefines a subfolder of the repository to use as base to look for the dependency components."
  },
  {
    "objectID": "reference/config/functionality/dependencies/gitRepository.html#tag",
    "href": "reference/config/functionality/dependencies/gitRepository.html#tag",
    "title": "Git Repository",
    "section": "tag",
    "text": "tag\nType: String\nDefault: Empty\nDefines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash."
  },
  {
    "objectID": "reference/config/functionality/dependencies/gitRepository.html#type",
    "href": "reference/config/functionality/dependencies/gitRepository.html#type",
    "title": "Git Repository",
    "section": "type",
    "text": "type\nType: String\nDefines the repository as a Git repository."
  },
  {
    "objectID": "reference/config/functionality/dependencies/gitRepository.html#uri",
    "href": "reference/config/functionality/dependencies/gitRepository.html#uri",
    "title": "Git Repository",
    "section": "uri",
    "text": "uri\nType: String\nThe URI of the Git repository.\nExample:\nuri: \"git+https://github.com/openpipelines-bio/openpipeline.git\""
  },
  {
    "objectID": "reference/config/functionality/dependencies/index.html",
    "href": "reference/config/functionality/dependencies/index.html",
    "title": "Dependency",
    "section": "",
    "text": "Specifies a Viash component (script or executable) that should be made available for the code defined in the functionality. The dependency components are collected and copied to the output folder during the Viash build step.\nExamples:\nDefinition of dependency with a fully defined repository\nDefinition of a dependency with a repository using sugar syntax.\nDefinition of a dependency with a repository defined as ‘openpipelines-bio’ under .functionality.repositories.\nDefinition of a local dependency. This dependency is present in the current code base and will be built when viash ns build is run."
  },
  {
    "objectID": "reference/config/functionality/dependencies/index.html#alias",
    "href": "reference/config/functionality/dependencies/index.html#alias",
    "title": "Dependency",
    "section": "alias",
    "text": "alias\nType: String\nDefault: Empty\nAn alternative name for the dependency component. This can include a namespace if so needed.\nExample:\nalias: my_alias"
  },
  {
    "objectID": "reference/config/functionality/dependencies/index.html#name",
    "href": "reference/config/functionality/dependencies/index.html#name",
    "title": "Dependency",
    "section": "name",
    "text": "name\nType: String\nThe full name of the dependency component. This should include the namespace.\nExample:\nname: \"my_namespace\"component"
  },
  {
    "objectID": "reference/config/functionality/dependencies/index.html#repository",
    "href": "reference/config/functionality/dependencies/index.html#repository",
    "title": "Dependency",
    "section": "repository",
    "text": "repository\nType: Either   - String   - Repository\nDefault: Empty\nSpecifies the location where the dependency component can be found. This must either be a full definition of the repository or the name of a repository refenced as it is defined under functionality.repositories. Additionally, the full definition can be specified as a single string where all parameters such as repository type, url, branch or tag are specified."
  },
  {
    "objectID": "reference/config/functionality/dependencies/localRepository.html",
    "href": "reference/config/functionality/dependencies/localRepository.html",
    "title": "Local Repository",
    "section": "",
    "text": "Defines a locally present and available repository. This can be used to define components from the same code base as the current component. Alternatively, this can be used to refer to a code repository present on the local hard-drive instead of fetchable remotely, for example during development.\nExample:\nRefer to a local code repository under additional_code/src referenced to the Viash Project Config file."
  },
  {
    "objectID": "reference/config/functionality/dependencies/localRepository.html#name",
    "href": "reference/config/functionality/dependencies/localRepository.html#name",
    "title": "Local Repository",
    "section": "name",
    "text": "name\nType: String\nThe identifier used to refer to this repository from dependencies."
  },
  {
    "objectID": "reference/config/functionality/dependencies/localRepository.html#path",
    "href": "reference/config/functionality/dependencies/localRepository.html#path",
    "title": "Local Repository",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nDefines a subfolder of the repository to use as base to look for the dependency components."
  },
  {
    "objectID": "reference/config/functionality/dependencies/localRepository.html#tag",
    "href": "reference/config/functionality/dependencies/localRepository.html#tag",
    "title": "Local Repository",
    "section": "tag",
    "text": "tag\nType: String\nDefault: Empty\nDefines which version of the dependency component to use. Typically this can be a specific tag, branch or commit hash."
  },
  {
    "objectID": "reference/config/functionality/dependencies/localRepository.html#type",
    "href": "reference/config/functionality/dependencies/localRepository.html#type",
    "title": "Local Repository",
    "section": "type",
    "text": "type\nType: String\nDefines the repository as a locally present and available repository."
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html",
    "href": "reference/config/functionality/resources/plainFile.html",
    "title": "Plain File",
    "section": "",
    "text": "A plain file. This can only be used as a supporting resource for the main script or unit tests."
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html#dest",
    "href": "reference/config/functionality/resources/plainFile.html#dest",
    "title": "Plain File",
    "section": "dest",
    "text": "dest\nType: String\nDefault: Empty\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html#is_executable",
    "href": "reference/config/functionality/resources/plainFile.html#is_executable",
    "title": "Plain File",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nDefault: Empty\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html#path",
    "href": "reference/config/functionality/resources/plainFile.html#path",
    "title": "Plain File",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html#text",
    "href": "reference/config/functionality/resources/plainFile.html#text",
    "title": "Plain File",
    "section": "text",
    "text": "text\nType: String\nDefault: Empty\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/plainFile.html#type",
    "href": "reference/config/functionality/resources/plainFile.html#type",
    "title": "Plain File",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a plain file."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html",
    "href": "reference/config/functionality/resources/nextflowScript.html",
    "title": "Nextflow Script",
    "section": "",
    "text": "A Nextflow script. Work in progress; added mainly for annotation at the moment."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#dest",
    "href": "reference/config/functionality/resources/nextflowScript.html#dest",
    "title": "Nextflow Script",
    "section": "dest",
    "text": "dest\nType: String\nDefault: Empty\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#entrypoint",
    "href": "reference/config/functionality/resources/nextflowScript.html#entrypoint",
    "title": "Nextflow Script",
    "section": "entrypoint",
    "text": "entrypoint\nType: String\nThe name of the workflow to be wrapped."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#is_executable",
    "href": "reference/config/functionality/resources/nextflowScript.html#is_executable",
    "title": "Nextflow Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nDefault: Empty\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#path",
    "href": "reference/config/functionality/resources/nextflowScript.html#path",
    "title": "Nextflow Script",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#text",
    "href": "reference/config/functionality/resources/nextflowScript.html#text",
    "title": "Nextflow Script",
    "section": "text",
    "text": "text\nType: String\nDefault: Empty\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/nextflowScript.html#type",
    "href": "reference/config/functionality/resources/nextflowScript.html#type",
    "title": "Nextflow Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a Nextflow script."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html",
    "href": "reference/config/functionality/resources/bashScript.html",
    "title": "Bash Script",
    "section": "",
    "text": "An executable Bash script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html#dest",
    "href": "reference/config/functionality/resources/bashScript.html#dest",
    "title": "Bash Script",
    "section": "dest",
    "text": "dest\nType: String\nDefault: Empty\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html#is_executable",
    "href": "reference/config/functionality/resources/bashScript.html#is_executable",
    "title": "Bash Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nDefault: Empty\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html#path",
    "href": "reference/config/functionality/resources/bashScript.html#path",
    "title": "Bash Script",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html#text",
    "href": "reference/config/functionality/resources/bashScript.html#text",
    "title": "Bash Script",
    "section": "text",
    "text": "text\nType: String\nDefault: Empty\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/bashScript.html#type",
    "href": "reference/config/functionality/resources/bashScript.html#type",
    "title": "Bash Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a Bash script."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html",
    "href": "reference/config/functionality/resources/executable.html",
    "title": "Executable",
    "section": "",
    "text": "An executable file."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html#dest",
    "href": "reference/config/functionality/resources/executable.html#dest",
    "title": "Executable",
    "section": "dest",
    "text": "dest\nType: String\nDefault: Empty\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html#is_executable",
    "href": "reference/config/functionality/resources/executable.html#is_executable",
    "title": "Executable",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nDefault: Empty\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html#path",
    "href": "reference/config/functionality/resources/executable.html#path",
    "title": "Executable",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html#text",
    "href": "reference/config/functionality/resources/executable.html#text",
    "title": "Executable",
    "section": "text",
    "text": "text\nType: String\nDefault: Empty\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/executable.html#type",
    "href": "reference/config/functionality/resources/executable.html#type",
    "title": "Executable",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as an executable."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html",
    "href": "reference/config/functionality/resources/rScript.html",
    "title": "R Script",
    "section": "",
    "text": "An executable R script. When defined in functionality.resources, only the first entry will be executed when running the built component or when running viash run. When defined in functionality.test_resources, all entries will be executed during viash test."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html#dest",
    "href": "reference/config/functionality/resources/rScript.html#dest",
    "title": "R Script",
    "section": "dest",
    "text": "dest\nType: String\nDefault: Empty\nResulting filename of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html#is_executable",
    "href": "reference/config/functionality/resources/rScript.html#is_executable",
    "title": "R Script",
    "section": "is_executable",
    "text": "is_executable\nType: Boolean\nDefault: Empty\nWhether the resulting resource file should be made executable."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html#path",
    "href": "reference/config/functionality/resources/rScript.html#path",
    "title": "R Script",
    "section": "path",
    "text": "path\nType: String\nDefault: Empty\nThe path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html#text",
    "href": "reference/config/functionality/resources/rScript.html#text",
    "title": "R Script",
    "section": "text",
    "text": "text\nType: String\nDefault: Empty\nThe content of the resulting file specified as a string. Mutually exclusive with path."
  },
  {
    "objectID": "reference/config/functionality/resources/rScript.html#type",
    "href": "reference/config/functionality/resources/rScript.html#type",
    "title": "R Script",
    "section": "type",
    "text": "type\nType: String\nSpecifies the resource as a R script."
  },
  {
    "objectID": "reference/config/functionality/computationalRequirements.html",
    "href": "reference/config/functionality/computationalRequirements.html",
    "title": "Computational Requirements",
    "section": "",
    "text": "Computational requirements related to running the component."
  },
  {
    "objectID": "reference/config/functionality/computationalRequirements.html#commands",
    "href": "reference/config/functionality/computationalRequirements.html#commands",
    "title": "Computational Requirements",
    "section": "commands",
    "text": "commands\nType: List of String\nDefault: Empty\nA list of commands which should be present on the system for the script to function.\nExample:\ncommands: [ which, bash, awk, date, grep, egrep, ps, sed, tail, tee ]"
  },
  {
    "objectID": "reference/config/functionality/computationalRequirements.html#cpus",
    "href": "reference/config/functionality/computationalRequirements.html#cpus",
    "title": "Computational Requirements",
    "section": "cpus",
    "text": "cpus\nType: Int\nDefault: Empty\nThe maximum number of (logical) cpus a component is allowed to use.\nExample:\ncpus: 10"
  },
  {
    "objectID": "reference/config/functionality/computationalRequirements.html#memory",
    "href": "reference/config/functionality/computationalRequirements.html#memory",
    "title": "Computational Requirements",
    "section": "memory",
    "text": "memory\nType: String\nDefault: Empty\nThe maximum amount of memory a component is allowed to allocate. Unit must be one of B, KB, MB, GB, TB or PB.\nExample:\nmemory: 10GB"
  },
  {
    "objectID": "reference/config/functionality/index.html",
    "href": "reference/config/functionality/index.html",
    "title": "Functionality",
    "section": "",
    "text": "The functionality-part of the config file describes the behaviour of the script in terms of arguments and resources. By specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, Viash will automatically generate a stylish command-line interface for you."
  },
  {
    "objectID": "reference/config/functionality/index.html#argument_groups",
    "href": "reference/config/functionality/index.html#argument_groups",
    "title": "Functionality",
    "section": "argument_groups",
    "text": "argument_groups\nType: List of ArgumentGroup\nDefault: Empty\nA grouping of the arguments, used to display the help message.\n\nname: foo, the name of the argument group.\ndescription: Description of foo, a description of the argument group. Multiline descriptions are supported.\narguments: [arg1, arg2, ...], list of the arguments.\n\nExamples:\nargument_groups:\n  - name: \"Input\"\n    arguments:\n      - name: \"--id\"\n        type: string\n        required: true\n      - name: \"--input\"\n        type: file\n        required: true\n  - name: \"Output\"\n    arguments:\n      - name: \"--output\"\n        type: file\n        direction: output\n        required: true\n      - name: \"--output_optional\"\n        type: file\n        direction: output\nThis results in the following output when calling the component with the --help argument:\ncomponent_name\n\n  Input:\n      --id\n          type: string\n\n      --input\n          type: file\n\n  Output:\n      --output\n          type: file\n\n      --optional_output\n          type: file"
  },
  {
    "objectID": "reference/config/functionality/index.html#arguments",
    "href": "reference/config/functionality/index.html#arguments",
    "title": "Functionality",
    "section": "arguments",
    "text": "arguments\nType: List of Argument\nDefault: Empty\nA list of arguments for this component. For each argument, a type and a name must be specified. Depending on the type of argument, different properties can be set. See these reference pages per type for more information:\n\nstring\nfile\ninteger\ndouble\nboolean\nboolean_true\nboolean_false\n\nExample:\narguments:\n  - name: --foo\n    type: file\n    alternatives: [-f]\n    description: Description of foo\n    default: \"/foo/bar\"\n    must_exist: true\n    direction: output\n    required: false\n    multiple: true\n    multiple_sep: \",\"\n  - name: --bar\n    type: string"
  },
  {
    "objectID": "reference/config/functionality/index.html#authors",
    "href": "reference/config/functionality/index.html#authors",
    "title": "Functionality",
    "section": "authors",
    "text": "authors\nType: List of Author\nDefault: Empty\nA list of authors. An author must at least have a name, but can also have a list of roles, an e-mail address, and a map of custom properties.\nSuggested values for roles are:\n\n\n\n\n\n\n\n\nRole\nAbbrev.\nDescription\n\n\n\n\nmaintainer\nmnt\nfor the maintainer of the code. Ideally, exactly one maintainer is specified.\n\n\nauthor\naut\nfor persons who have made substantial contributions to the software.\n\n\ncontributor\nctb\nfor persons who have made smaller contributions (such as code patches).\n\n\ndatacontributor\ndtc\nfor persons or organisations that contributed data sets for the software\n\n\ncopyrightholder\ncph\nfor all copyright holders. This is a legal concept so should use the legal name of an institution or corporate body.\n\n\nfunder\nfnd\nfor persons or organizations that furnished financial support for the development of the software\n\n\n\nThe full list of roles is extremely comprehensive.\nExample:\nauthors:\n  - name: Jane Doe\n    role: [author, maintainer]\n    email: jane@doe.com\n    info:\n      github: janedoe\n      twitter: janedoe\n      orcid: XXAABBCCXX\n      groups: [ one, two, three ]\n  - name: Tim Farbe\n    roles: [author]\n    email: tim@far.be"
  },
  {
    "objectID": "reference/config/functionality/index.html#dependencies",
    "href": "reference/config/functionality/index.html#dependencies",
    "title": "Functionality",
    "section": "dependencies",
    "text": "dependencies\nType: List of Dependency\nDefault: Empty\nAllows listing Viash components required by this Viash component\nExamples:\nFull specification of a repository\ndependencies:\n  - name: qc/multiqc\n    repository: \n      type: github\n      uri: openpipelines-bio/modules\n      tag: 0.3.0\nFull specification of a repository using sugar syntax\ndependencies:\n  - name: qc/multiqc\n    repository: \"github://openpipelines-bio/modules:0.3.0\"\nReference to a repository fully specified under ‘repositories’\ndependencies:\n  - name: qc/multiqc\n    repository: \"openpipelines-bio\""
  },
  {
    "objectID": "reference/config/functionality/index.html#description",
    "href": "reference/config/functionality/index.html#description",
    "title": "Functionality",
    "section": "description",
    "text": "description\nType: String\nDefault: Empty\nA description of the component. This will be displayed with --help.\nExample:\ndescription: |\n  This component performs function Y and Z.\n  It is possible to make this a multiline string."
  },
  {
    "objectID": "reference/config/functionality/index.html#info",
    "href": "reference/config/functionality/index.html#info",
    "title": "Functionality",
    "section": "info",
    "text": "info\nType: Json\nDefault: Empty\nStructured information. Can be any shape: a string, vector, map or even nested map.\nExample:\ninfo:\n  twitter: wizzkid\n  classes: [ one, two, three ]"
  },
  {
    "objectID": "reference/config/functionality/index.html#name",
    "href": "reference/config/functionality/index.html#name",
    "title": "Functionality",
    "section": "name",
    "text": "name\nType: String\nName of the component and the filename of the executable when built with viash build.\nExample:\nname: this_is_my_component"
  },
  {
    "objectID": "reference/config/functionality/index.html#namespace",
    "href": "reference/config/functionality/index.html#namespace",
    "title": "Functionality",
    "section": "namespace",
    "text": "namespace\nType: String\nDefault: Empty\nNamespace this component is a part of. See the Namespaces guide for more information on namespaces.\nExample:\nnamespace: fancy_components"
  },
  {
    "objectID": "reference/config/functionality/index.html#repositories",
    "href": "reference/config/functionality/index.html#repositories",
    "title": "Functionality",
    "section": "repositories",
    "text": "repositories\nType: List of Repository\nDefault: Empty\n(Pre-)defines repositories that can be used as repository in dependencies. Allows reusing repository definitions in case it is used in multiple dependencies.\nExample:\nrepositories:\n  - name: openpipelines-bio\n    type: github\n    uri: openpipelines-bio/modules\n    tag: 0.3.0"
  },
  {
    "objectID": "reference/config/functionality/index.html#requirements",
    "href": "reference/config/functionality/index.html#requirements",
    "title": "Functionality",
    "section": "requirements",
    "text": "requirements\nType: ComputationalRequirements\nDefault: Empty\nComputational requirements related to running the component. cpus specifies the maximum number of (logical) cpus a component is allowed to use., whereas memory specifies the maximum amount of memory a component is allowed to allicate. Memory units must be in B, KB, MB, GB, TB or PB.\nExample:\nrequirements:\n  cpus: 5\n  memory: 10GB"
  },
  {
    "objectID": "reference/config/functionality/index.html#resources",
    "href": "reference/config/functionality/index.html#resources",
    "title": "Functionality",
    "section": "resources",
    "text": "resources\nType: List of Resource\nDefault: Empty\nResources are files that support the component. The first resource should be a script that will be executed when the functionality is run. Additional resources will be copied to the same directory.\nCommon properties:\n\ntype: file / r_script / python_script / bash_script / javascript_script / scala_script / csharp_script, specifies the type of the resource. The first resource cannot be of type file. When the type is not specified, the default type is simply file.\ndest: filename, the resulting name of the resource. From within a script, the file can be accessed at meta[\"resources_dir\"] + \"/\" + dest. If unspecified, dest will be set to the basename of the path parameter.\npath: path/to/file, the path of the input file. Can be a relative or an absolute path, or a URI. Mutually exclusive with text.\ntext: …multiline text…, the content of the resulting file specified as a string. Mutually exclusive with path.\nis_executable: true / false, whether the resulting resource file should be made executable.\n\nExample:\nresources:\n  - type: r_script\n    path: script.R\n  - type: file\n    path: resource1.txt"
  },
  {
    "objectID": "reference/config/functionality/index.html#status",
    "href": "reference/config/functionality/index.html#status",
    "title": "Functionality",
    "section": "status",
    "text": "status\nType: Status\nDefault: Enabled\nAllows setting a component to active, deprecated or disabled."
  },
  {
    "objectID": "reference/config/functionality/index.html#test_resources",
    "href": "reference/config/functionality/index.html#test_resources",
    "title": "Functionality",
    "section": "test_resources",
    "text": "test_resources\nType: List of Resource\nDefault: Empty\nOne or more scripts to be used to test the component behaviour when viash test is invoked. Additional files of type file will be made available only during testing. Each test script should expect no command-line inputs, be platform-independent, and return an exit code &gt;0 when unexpected behaviour occurs during testing. See Unit Testing for more info.\nExample:\ntest_resources:\n  - type: bash_script\n    path: tests/test1.sh\n  - type: r_script\n    path: tests/test2.R\n  - path: resource1.txt"
  },
  {
    "objectID": "reference/config/functionality/index.html#usage",
    "href": "reference/config/functionality/index.html#usage",
    "title": "Functionality",
    "section": "usage",
    "text": "usage\nType: String\nDefault: Empty\nA description on how to use the component. This will be displayed with --help under the ‘Usage:’ section.\nExample:\nusage: Place the executable in a directory containing TSV files and run it"
  },
  {
    "objectID": "reference/config/functionality/index.html#version",
    "href": "reference/config/functionality/index.html#version",
    "title": "Functionality",
    "section": "version",
    "text": "version\nType: String\nDefault: Empty\nVersion of the component. This field will be used to version the executable and the Docker container.\nExample:\nversion: 0.8"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/apkRequirements.html",
    "href": "reference/config/platforms/docker/setup/apkRequirements.html",
    "title": "Apk Requirements",
    "section": "",
    "text": "Specify which apk packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/apkRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/apkRequirements.html#packages",
    "title": "Apk Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install.\nExample:\npackages: [ sl ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/apkRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/apkRequirements.html#type",
    "title": "Apk Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html",
    "title": "Docker Requirements",
    "section": "",
    "text": "Specify which Docker commands should be run during setup.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#add",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#add",
    "title": "Docker Requirements",
    "section": "add",
    "text": "add\nType: String / List of String\nDefault: Empty\nSpecifies which ADD entries to add to the Dockerfile while building it.\nExample:\nadd: [ \"http://foo/bar .\" ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#build_args",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#build_args",
    "title": "Docker Requirements",
    "section": "build_args",
    "text": "build_args\nType: String / List of String\nDefault: Empty\nSpecifies which ARG entries to add to the Dockerfile while building it.\nExample:\nbuild_args: [ \"R_VERSION=4.2\" ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#copy",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#copy",
    "title": "Docker Requirements",
    "section": "copy",
    "text": "copy\nType: String / List of String\nDefault: Empty\nSpecifies which COPY entries to add to the Dockerfile while building it.\nExample:\ncopy: [ \"resource.txt /path/to/resource.txt\" ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#env",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#env",
    "title": "Docker Requirements",
    "section": "env",
    "text": "env\nType: String / List of String\nDefault: Empty\nSpecifies which ENV entries to add to the Dockerfile while building it. Unlike ARG, ENV entries are also accessible from inside the container.\nExample:\nenv: [ \"R_VERSION=4.2\" ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#label",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#label",
    "title": "Docker Requirements",
    "section": "label",
    "text": "label\nType: String / List of String\nDefault: Empty\nSpecifies which LABEL entries to add to the Dockerfile while building it.\nExample:\nlabel: [ component=\"foo\" ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#run",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#run",
    "title": "Docker Requirements",
    "section": "run",
    "text": "run\nType: String / List of String\nDefault: Empty\nSpecifies which RUN entries to add to the Dockerfile while building it.\nExample:\nrun: |\n  echo 'Run a custom command'\n  echo 'Foo' &gt; /path/to/file.txt"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/dockerRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/dockerRequirements.html#type",
    "title": "Docker Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rubyRequirements.html",
    "href": "reference/config/platforms/docker/setup/rubyRequirements.html",
    "title": "Ruby Requirements",
    "section": "",
    "text": "Specify which Ruby packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rubyRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/rubyRequirements.html#packages",
    "title": "Ruby Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install.\nExample:\npackages: [ rspec ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/rubyRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/rubyRequirements.html#type",
    "title": "Ruby Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/aptRequirements.html",
    "href": "reference/config/platforms/docker/setup/aptRequirements.html",
    "title": "Apt Requirements",
    "section": "",
    "text": "Specify which apt packages should be available in order to run the component.\nExample:"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/aptRequirements.html#interactive",
    "href": "reference/config/platforms/docker/setup/aptRequirements.html#interactive",
    "title": "Apt Requirements",
    "section": "interactive",
    "text": "interactive\nType: Boolean\nDefault: False\nIf false, the Debian frontend is set to non-interactive (recommended). Default: false."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/aptRequirements.html#packages",
    "href": "reference/config/platforms/docker/setup/aptRequirements.html#packages",
    "title": "Apt Requirements",
    "section": "packages",
    "text": "packages\nType: String / List of String\nDefault: Empty\nSpecifies which packages to install.\nExample:\npackages: [ sl ]"
  },
  {
    "objectID": "reference/config/platforms/docker/setup/aptRequirements.html#type",
    "href": "reference/config/platforms/docker/setup/aptRequirements.html#type",
    "title": "Apt Requirements",
    "section": "type",
    "text": "type\nType: String\nSpecifies the type of the requirement specification."
  },
  {
    "objectID": "reference/config/platforms/docker/setup/index.html",
    "href": "reference/config/platforms/docker/setup/index.html",
    "title": "Requirements",
    "section": "",
    "text": "Requirements for installing the following types of packages:\n\napt\napk\nDocker setup instructions\nJavaScript\nPython\nR\nRuby\nyum"
  },
  {
    "objectID": "reference/config/platforms/nextflow/auto.html",
    "href": "reference/config/platforms/nextflow/auto.html",
    "title": "Nextflow Auto",
    "section": "",
    "text": "Automated processing flags which can be toggled on or off."
  },
  {
    "objectID": "reference/config/platforms/nextflow/auto.html#publish",
    "href": "reference/config/platforms/nextflow/auto.html#publish",
    "title": "Nextflow Auto",
    "section": "publish",
    "text": "publish\nType: Either   - Boolean   - String\nDefault: False\nIf true, the module’s outputs are automatically published to params.publishDir. If equal to \"state\", also a .state.yaml file will be published in the publish dir. Will throw an error if params.publishDir is not defined.\nDefault: false."
  },
  {
    "objectID": "reference/config/platforms/nextflow/auto.html#simplifyinput",
    "href": "reference/config/platforms/nextflow/auto.html#simplifyinput",
    "title": "Nextflow Auto",
    "section": "simplifyInput",
    "text": "simplifyInput\nType: Boolean\nDefault: True\nIf true, an input tuple only containing only a single File (e.g. [\"foo\", file(\"in.h5ad\")]) is automatically transformed to a map (i.e. [\"foo\", [ input: file(\"in.h5ad\") ] ]).\nDefault: true."
  },
  {
    "objectID": "reference/config/platforms/nextflow/auto.html#simplifyoutput",
    "href": "reference/config/platforms/nextflow/auto.html#simplifyoutput",
    "title": "Nextflow Auto",
    "section": "simplifyOutput",
    "text": "simplifyOutput\nType: Boolean\nDefault: False\nIf true, an output tuple containing a map with a File (e.g. [\"foo\", [ output: file(\"out.h5ad\") ] ]) is automatically transformed to a map (i.e. [\"foo\", file(\"out.h5ad\")]).\nDefault: false."
  },
  {
    "objectID": "reference/config/platforms/nextflow/auto.html#transcript",
    "href": "reference/config/platforms/nextflow/auto.html#transcript",
    "title": "Nextflow Auto",
    "section": "transcript",
    "text": "transcript\nType: Boolean\nDefault: False\nIf true, the module’s transcripts from work/ are automatically published to params.transcriptDir. If not defined, params.publishDir + \"/_transcripts\" will be used. Will throw an error if neither are defined.\nDefault: false."
  },
  {
    "objectID": "reference/config/platforms/nextflow/config.html",
    "href": "reference/config/platforms/nextflow/config.html",
    "title": "Nextflow Config",
    "section": "",
    "text": "Allows tweaking how the Nextflow Config file is generated."
  },
  {
    "objectID": "reference/config/platforms/nextflow/config.html#labels",
    "href": "reference/config/platforms/nextflow/config.html#labels",
    "title": "Nextflow Config",
    "section": "labels",
    "text": "labels\nType: Map of String to String\nDefault: A series of default labels to specify memory and cpu constraints\nA series of default labels to specify memory and cpu constraints.\nThe default memory labels are defined as “mem1gb”, “mem2gb”, “mem4gb”, … upto “mem512tb” and follows powers of 2. The default cpu labels are defined as “cpu1”, “cpu2”, “cpu5”, “cpu10”, … upto “cpu1000” and follows a semi logarithmic scale (1, 2, 5 per decade).\nConceptually it is possible for a Viash Config to overwrite the full labels parameter, however likely it is more efficient to add additional labels in the Viash Project with a config mod.\nExamples:\nReplace the default labels with a different set of labels\nlabels:\n  lowmem: \"memory = 4.GB\"\n  lowcpu: \"cpus = 4\"\n  midmem: \"memory = 25.GB\"\n  midcpu: \"cpus = 10\"\n  highmem: \"memory = 50.GB\"\n  highcpu: \"cpus = 20\"\n  vhighmem: \"memory = 100.GB\"\n  vhighcpu: \"cpus = 40\"\nAdd ‘lowmem’ and ‘lowcpu’ to the default labels by using a config mod\n-c '.platforms[.type == \"nextflow\"].config.labels.lowmem := \"memory = 4.GB\";.platforms[.type == \"nextflow\"].config.labels.lowcpu := \"cpus = 4\"'\nAdd ‘lowmem’ and ‘lowcpu’ to the default labels by using the Viash Project file\nconfig_mods: |\n  .platforms[.type == \"nextflow\"].config.labels.lowmem := \"memory = 4.GB\"\n  .platforms[.type == \"nextflow\"].config.labels.lowcpu := \"cpus = 4\"\n\nReplace the default labels with a different set of labels by using the Viash Project file\nconfig_mods: |\n  .platforms[.type == \"nextflow\"].config.labels := { lowmem: \"memory = 4.GB\", lowcpu: \"cpus = 4\", midmem: \"memory = 25.GB\", midcpu: \"cpus = 10\", highmem: \"memory = 50.GB\", highcpu: \"cpus = 20\", vhighmem: \"memory = 100.GB\", vhighcpu: \"cpus = 40\" }"
  },
  {
    "objectID": "reference/config/platforms/nextflow/config.html#script",
    "href": "reference/config/platforms/nextflow/config.html#script",
    "title": "Nextflow Config",
    "section": "script",
    "text": "script\nType: String / List of String\nDefault: Empty\nIncludes a single string or list of strings into the nextflow.config file. This can be used to add custom profiles or include an additional config file.\nExamples:\nscript:\n  - |\n    profiles {\n    ...\n    }\nscript: includeConfig(\"config.config\")"
  },
  {
    "objectID": "reference/config/platforms/index.html",
    "href": "reference/config/platforms/index.html",
    "title": "Platform",
    "section": "",
    "text": "A list of platforms to generate target artifacts for.\n\nNative\nDocker\nNextflow\n\nExample:\nplatforms:\n  - type: docker\n    image: \"bash:4.0\"\n  - type: native\n  - type: nextflow\n    directives:\n      label: [lowcpu, midmem]"
  }
]